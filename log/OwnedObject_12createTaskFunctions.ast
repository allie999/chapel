AST dump for OwnedObject after pass createTaskFunctions.
Module use list: ChapelStandard HaltWrappers 

{
  function chpl__init_OwnedObject[416040]() : void[4] "insert line file info" "module init"
  {
    (505453 return _void[55])
  }
  function _owned[30](?).chpl_forwarding_expr1[39606](arg _mt[40583]:_MT[238], arg this[40581]:_owned[30](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[505207] "RVV" "temp"
    (505211 'move' ret[505207](39605 call(370487 call (partial) borrow _mt[243] this[40581])))
    (505209 return ret[505207])
  }
  function _owned[30](?).init[39616](arg _mt[40587]:_MT[238], ref arg this[40585]:_owned[30](?), arg chpl_t[39614]:_any[178](?)) : void[4] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603066] "expr temp" "maybe param" "maybe type" "temp"
    (603069 'move' call_tmp[603066](39621 call isClass chpl_t[39614]))
    unknown call_tmp[603071] "expr temp" "maybe param" "maybe type" "temp"
    (603074 'move' call_tmp[603071](39622 call ! call_tmp[603066]))
    unknown call_tmp[603076] "expr temp" "maybe param" "maybe type" "temp"
    (603079 'move' call_tmp[603076](39645 call _cond_test call_tmp[603071]))
    if call_tmp[603076]
    {
      (39643 call compilerError "owned only works with classes")
    }
    unknown tmp[454170] "temp" "type variable"
    (454172 'move' tmp[454170](39660 call _to_borrowed chpl_t[39614]))
    (454174 'init field' this[40585] c"chpl_t" tmp[454170])
    (474137 'end of statement')
    unknown call_tmp[603081] "expr temp" "maybe param" "maybe type" "temp"
    (603084 'move' call_tmp[603081](454188 '.v' this[40585] c"chpl_t"))
    unknown call_tmp[603086] "maybe param" "maybe type" "temp"
    (603089 'move' call_tmp[603086](454180 'to nilable class' call_tmp[603081]))
    unknown tmp[454178] "temp"
    (454182 'init var' tmp[454178] nil[44] call_tmp[603086])
    (454184 'init field' this[40585] c"chpl_p" tmp[454178])
    (474138 'end of statement')
    (505213 return _void[55])
  }
  function _owned[30](?).init[39682](arg _mt[40591]:_MT[238], ref arg this[40589]:_owned[30](?), arg p[39679]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (39703 call compilerError "cannot initialize owned from a borrow")
    (474139 'end of statement')
    unknown call_tmp[603093] "expr temp" "maybe param" "maybe type" "temp"
    (603096 'move' call_tmp[603093](39715 call _to_unmanaged p[39679]))
    (39717 call(39709 call (partial) init _mt[243] this[40589]) call_tmp[603093])
    (505215 return _void[55])
  }
  function _owned[30](?).init[39727](arg _mt[40595]:_MT[238], ref arg this[40593]:_owned[30](?), arg p[39724]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454191] "temp" "type variable"
    unknown call_tmp[603098] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603101 'move' call_tmp[603098](39735 'typeof' p[39724]))
    (454193 'move' tmp[454191](39737 call _to_borrowed call_tmp[603098]))
    (454195 'init field' this[40593] c"chpl_t" tmp[454191])
    (474141 'end of statement')
    unknown call_tmp[603103] "maybe param" "maybe type" "temp"
    (603106 'move' call_tmp[603103](39749 call _to_borrowed p[39724]))
    unknown call_tmp[603108] "expr temp" "maybe param" "maybe type" "temp"
    (603111 'move' call_tmp[603108](454209 '.v' this[40593] c"chpl_t"))
    unknown call_tmp[603113] "maybe param" "maybe type" "temp"
    (603116 'move' call_tmp[603113](454201 'to nilable class' call_tmp[603108]))
    unknown tmp[454199] "temp"
    (454203 'init var' tmp[454199] call_tmp[603103] call_tmp[603113])
    (454205 'init field' this[40593] c"chpl_p" tmp[454199])
    (474142 'end of statement')
    (505217 return _void[55])
  }
  function _owned[30](?).init[39762](arg _mt[40599]:_MT[238], ref arg this[40597]:_owned[30](?), arg p[39759]:_any[178](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (39793 call compilerError "owned only works with classes")
    (474143 'end of statement')
    unknown tmp[454218] "temp" "type variable"
    (454220 'move' tmp[454218](454212 'typeof' p[39759]))
    (454222 'init field' this[40597] c"chpl_t" tmp[454218])
    (474144 'end of statement')
    unknown call_tmp[603118] "expr temp" "maybe param" "maybe type" "temp"
    (603121 'move' call_tmp[603118](454236 '.v' this[40597] c"chpl_t"))
    unknown call_tmp[603123] "maybe param" "maybe type" "temp"
    (603126 'move' call_tmp[603123](454228 'to nilable class' call_tmp[603118]))
    unknown tmp[454226] "temp"
    (454230 'init var' tmp[454226] p[39759] call_tmp[603123])
    (454232 'init field' this[40597] c"chpl_p" tmp[454226])
    (474145 'end of statement')
    (505219 return _void[55])
  }
  where {
    unknown tmp[418217] "maybe param" "temp"
    unknown tmp[418238] "maybe param" "temp"
    unknown call_tmp[603128] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603131 'move' call_tmp[603128](454214 'typeof' p[39759]))
    unknown call_tmp[603133] "expr temp" "maybe param" "maybe type" "temp"
    (603136 'move' call_tmp[603133](39767 call isClass call_tmp[603128]))
    (418249 'move' tmp[418238](39769 call == call_tmp[603133] 0))
    unknown call_tmp[603138] "expr temp" "maybe param" "maybe type" "temp"
    (603141 'move' call_tmp[603138](418251 call _cond_invalid tmp[418238]))
    if call_tmp[603138]
    {
      (418254 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554015] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554016] "maybe param" "temp"
    unknown call_tmp[603143] "expr temp" "maybe param" "maybe type" "temp"
    (603146 'move' call_tmp[603143](418239 call isTrue tmp[418238]))
    (554021 'move' tmp[554016](554019 call _cond_test call_tmp[603143]))
    if tmp[554016]
    {
      unknown tmp[554023] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603148] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603151 'move' call_tmp[603148](454216 'typeof' p[39759]))
      unknown call_tmp[603153] "expr temp" "maybe param" "maybe type" "temp"
      (603156 'move' call_tmp[603153](354295 'is_subtype' _owned[30](?) call_tmp[603148]))
      unknown call_tmp[603158] "expr temp" "maybe param" "maybe type" "temp"
      (603161 'move' call_tmp[603158](39777 call == call_tmp[603153] 0))
      (554025 'move' tmp[554023](418242 call isTrue call_tmp[603158]))
      (554030 'move' tmp[554015](554027 '_paramFoldLogical' tmp[554016] tmp[554023]))
    }
    {
      (554035 'move' tmp[554015](554032 '_paramFoldLogical' tmp[554016] 0))
    }
    (418228 'move' tmp[418217] tmp[554015])
    unknown call_tmp[603163] "expr temp" "maybe param" "maybe type" "temp"
    (603166 'move' call_tmp[603163](418230 call _cond_invalid tmp[418217]))
    if call_tmp[603163]
    {
      (418233 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554042] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554043] "maybe param" "temp"
    unknown call_tmp[603168] "expr temp" "maybe param" "maybe type" "temp"
    (603171 'move' call_tmp[603168](418218 call isTrue tmp[418217]))
    (554048 'move' tmp[554043](554046 call _cond_test call_tmp[603168]))
    if tmp[554043]
    {
      unknown tmp[554050] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603173] "expr temp" "maybe param" "maybe type" "temp"
      (603176 'move' call_tmp[603173](39784 call isIterator p[39759]))
      unknown call_tmp[603178] "expr temp" "maybe param" "maybe type" "temp"
      (603181 'move' call_tmp[603178](39786 call == call_tmp[603173] 0))
      (554052 'move' tmp[554050](418221 call isTrue call_tmp[603178]))
      (554057 'move' tmp[554042](554054 '_paramFoldLogical' tmp[554043] tmp[554050]))
    }
    {
      (554062 'move' tmp[554042](554059 '_paramFoldLogical' tmp[554043] 0))
    }
    (748365 call chpl_statementLevelSymbol tmp[554042])
  }
  function _owned[30](?).init=[39821](arg _mt[40603]:_MT[238], ref arg this[40601]:_owned[30](?), ref arg src[39818]:_owned[30](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[418259] "maybe param" "temp"
    unknown call_tmp[603183] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603186 'move' call_tmp[603183](39825 'typeof' this[40601]))
    (418270 'move' tmp[418259](39827 call isNonNilableClass call_tmp[603183]))
    unknown call_tmp[603188] "expr temp" "maybe param" "maybe type" "temp"
    (603191 'move' call_tmp[603188](418272 call _cond_invalid tmp[418259]))
    if call_tmp[603188]
    {
      (418275 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554069] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554070] "maybe param" "temp"
    unknown call_tmp[603193] "expr temp" "maybe param" "maybe type" "temp"
    (603196 'move' call_tmp[603193](418260 call isTrue tmp[418259]))
    (554075 'move' tmp[554070](554073 call _cond_test call_tmp[603193]))
    if tmp[554070]
    {
      unknown tmp[554077] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603198] "expr temp" "maybe param" "maybe type" "temp"
      (603201 'move' call_tmp[603198](39831 call isNilableClass src[39818]))
      (554079 'move' tmp[554077](418263 call isTrue call_tmp[603198]))
      (554084 'move' tmp[554069](554081 '_paramFoldLogical' tmp[554070] tmp[554077]))
    }
    {
      (554089 'move' tmp[554069](554086 '_paramFoldLogical' tmp[554070] 0))
    }
    unknown call_tmp[603203] "expr temp" "maybe param" "maybe type" "temp"
    (603206 'move' call_tmp[603203](39857 call _cond_test tmp[554069]))
    if call_tmp[603203]
    {
      (39855 call compilerError "cannot create a non-nilable owned variable from a nilable class instance")
    }
    unknown call_tmp[603208] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603211 'move' call_tmp[603208](39870 'typeof' this[40601]))
    unknown call_tmp[603215] "expr temp" "maybe param" "maybe type" "temp"
    (603218 'move' call_tmp[603215](39871 call chpl_t _mt[243] call_tmp[603208]))
    unknown call_tmp[603222] "expr temp" "maybe param" "maybe type" "temp"
    (603225 'move' call_tmp[603222](39865 call chpl_t _mt[243] src[39818]))
    unknown call_tmp[603227] "expr temp" "maybe param" "maybe type" "temp"
    (603230 'move' call_tmp[603227](354296 'is_coercible' call_tmp[603215] call_tmp[603222]))
    unknown call_tmp[603232] "expr temp" "maybe param" "maybe type" "temp"
    (603235 'move' call_tmp[603232](39876 call == call_tmp[603227] 0))
    unknown call_tmp[603237] "expr temp" "maybe param" "maybe type" "temp"
    (603240 'move' call_tmp[603237](39943 call _cond_test call_tmp[603232]))
    if call_tmp[603237]
    {
      unknown call_tmp[603242] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603245 'move' call_tmp[603242](39898 'typeof' src[39818]))
      unknown call_tmp[603247] "expr temp" "maybe param" "maybe type" "temp"
      (603250 'move' call_tmp[603247](39900 call _cast string[26] call_tmp[603242]))
      unknown call_tmp[603252] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603255 'move' call_tmp[603252](39920 'typeof' this[40601]))
      unknown call_tmp[603257] "expr temp" "maybe param" "maybe type" "temp"
      (603260 'move' call_tmp[603257](39922 call _cast string[26] call_tmp[603252]))
      (39941 call compilerError "cannot coerce '" call_tmp[603247] "' to '" call_tmp[603257] "' in initialization")
    }
    unknown tmp[454239] "temp" "type variable"
    unknown call_tmp[603262] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603265 'move' call_tmp[603262](39953 'typeof' this[40601]))
    (454241 'move' tmp[454239](39954 call chpl_t _mt[243] call_tmp[603262]))
    (454243 'init field' this[40601] c"chpl_t" tmp[454239])
    (474149 'end of statement')
    unknown call_tmp[603271] "maybe param" "maybe type" "temp"
    (603274 'move' call_tmp[603271](39969 call(39965 call (partial) release _mt[243] src[39818])))
    unknown call_tmp[603276] "expr temp" "maybe param" "maybe type" "temp"
    (603279 'move' call_tmp[603276](454257 '.v' this[40601] c"chpl_t"))
    unknown call_tmp[603281] "maybe param" "maybe type" "temp"
    (603284 'move' call_tmp[603281](454249 'to nilable class' call_tmp[603276]))
    unknown tmp[454247] "temp"
    (454251 'init var' tmp[454247] call_tmp[603271] call_tmp[603281])
    (454253 'init field' this[40601] c"chpl_p" tmp[454247])
    (474150 'end of statement')
    (505221 return _void[55])
  }
  function _owned[30](?).init=[39988](arg _mt[40607]:_MT[238], ref arg this[40605]:_owned[30](?), arg src[39985]:_shared[32](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40009 call compilerError "cannot create an owned variable from a shared class instance")
    (474151 'end of statement')
    unknown tmp[454260] "temp" "type variable"
    (454262 'move' tmp[454260] int(64)[13])
    (454264 'init field' this[40605] c"chpl_t" tmp[454260])
    (474152 'end of statement')
    unknown tmp[454269] "temp"
    unknown call_tmp[603286] "expr temp" "maybe param" "maybe type" "temp"
    (603289 'move' call_tmp[603286](454279 '.v' this[40605] c"chpl_t"))
    unknown call_tmp[603291] "expr temp" "maybe param" "maybe type" "temp"
    (603294 'move' call_tmp[603291](454271 'to nilable class' call_tmp[603286]))
    (454273 'default init var' tmp[454269] call_tmp[603291])
    (454275 '.=' this[40605] c"chpl_p" tmp[454269])
    (474153 'end of statement')
    (505223 return _void[55])
  }
  function _owned[30](?).init=[40028](arg _mt[40611]:_MT[238], ref arg this[40609]:_owned[30](?), arg src[40025]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40051 call compilerError "cannot create an owned variable from a borrowed class instance")
    (474154 'end of statement')
    unknown tmp[454282] "temp" "type variable"
    (454284 'move' tmp[454282] int(64)[13])
    (454286 'init field' this[40609] c"chpl_t" tmp[454282])
    (474155 'end of statement')
    unknown tmp[454291] "temp"
    unknown call_tmp[603296] "expr temp" "maybe param" "maybe type" "temp"
    (603299 'move' call_tmp[603296](454301 '.v' this[40609] c"chpl_t"))
    unknown call_tmp[603301] "expr temp" "maybe param" "maybe type" "temp"
    (603304 'move' call_tmp[603301](454293 'to nilable class' call_tmp[603296]))
    (454295 'default init var' tmp[454291] call_tmp[603301])
    (454297 '.=' this[40609] c"chpl_p" tmp[454291])
    (474156 'end of statement')
    (505225 return _void[55])
  }
  function _owned[30](?).init=[40070](arg _mt[40615]:_MT[238], ref arg this[40613]:_owned[30](?), arg src[40067]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40091 call compilerError "cannot create an owned variable from an unmanaged class instance")
    (474157 'end of statement')
    unknown tmp[454304] "temp" "type variable"
    (454306 'move' tmp[454304] int(64)[13])
    (454308 'init field' this[40613] c"chpl_t" tmp[454304])
    (474158 'end of statement')
    unknown tmp[454313] "temp"
    unknown call_tmp[603306] "expr temp" "maybe param" "maybe type" "temp"
    (603309 'move' call_tmp[603306](454323 '.v' this[40613] c"chpl_t"))
    unknown call_tmp[603311] "expr temp" "maybe param" "maybe type" "temp"
    (603314 'move' call_tmp[603311](454315 'to nilable class' call_tmp[603306]))
    (454317 'default init var' tmp[454313] call_tmp[603311])
    (454319 '.=' this[40613] c"chpl_p" tmp[454313])
    (474159 'end of statement')
    (505227 return _void[55])
  }
  function _owned[30](?).init=[40110](arg _mt[40619]:_MT[238], ref arg this[40617]:_owned[30](?), arg src[40107]:_nilType[42]) : void[4] "leaves this nil" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[603318] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603321 'move' call_tmp[603318](40117 'typeof' this[40617]))
    unknown call_tmp[603325] "expr temp" "maybe param" "maybe type" "temp"
    (603328 'move' call_tmp[603325](40118 call chpl_t _mt[243] call_tmp[603318]))
    (40122 call(40113 call (partial) init _mt[243] this[40617]) call_tmp[603325])
    (474160 'end of statement')
    unknown call_tmp[603332] "expr temp" "maybe param" "maybe type" "temp"
    (603335 'move' call_tmp[603332](370513 call chpl_t _mt[243] this[40617]))
    unknown call_tmp[603337] "expr temp" "maybe param" "maybe type" "temp"
    (603340 'move' call_tmp[603337](40128 call isNonNilableClass call_tmp[603332]))
    unknown call_tmp[603342] "expr temp" "maybe param" "maybe type" "temp"
    (603345 'move' call_tmp[603342](40150 call _cond_test call_tmp[603337]))
    if call_tmp[603342]
    {
      (40148 call compilerError "Assigning non-nilable owned to nil")
    }
    (505229 return _void[55])
  }
  function _owned[30](?).init[40163](arg _mt[40623]:_MT[238], ref arg this[40621]:_owned[30](?), ref arg src[40160]:_owned[30](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454326] "temp" "type variable"
    (454328 'move' tmp[454326](40170 call chpl_t _mt[243] src[40160]))
    (454330 'init field' this[40621] c"chpl_t" tmp[454326])
    (474162 'end of statement')
    unknown call_tmp[603351] "maybe param" "maybe type" "temp"
    (603354 'move' call_tmp[603351](40186 call(40182 call (partial) release _mt[243] src[40160])))
    unknown call_tmp[603356] "expr temp" "maybe param" "maybe type" "temp"
    (603359 'move' call_tmp[603356](454344 '.v' this[40621] c"chpl_t"))
    unknown call_tmp[603361] "maybe param" "maybe type" "temp"
    (603364 'move' call_tmp[603361](454336 'to nilable class' call_tmp[603356]))
    unknown tmp[454334] "temp"
    (454338 'init var' tmp[454334] call_tmp[603351] call_tmp[603361])
    (454340 'init field' this[40621] c"chpl_p" tmp[454334])
    (474163 'end of statement')
    (505231 return _void[55])
  }
  function _owned[30](?).create[40196](arg _mt[40627]:_MT[238], arg this[40625]:_owned[30](?), arg source[40194]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[603366] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603369 'move' call_tmp[603366](40218 'typeof' source[40194]))
    unknown call_tmp[603371] "expr temp" "maybe param" "maybe type" "temp"
    (603374 'move' call_tmp[603371](40220 call _cast string[26] call_tmp[603366]))
    (40222 call compilerError "cannot create an 'owned' from " call_tmp[603371])
    (505233 return _void[55])
  }
  function _owned[30](?).create[40233](arg _mt[40631]:_MT[238], arg this[40629]:_owned[30](?), in arg take[40230]:_owned[30](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[505237] "RVV" "temp"
    (505242 'move' ret[505237](505241 'deref' take[40230]))
    (505239 return ret[505237])
  }
  function _owned[30](?).create[40247](arg _mt[40635]:_MT[238], arg this[40633]:_owned[30](?), arg p[40244]:unmanaged[220](?)) : _unknown[51] "inline" "method" "primary method" "unsafe"
  {
    unknown ret[505246] "RVV" "temp"
    unknown result[40254] "dead at end of block" "insert auto destroy"
    unknown call_tmp[603376] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603379 'move' call_tmp[603376](40250 'typeof' p[40244]))
    unknown call_tmp[603381] "expr temp" "maybe param" "maybe type" "temp"
    (603384 'move' call_tmp[603381](40252 call _cast _owned[30](?) call_tmp[603376]))
    (540665 'default init var' result[40254] call_tmp[603381])
    (40257 'end of statement')
    (40267 call(40262 call (partial) retain _mt[243] result[40254]) p[40244])
    (474166 'end of statement' result[40254])
    (505251 'move' ret[505246](505250 'deref' result[40254]))
    gotoReturn _end_create[505244] _end_create[505244]
    (474168 'end of statement' result[40254])
    label _end_create[505244]
    (505248 return ret[505246])
  }
  function _owned[30](?).deinit[40276](arg _mt[40639]:_MT[238], arg this[40637]:_owned[30](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603390] "expr temp" "maybe param" "maybe type" "temp"
    (603393 'move' call_tmp[603390](370526 call chpl_p _mt[243] this[40637]))
    unknown call_tmp[603395] "expr temp" "maybe param" "maybe type" "temp"
    (603398 'move' call_tmp[603395](40281 call isClass call_tmp[603390]))
    unknown call_tmp[603400] "expr temp" "maybe param" "maybe type" "temp"
    (603403 'move' call_tmp[603400](40300 call _cond_test call_tmp[603395]))
    if call_tmp[603400]
    {
      unknown call_tmp[603407] "expr temp" "maybe param" "maybe type" "temp"
      (603410 'move' call_tmp[603407](370531 call chpl_p _mt[243] this[40637]))
      unknown call_tmp[603412] "expr temp" "maybe param" "maybe type" "temp"
      (603415 'move' call_tmp[603412](40284 call != call_tmp[603407] nil[44]))
      unknown call_tmp[603417] "expr temp" "maybe param" "maybe type" "temp"
      (603420 'move' call_tmp[603417](40294 call _cond_test call_tmp[603412]))
      if call_tmp[603417]
      {
        unknown call_tmp[603424] "expr temp" "maybe param" "maybe type" "temp"
        (603427 'move' call_tmp[603424](370536 call chpl_p _mt[243] this[40637]))
        unknown call_tmp[603429] "expr temp" "maybe param" "maybe type" "temp"
        (603432 'move' call_tmp[603429](40289 call _to_unmanaged call_tmp[603424]))
        (40291 call chpl__delete call_tmp[603429])
      }
    }
    (505255 return _void[55])
  }
  function _owned[30](?).clear[40309](arg _mt[40643]:_MT[238], ref arg this[40641]:_owned[30](?)) : _unknown[51] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603436] "expr temp" "maybe param" "maybe type" "temp"
    (603439 'move' call_tmp[603436](370541 call chpl_p _mt[243] this[40641]))
    unknown call_tmp[603441] "expr temp" "maybe param" "maybe type" "temp"
    (603444 'move' call_tmp[603441](40313 call != call_tmp[603436] nil[44]))
    unknown call_tmp[603446] "expr temp" "maybe param" "maybe type" "temp"
    (603449 'move' call_tmp[603446](40329 call _cond_test call_tmp[603441]))
    if call_tmp[603446]
    {
      unknown call_tmp[603453] "expr temp" "maybe param" "maybe type" "temp"
      (603456 'move' call_tmp[603453](370546 call chpl_p _mt[243] this[40641]))
      unknown call_tmp[603458] "expr temp" "maybe param" "maybe type" "temp"
      (603461 'move' call_tmp[603458](40318 call _to_unmanaged call_tmp[603453]))
      (40320 call chpl__delete call_tmp[603458])
      (474171 'end of statement')
      unknown call_tmp[603465] "expr temp" "maybe param" "maybe type" "temp"
      (603468 'move' call_tmp[603465](370551 call chpl_p _mt[243] this[40641]))
      (40326 call = call_tmp[603465] nil[44])
    }
    (505257 return _void[55])
  }
  function _owned[30](?).retain[40342](arg _mt[40647]:_MT[238], ref arg this[40645]:_owned[30](?), arg newPtr[40339]:unmanaged[220](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603472] "expr temp" "maybe param" "maybe type" "temp"
    (603475 'move' call_tmp[603472](370557 call chpl_t _mt[243] this[40645]))
    unknown call_tmp[603477] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603480 'move' call_tmp[603477](40346 'typeof' newPtr[40339]))
    unknown call_tmp[603482] "expr temp" "maybe param" "maybe type" "temp"
    (603485 'move' call_tmp[603482](354297 'is_coercible' call_tmp[603472] call_tmp[603477]))
    unknown call_tmp[603487] "expr temp" "maybe param" "maybe type" "temp"
    (603490 'move' call_tmp[603487](40350 call ! call_tmp[603482]))
    unknown call_tmp[603492] "expr temp" "maybe param" "maybe type" "temp"
    (603495 'move' call_tmp[603492](40446 call _cond_test call_tmp[603487]))
    if call_tmp[603492]
    {
      unknown call_tmp[603497] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603500 'move' call_tmp[603497](40371 'typeof' newPtr[40339]))
      unknown call_tmp[603502] "expr temp" "maybe param" "maybe type" "temp"
      (603505 'move' call_tmp[603502](40373 call _cast string[26] call_tmp[603497]))
      unknown call_tmp[603507] "expr temp" "maybe param" "maybe type" "temp"
      (603510 'move' call_tmp[603507](40375 call + "cannot retain '" call_tmp[603502]))
      unknown call_tmp[603512] "expr temp" "maybe param" "maybe type" "temp"
      (603515 'move' call_tmp[603512](40394 call + call_tmp[603507] "' "))
      unknown call_tmp[603517] "expr temp" "maybe param" "maybe type" "temp"
      (603520 'move' call_tmp[603517](40413 call + call_tmp[603512] "(expected '"))
      unknown call_tmp[603524] "expr temp" "maybe param" "maybe type" "temp"
      (603527 'move' call_tmp[603524](370563 call chpl_t _mt[243] this[40645]))
      unknown call_tmp[603529] "expr temp" "maybe param" "maybe type" "temp"
      (603532 'move' call_tmp[603529](40418 call _to_unmanaged call_tmp[603524]))
      unknown call_tmp[603534] "expr temp" "maybe param" "maybe type" "temp"
      (603537 'move' call_tmp[603534](40420 call _cast string[26] call_tmp[603529]))
      unknown call_tmp[603539] "expr temp" "maybe param" "maybe type" "temp"
      (603542 'move' call_tmp[603539](40422 call + call_tmp[603517] call_tmp[603534]))
      unknown call_tmp[603544] "expr temp" "maybe param" "maybe type" "temp"
      (603547 'move' call_tmp[603544](40441 call + call_tmp[603539] "')"))
      (40444 call compilerError call_tmp[603544])
    }
    unknown call_tmp[603551] "maybe param" "maybe type" "temp"
    (603554 'move' call_tmp[603551](370568 call chpl_p _mt[243] this[40645]))
    unknown oldPtr[40453] "dead at end of block" "insert auto destroy"
    (540667 'init var' oldPtr[40453] call_tmp[603551])
    (40456 'end of statement')
    unknown call_tmp[603558] "expr temp" "maybe param" "maybe type" "temp"
    (603561 'move' call_tmp[603558](370573 call chpl_p _mt[243] this[40645]))
    (40459 call = call_tmp[603558] newPtr[40339])
    (474174 'end of statement')
    unknown call_tmp[603563] "expr temp" "maybe param" "maybe type" "temp"
    (603566 'move' call_tmp[603563](40471 call _cond_test oldPtr[40453]))
    if call_tmp[603563]
    {
      unknown call_tmp[603568] "expr temp" "maybe param" "maybe type" "temp"
      (603571 'move' call_tmp[603568](40466 call _to_unmanaged oldPtr[40453]))
      (40468 call chpl__delete call_tmp[603568])
      (474175 'end of statement' oldPtr[40453])
    }
    (505259 return _void[55])
  }
  function _owned[30](?).release[40480](arg _mt[40651]:_MT[238], ref arg this[40649]:_owned[30](?)) : _unknown[51] "leaves this nil" "nil from this" "method" "primary method"
  {
    unknown ret[505263] "RVV" "temp"
    unknown call_tmp[603575] "maybe param" "maybe type" "temp"
    (603578 'move' call_tmp[603575](370581 call chpl_p _mt[243] this[40649]))
    unknown oldPtr[40483] "dead at end of block" "insert auto destroy"
    (540669 'init var' oldPtr[40483] call_tmp[603575])
    (40486 'end of statement')
    unknown call_tmp[603582] "expr temp" "maybe param" "maybe type" "temp"
    (603585 'move' call_tmp[603582](370586 call chpl_p _mt[243] this[40649]))
    (40490 call = call_tmp[603582] nil[44])
    (474177 'end of statement')
    unknown call_tmp[603589] "expr temp" "maybe param" "maybe type" "temp"
    (603592 'move' call_tmp[603589](370591 call chpl_t _mt[243] this[40649]))
    unknown call_tmp[603594] "expr temp" "maybe param" "maybe type" "temp"
    (603597 'move' call_tmp[603594](40496 call _to_nilable call_tmp[603589]))
    unknown call_tmp[603601] "expr temp" "maybe param" "maybe type" "temp"
    (603604 'move' call_tmp[603601](370596 call chpl_t _mt[243] this[40649]))
    unknown call_tmp[603606] "expr temp" "maybe param" "maybe type" "temp"
    (603609 'move' call_tmp[603606](40498 call == call_tmp[603594] call_tmp[603601]))
    unknown call_tmp[603611] "expr temp" "maybe param" "maybe type" "temp"
    (603614 'move' call_tmp[603611](40516 call _cond_test call_tmp[603606]))
    if call_tmp[603611]
    {
      unknown call_tmp[603616] "expr temp" "maybe param" "maybe type" "temp"
      (603619 'move' call_tmp[603616](40503 call _to_unmanaged oldPtr[40483]))
      (505268 'move' ret[505263](505267 'deref' call_tmp[603616]))
      gotoReturn _end_release[505261] _end_release[505261]
      (474178 'end of statement' oldPtr[40483])
    }
    {
      unknown call_tmp[603621] "expr temp" "maybe param" "maybe type" "temp"
      (603624 'move' call_tmp[603621](40509 call postfix! oldPtr[40483]))
      unknown call_tmp[603626] "expr temp" "maybe param" "maybe type" "temp"
      (603629 'move' call_tmp[603626](40512 call _to_unmanaged call_tmp[603621]))
      (505273 'move' ret[505263](505272 'deref' call_tmp[603626]))
      gotoReturn _end_release[505261] _end_release[505261]
      (474180 'end of statement' oldPtr[40483])
    }
    label _end_release[505261]
    (505265 return ret[505263])
  }
  function _owned[30](?).borrow[40524](arg _mt[40655]:_MT[238], arg this[40653]:_owned[30](?)) : _unknown[51] "nil from this" "method" "primary method"
  {
    unknown ret[505279] "RVV" "temp"
    unknown call_tmp[603633] "expr temp" "maybe param" "maybe type" "temp"
    (603636 'move' call_tmp[603633](370603 call chpl_t _mt[243] this[40653]))
    unknown call_tmp[603638] "expr temp" "maybe param" "maybe type" "temp"
    (603641 'move' call_tmp[603638](40529 call _to_nilable call_tmp[603633]))
    unknown call_tmp[603645] "expr temp" "maybe param" "maybe type" "temp"
    (603648 'move' call_tmp[603645](370608 call chpl_t _mt[243] this[40653]))
    unknown call_tmp[603650] "expr temp" "maybe param" "maybe type" "temp"
    (603653 'move' call_tmp[603650](40531 call == call_tmp[603638] call_tmp[603645]))
    unknown call_tmp[603655] "expr temp" "maybe param" "maybe type" "temp"
    (603658 'move' call_tmp[603655](40543 call _cond_test call_tmp[603650]))
    if call_tmp[603655]
    {
      unknown call_tmp[603662] "expr temp" "maybe param" "maybe type" "temp"
      (603665 'move' call_tmp[603662](370613 call chpl_p _mt[243] this[40653]))
      (505284 'move' ret[505279](505283 'deref' call_tmp[603662]))
      gotoReturn _end_borrow[505277] _end_borrow[505277]
    }
    {
      unknown call_tmp[603669] "expr temp" "maybe param" "maybe type" "temp"
      (603672 'move' call_tmp[603669](370618 call chpl_p _mt[243] this[40653]))
      unknown call_tmp[603674] "expr temp" "maybe param" "maybe type" "temp"
      (603677 'move' call_tmp[603674](40538 call postfix! call_tmp[603669]))
      (505289 'move' ret[505279](505288 'deref' call_tmp[603674]))
      gotoReturn _end_borrow[505277] _end_borrow[505277]
    }
    label _end_borrow[505277]
    (505281 return ret[505279])
  }
  function _owned[30](?).borrow[40552](arg _mt[40659]:_MT[238], arg this[40657]:_owned[30](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[505295] "RVV" "temp" "type variable"
    unknown call_tmp[603681] "expr temp" "maybe param" "maybe type" "temp"
    (603684 'move' call_tmp[603681](370623 call chpl_t _mt[243] this[40657]))
    unknown call_tmp[603686] "expr temp" "maybe param" "maybe type" "temp"
    (603689 'move' call_tmp[603686](40557 call _to_nilable call_tmp[603681]))
    unknown call_tmp[603693] "expr temp" "maybe param" "maybe type" "temp"
    (603696 'move' call_tmp[603693](370628 call chpl_t _mt[243] this[40657]))
    unknown call_tmp[603698] "expr temp" "maybe param" "maybe type" "temp"
    (603701 'move' call_tmp[603698](40559 call == call_tmp[603686] call_tmp[603693]))
    unknown call_tmp[603703] "expr temp" "maybe param" "maybe type" "temp"
    (603706 'move' call_tmp[603703](40572 call _cond_test call_tmp[603698]))
    if call_tmp[603703]
    {
      unknown call_tmp[603710] "expr temp" "maybe param" "maybe type" "temp"
      (603713 'move' call_tmp[603710](370633 call chpl_t _mt[243] this[40657]))
      (505300 'move' ret[505295](505299 'deref' call_tmp[603710]))
      gotoReturn _end_borrow[505293] _end_borrow[505293]
    }
    {
      unknown call_tmp[603717] "expr temp" "maybe param" "maybe type" "temp"
      (603720 'move' call_tmp[603717](370638 call chpl_t _mt[243] this[40657]))
      unknown call_tmp[603722] "expr temp" "maybe param" "maybe type" "temp"
      (603725 'move' call_tmp[603722](40568 call _to_nonnil call_tmp[603717]))
      (505305 'move' ret[505295](505304 'deref' call_tmp[603722]))
      gotoReturn _end_borrow[505293] _end_borrow[505293]
    }
    label _end_borrow[505293]
    (505297 return ret[505295])
  }
  function _owned[30](?).chpl_t[758257](arg _mt[758259]:_MT[238], arg this[758261]:_owned[30](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[758280] "RVV" "temp" "type variable"
    unknown call_tmp[758294] "expr temp" "maybe param" "maybe type" "temp"
    (758297 'move' call_tmp[758294](758266 'is bound' this[758261] c"chpl_t"))
    if call_tmp[758294]
    {
      unknown call_tmp[758299] "expr temp" "maybe param" "maybe type" "temp"
      (758302 'move' call_tmp[758299](758265 '.v' this[758261] c"chpl_t"))
      (758285 'move' ret[758280](758284 'deref' call_tmp[758299]))
      gotoReturn _end_chpl_t[758278] _end_chpl_t[758278]
    }
    {
      (758290 'move' ret[758280](758289 'deref' _uninstantiated[258]))
      gotoReturn _end_chpl_t[758278] _end_chpl_t[758278]
    }
    label _end_chpl_t[758278]
    (758282 return ret[758280])
  }
  function _owned[30](?).chpl_t[758304](arg _mt[758306]:_MT[238], arg this[758308]:_owned[30](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[758327] "RVV" "temp" "type variable"
    unknown call_tmp[758341] "expr temp" "maybe param" "maybe type" "temp"
    (758344 'move' call_tmp[758341](758313 'is bound' this[758308] c"chpl_t"))
    if call_tmp[758341]
    {
      unknown call_tmp[758346] "expr temp" "maybe param" "maybe type" "temp"
      (758349 'move' call_tmp[758346](758312 '.v' this[758308] c"chpl_t"))
      (758332 'move' ret[758327](758331 'deref' call_tmp[758346]))
      gotoReturn _end_chpl_t[758325] _end_chpl_t[758325]
    }
    {
      (758337 'move' ret[758327](758336 'deref' _uninstantiated[258]))
      gotoReturn _end_chpl_t[758325] _end_chpl_t[758325]
    }
    label _end_chpl_t[758325]
    (758329 return ret[758327])
  }
  function _owned[30](?).chpl_p[758351](arg _mt[758353]:_MT[238], ref arg this[758355]:_owned[30](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[758365] "RVV" "temp"
    unknown call_tmp[758372] "expr temp" "maybe param" "maybe type" "temp"
    (758375 'move' call_tmp[758372](758359 '.' this[758355] c"chpl_p"))
    (758370 'move' ret[758365](758369 'addr of' call_tmp[758372]))
    (758367 return ret[758365])
  }
  function _owned[30](?).writeThis[758377](arg _mt[758381]:_MT[238], arg this[758379]:_owned[30](?), arg f[758380]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (758392 call(758388 call (partial) readWriteThis _mt[243] this[758379]) f[758380])
    (758395 return _void[55])
  }
  function _owned[30](?).readThis[758399](arg _mt[758403]:_MT[238], arg this[758401]:_owned[30](?), arg f[758402]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (758411 call(758407 call (partial) readWriteThis _mt[243] this[758401]) f[758402])
    (758415 return _void[55])
  }
  function chpl_fields_are_comparable[758431](arg _arg1[758433]:_owned[30](?), arg _arg2[758434]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758452]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758459] "expr temp" "maybe param" "maybe type" "temp"
    (758462 'move' call_tmp[758459](758437 call chpl_p _mt[243] _arg1[758433]))
    unknown call_tmp[758464] "expr temp" "maybe param" "maybe type" "temp"
    (758467 'move' call_tmp[758464](758441 call chpl_p _mt[243] _arg2[758434]))
    unknown call_tmp[758469] "expr temp" "maybe param" "maybe type" "temp"
    (758472 'move' call_tmp[758469](758445 'call resolves' c"==" call_tmp[758459] call_tmp[758464]))
    (758457 'move' ret[758452](758456 'deref' call_tmp[758469]))
    (758454 return ret[758452])
  }
  function ==[758419](arg _arg1[758421]:_owned[30](?), arg _arg2[758422]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758501]:bool[10] "RVV" "temp"
    unknown call_tmp[758513] "expr temp" "maybe param" "maybe type" "temp"
    (758516 'move' call_tmp[758513](758480 call chpl_p _mt[243] _arg1[758421]))
    unknown call_tmp[758518] "expr temp" "maybe param" "maybe type" "temp"
    (758521 'move' call_tmp[758518](758484 call chpl_p _mt[243] _arg2[758422]))
    unknown call_tmp[758523] "expr temp" "maybe param" "maybe type" "temp"
    (758526 'move' call_tmp[758523](758488 call != call_tmp[758513] call_tmp[758518]))
    if call_tmp[758523]
    {
      (758506 'move' ret[758501](758505 'deref' 0))
      gotoReturn _end_==[758499] _end_==[758499]
    }
    (758511 'move' ret[758501](758510 'deref' 1))
    label _end_==[758499]
    (758503 return ret[758501])
  }
  where {
    unknown call_tmp[758528] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758531 'move' call_tmp[758528](758425 'typeof' _arg1[758421]))
    unknown call_tmp[758533] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758536 'move' call_tmp[758533](758427 'typeof' _arg2[758422]))
    unknown call_tmp[758538] "expr temp" "maybe param" "maybe type" "temp"
    (758541 'move' call_tmp[758538](758429 call == call_tmp[758528] call_tmp[758533]))
    unknown call_tmp[758543] "expr temp" "maybe param" "maybe type" "temp"
    (758546 'move' call_tmp[758543](758474 call chpl_fields_are_comparable[758431] _arg1[758421] _arg2[758422]))
    (758478 '&' call_tmp[758538] call_tmp[758543])
  }
  function chpl_fields_are_comparable[758560](arg _arg1[758562]:_owned[30](?), arg _arg2[758563]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758581]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758588] "expr temp" "maybe param" "maybe type" "temp"
    (758591 'move' call_tmp[758588](758566 call chpl_p _mt[243] _arg1[758562]))
    unknown call_tmp[758593] "expr temp" "maybe param" "maybe type" "temp"
    (758596 'move' call_tmp[758593](758570 call chpl_p _mt[243] _arg2[758563]))
    unknown call_tmp[758598] "expr temp" "maybe param" "maybe type" "temp"
    (758601 'move' call_tmp[758598](758574 'call resolves' c"!=" call_tmp[758588] call_tmp[758593]))
    (758586 'move' ret[758581](758585 'deref' call_tmp[758598]))
    (758583 return ret[758581])
  }
  function !=[758548](arg _arg1[758550]:_owned[30](?), arg _arg2[758551]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758630]:bool[10] "RVV" "temp"
    unknown call_tmp[758642] "expr temp" "maybe param" "maybe type" "temp"
    (758645 'move' call_tmp[758642](758609 call chpl_p _mt[243] _arg1[758550]))
    unknown call_tmp[758647] "expr temp" "maybe param" "maybe type" "temp"
    (758650 'move' call_tmp[758647](758613 call chpl_p _mt[243] _arg2[758551]))
    unknown call_tmp[758652] "expr temp" "maybe param" "maybe type" "temp"
    (758655 'move' call_tmp[758652](758617 call != call_tmp[758642] call_tmp[758647]))
    if call_tmp[758652]
    {
      (758635 'move' ret[758630](758634 'deref' 1))
      gotoReturn _end_!=[758628] _end_!=[758628]
    }
    (758640 'move' ret[758630](758639 'deref' 0))
    label _end_!=[758628]
    (758632 return ret[758630])
  }
  where {
    unknown call_tmp[758657] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758660 'move' call_tmp[758657](758554 'typeof' _arg1[758550]))
    unknown call_tmp[758662] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758665 'move' call_tmp[758662](758556 'typeof' _arg2[758551]))
    unknown call_tmp[758667] "expr temp" "maybe param" "maybe type" "temp"
    (758670 'move' call_tmp[758667](758558 call == call_tmp[758657] call_tmp[758662]))
    unknown call_tmp[758672] "expr temp" "maybe param" "maybe type" "temp"
    (758675 'move' call_tmp[758672](758603 call chpl_fields_are_comparable[758560] _arg1[758550] _arg2[758551]))
    (758607 '&' call_tmp[758667] call_tmp[758672])
  }
  function chpl_fields_are_comparable[758689](arg _arg1[758691]:_owned[30](?), arg _arg2[758692]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758710]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758717] "expr temp" "maybe param" "maybe type" "temp"
    (758720 'move' call_tmp[758717](758695 call chpl_p _mt[243] _arg1[758691]))
    unknown call_tmp[758722] "expr temp" "maybe param" "maybe type" "temp"
    (758725 'move' call_tmp[758722](758699 call chpl_p _mt[243] _arg2[758692]))
    unknown call_tmp[758727] "expr temp" "maybe param" "maybe type" "temp"
    (758730 'move' call_tmp[758727](758703 'call resolves' c"<" call_tmp[758717] call_tmp[758722]))
    (758715 'move' ret[758710](758714 'deref' call_tmp[758727]))
    (758712 return ret[758710])
  }
  function <[758677](arg _arg1[758679]:_owned[30](?), arg _arg2[758680]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758774]:bool[10] "RVV" "temp"
    unknown call_tmp[758791] "expr temp" "maybe param" "maybe type" "temp"
    (758794 'move' call_tmp[758791](758738 call chpl_p _mt[243] _arg1[758679]))
    unknown call_tmp[758796] "expr temp" "maybe param" "maybe type" "temp"
    (758799 'move' call_tmp[758796](758742 call chpl_p _mt[243] _arg2[758680]))
    unknown call_tmp[758801] "expr temp" "maybe param" "maybe type" "temp"
    (758804 'move' call_tmp[758801](758746 call < call_tmp[758791] call_tmp[758796]))
    if call_tmp[758801]
    {
      (758779 'move' ret[758774](758778 'deref' 1))
      gotoReturn _end_<[758772] _end_<[758772]
    }
    unknown call_tmp[758806] "expr temp" "maybe param" "maybe type" "temp"
    (758809 'move' call_tmp[758806](758752 call chpl_p _mt[243] _arg1[758679]))
    unknown call_tmp[758811] "expr temp" "maybe param" "maybe type" "temp"
    (758814 'move' call_tmp[758811](758756 call chpl_p _mt[243] _arg2[758680]))
    unknown call_tmp[758816] "expr temp" "maybe param" "maybe type" "temp"
    (758819 'move' call_tmp[758816](758760 call > call_tmp[758806] call_tmp[758811]))
    if call_tmp[758816]
    {
      (758784 'move' ret[758774](758783 'deref' 0))
      gotoReturn _end_<[758772] _end_<[758772]
    }
    (758789 'move' ret[758774](758788 'deref' 0))
    label _end_<[758772]
    (758776 return ret[758774])
  }
  where {
    unknown call_tmp[758821] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758824 'move' call_tmp[758821](758683 'typeof' _arg1[758679]))
    unknown call_tmp[758826] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758829 'move' call_tmp[758826](758685 'typeof' _arg2[758680]))
    unknown call_tmp[758831] "expr temp" "maybe param" "maybe type" "temp"
    (758834 'move' call_tmp[758831](758687 call == call_tmp[758821] call_tmp[758826]))
    unknown call_tmp[758836] "expr temp" "maybe param" "maybe type" "temp"
    (758839 'move' call_tmp[758836](758732 call chpl_fields_are_comparable[758689] _arg1[758679] _arg2[758680]))
    (758736 '&' call_tmp[758831] call_tmp[758836])
  }
  function chpl_fields_are_comparable[758853](arg _arg1[758855]:_owned[30](?), arg _arg2[758856]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758874]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758881] "expr temp" "maybe param" "maybe type" "temp"
    (758884 'move' call_tmp[758881](758859 call chpl_p _mt[243] _arg1[758855]))
    unknown call_tmp[758886] "expr temp" "maybe param" "maybe type" "temp"
    (758889 'move' call_tmp[758886](758863 call chpl_p _mt[243] _arg2[758856]))
    unknown call_tmp[758891] "expr temp" "maybe param" "maybe type" "temp"
    (758894 'move' call_tmp[758891](758867 'call resolves' c"<=" call_tmp[758881] call_tmp[758886]))
    (758879 'move' ret[758874](758878 'deref' call_tmp[758891]))
    (758876 return ret[758874])
  }
  function <=[758841](arg _arg1[758843]:_owned[30](?), arg _arg2[758844]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758938]:bool[10] "RVV" "temp"
    unknown call_tmp[758955] "expr temp" "maybe param" "maybe type" "temp"
    (758958 'move' call_tmp[758955](758902 call chpl_p _mt[243] _arg1[758843]))
    unknown call_tmp[758960] "expr temp" "maybe param" "maybe type" "temp"
    (758963 'move' call_tmp[758960](758906 call chpl_p _mt[243] _arg2[758844]))
    unknown call_tmp[758965] "expr temp" "maybe param" "maybe type" "temp"
    (758968 'move' call_tmp[758965](758910 call < call_tmp[758955] call_tmp[758960]))
    if call_tmp[758965]
    {
      (758943 'move' ret[758938](758942 'deref' 1))
      gotoReturn _end_<=[758936] _end_<=[758936]
    }
    unknown call_tmp[758970] "expr temp" "maybe param" "maybe type" "temp"
    (758973 'move' call_tmp[758970](758916 call chpl_p _mt[243] _arg1[758843]))
    unknown call_tmp[758975] "expr temp" "maybe param" "maybe type" "temp"
    (758978 'move' call_tmp[758975](758920 call chpl_p _mt[243] _arg2[758844]))
    unknown call_tmp[758980] "expr temp" "maybe param" "maybe type" "temp"
    (758983 'move' call_tmp[758980](758924 call > call_tmp[758970] call_tmp[758975]))
    if call_tmp[758980]
    {
      (758948 'move' ret[758938](758947 'deref' 0))
      gotoReturn _end_<=[758936] _end_<=[758936]
    }
    (758953 'move' ret[758938](758952 'deref' 1))
    label _end_<=[758936]
    (758940 return ret[758938])
  }
  where {
    unknown call_tmp[758985] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758988 'move' call_tmp[758985](758847 'typeof' _arg1[758843]))
    unknown call_tmp[758990] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758993 'move' call_tmp[758990](758849 'typeof' _arg2[758844]))
    unknown call_tmp[758995] "expr temp" "maybe param" "maybe type" "temp"
    (758998 'move' call_tmp[758995](758851 call == call_tmp[758985] call_tmp[758990]))
    unknown call_tmp[759000] "expr temp" "maybe param" "maybe type" "temp"
    (759003 'move' call_tmp[759000](758896 call chpl_fields_are_comparable[758853] _arg1[758843] _arg2[758844]))
    (758900 '&' call_tmp[758995] call_tmp[759000])
  }
  function chpl_fields_are_comparable[759017](arg _arg1[759019]:_owned[30](?), arg _arg2[759020]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[759038]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[759045] "expr temp" "maybe param" "maybe type" "temp"
    (759048 'move' call_tmp[759045](759023 call chpl_p _mt[243] _arg1[759019]))
    unknown call_tmp[759050] "expr temp" "maybe param" "maybe type" "temp"
    (759053 'move' call_tmp[759050](759027 call chpl_p _mt[243] _arg2[759020]))
    unknown call_tmp[759055] "expr temp" "maybe param" "maybe type" "temp"
    (759058 'move' call_tmp[759055](759031 'call resolves' c">" call_tmp[759045] call_tmp[759050]))
    (759043 'move' ret[759038](759042 'deref' call_tmp[759055]))
    (759040 return ret[759038])
  }
  function >[759005](arg _arg1[759007]:_owned[30](?), arg _arg2[759008]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[759102]:bool[10] "RVV" "temp"
    unknown call_tmp[759119] "expr temp" "maybe param" "maybe type" "temp"
    (759122 'move' call_tmp[759119](759066 call chpl_p _mt[243] _arg1[759007]))
    unknown call_tmp[759124] "expr temp" "maybe param" "maybe type" "temp"
    (759127 'move' call_tmp[759124](759070 call chpl_p _mt[243] _arg2[759008]))
    unknown call_tmp[759129] "expr temp" "maybe param" "maybe type" "temp"
    (759132 'move' call_tmp[759129](759074 call > call_tmp[759119] call_tmp[759124]))
    if call_tmp[759129]
    {
      (759107 'move' ret[759102](759106 'deref' 1))
      gotoReturn _end_>[759100] _end_>[759100]
    }
    unknown call_tmp[759134] "expr temp" "maybe param" "maybe type" "temp"
    (759137 'move' call_tmp[759134](759080 call chpl_p _mt[243] _arg1[759007]))
    unknown call_tmp[759139] "expr temp" "maybe param" "maybe type" "temp"
    (759142 'move' call_tmp[759139](759084 call chpl_p _mt[243] _arg2[759008]))
    unknown call_tmp[759144] "expr temp" "maybe param" "maybe type" "temp"
    (759147 'move' call_tmp[759144](759088 call < call_tmp[759134] call_tmp[759139]))
    if call_tmp[759144]
    {
      (759112 'move' ret[759102](759111 'deref' 0))
      gotoReturn _end_>[759100] _end_>[759100]
    }
    (759117 'move' ret[759102](759116 'deref' 0))
    label _end_>[759100]
    (759104 return ret[759102])
  }
  where {
    unknown call_tmp[759149] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759152 'move' call_tmp[759149](759011 'typeof' _arg1[759007]))
    unknown call_tmp[759154] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759157 'move' call_tmp[759154](759013 'typeof' _arg2[759008]))
    unknown call_tmp[759159] "expr temp" "maybe param" "maybe type" "temp"
    (759162 'move' call_tmp[759159](759015 call == call_tmp[759149] call_tmp[759154]))
    unknown call_tmp[759164] "expr temp" "maybe param" "maybe type" "temp"
    (759167 'move' call_tmp[759164](759060 call chpl_fields_are_comparable[759017] _arg1[759007] _arg2[759008]))
    (759064 '&' call_tmp[759159] call_tmp[759164])
  }
  function chpl_fields_are_comparable[759181](arg _arg1[759183]:_owned[30](?), arg _arg2[759184]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[759202]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[759209] "expr temp" "maybe param" "maybe type" "temp"
    (759212 'move' call_tmp[759209](759187 call chpl_p _mt[243] _arg1[759183]))
    unknown call_tmp[759214] "expr temp" "maybe param" "maybe type" "temp"
    (759217 'move' call_tmp[759214](759191 call chpl_p _mt[243] _arg2[759184]))
    unknown call_tmp[759219] "expr temp" "maybe param" "maybe type" "temp"
    (759222 'move' call_tmp[759219](759195 'call resolves' c">=" call_tmp[759209] call_tmp[759214]))
    (759207 'move' ret[759202](759206 'deref' call_tmp[759219]))
    (759204 return ret[759202])
  }
  function >=[759169](arg _arg1[759171]:_owned[30](?), arg _arg2[759172]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[759266]:bool[10] "RVV" "temp"
    unknown call_tmp[759283] "expr temp" "maybe param" "maybe type" "temp"
    (759286 'move' call_tmp[759283](759230 call chpl_p _mt[243] _arg1[759171]))
    unknown call_tmp[759288] "expr temp" "maybe param" "maybe type" "temp"
    (759291 'move' call_tmp[759288](759234 call chpl_p _mt[243] _arg2[759172]))
    unknown call_tmp[759293] "expr temp" "maybe param" "maybe type" "temp"
    (759296 'move' call_tmp[759293](759238 call > call_tmp[759283] call_tmp[759288]))
    if call_tmp[759293]
    {
      (759271 'move' ret[759266](759270 'deref' 1))
      gotoReturn _end_>=[759264] _end_>=[759264]
    }
    unknown call_tmp[759298] "expr temp" "maybe param" "maybe type" "temp"
    (759301 'move' call_tmp[759298](759244 call chpl_p _mt[243] _arg1[759171]))
    unknown call_tmp[759303] "expr temp" "maybe param" "maybe type" "temp"
    (759306 'move' call_tmp[759303](759248 call chpl_p _mt[243] _arg2[759172]))
    unknown call_tmp[759308] "expr temp" "maybe param" "maybe type" "temp"
    (759311 'move' call_tmp[759308](759252 call < call_tmp[759298] call_tmp[759303]))
    if call_tmp[759308]
    {
      (759276 'move' ret[759266](759275 'deref' 0))
      gotoReturn _end_>=[759264] _end_>=[759264]
    }
    (759281 'move' ret[759266](759280 'deref' 1))
    label _end_>=[759264]
    (759268 return ret[759266])
  }
  where {
    unknown call_tmp[759313] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759316 'move' call_tmp[759313](759175 'typeof' _arg1[759171]))
    unknown call_tmp[759318] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759321 'move' call_tmp[759318](759177 'typeof' _arg2[759172]))
    unknown call_tmp[759323] "expr temp" "maybe param" "maybe type" "temp"
    (759326 'move' call_tmp[759323](759179 call == call_tmp[759313] call_tmp[759318]))
    unknown call_tmp[759328] "expr temp" "maybe param" "maybe type" "temp"
    (759331 'move' call_tmp[759328](759224 call chpl_fields_are_comparable[759181] _arg1[759171] _arg2[759172]))
    (759228 '&' call_tmp[759323] call_tmp[759328])
  }
  function chpl__defaultHash[759333](arg r[759335]:_owned[30](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[759357] "RVV" "temp"
    unknown call_tmp[759364] "expr temp" "maybe param" "maybe type" "temp"
    (759367 'move' call_tmp[759364](759343 call chpl_p _mt[243] r[759335]))
    unknown call_tmp[759369] "expr temp" "maybe param" "maybe type" "temp"
    (759372 'move' call_tmp[759369](759347 call chpl__defaultHash call_tmp[759364]))
    unknown call_tmp[759374] "expr temp" "maybe param" "maybe type" "temp"
    (759377 'move' call_tmp[759374](759337 call chpl_t _mt[243] r[759335]))
    unknown call_tmp[759379] "expr temp" "maybe param" "maybe type" "temp"
    (759382 'move' call_tmp[759379](759341 call chpl__defaultHash call_tmp[759374]))
    unknown call_tmp[759384] "expr temp" "maybe param" "maybe type" "temp"
    (759387 'move' call_tmp[759384](759349 call chpl__defaultHashCombine call_tmp[759369] call_tmp[759379] 2))
    (759362 'move' ret[759357](759361 'deref' call_tmp[759384]))
    (759359 return ret[759357])
  }
  type _owned[30](?) unknown chpl_t[39592] "no doc" "type variable" unknown chpl_p[39599] "no doc" "owned"(39598 'to nilable class' chpl_t[39592]) forwarding ( )
  type owned[415472](?)
  type owned?[415468](?)
  function =[40668](ref arg lhs[40665]:_owned[30](?), ref arg rhs[40671]:_owned[30](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown tmp[418301] "maybe param" "temp"
    unknown call_tmp[603729] "expr temp" "maybe param" "maybe type" "temp"
    (603732 'move' call_tmp[603729](40691 call chpl_p _mt[243] lhs[40665]))
    (418312 'move' tmp[418301](40695 call == call_tmp[603729] nil[44]))
    unknown call_tmp[603734] "expr temp" "maybe param" "maybe type" "temp"
    (603737 'move' call_tmp[603734](418314 call _cond_invalid tmp[418301]))
    if call_tmp[603734]
    {
      (418317 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554096] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554097] "maybe param" "temp"
    unknown call_tmp[603739] "expr temp" "maybe param" "maybe type" "temp"
    (603742 'move' call_tmp[603739](418302 call isTrue tmp[418301]))
    (554102 'move' tmp[554097](554100 call _cond_test call_tmp[603739]))
    if tmp[554097]
    {
      unknown tmp[554104] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603746] "expr temp" "maybe param" "maybe type" "temp"
      (603749 'move' call_tmp[603746](40698 call chpl_p _mt[243] rhs[40671]))
      unknown call_tmp[603751] "expr temp" "maybe param" "maybe type" "temp"
      (603754 'move' call_tmp[603751](40702 call == call_tmp[603746] nil[44]))
      (554106 'move' tmp[554104](418305 call isTrue call_tmp[603751]))
      (554111 'move' tmp[554096](554108 '_paramFoldLogical' tmp[554097] tmp[554104]))
    }
    {
      (554116 'move' tmp[554096](554113 '_paramFoldLogical' tmp[554097] 0))
    }
    unknown call_tmp[603756] "expr temp" "maybe param" "maybe type" "temp"
    (603759 'move' call_tmp[603756](40708 call _cond_test tmp[554096]))
    if call_tmp[603756]
    {
      gotoReturn _end_=[505309] _end_=[505309]
    }
    unknown tmp[418322] "maybe param" "temp"
    (418333 'move' tmp[418322] 1)
    unknown call_tmp[603761] "expr temp" "maybe param" "maybe type" "temp"
    (603764 'move' call_tmp[603761](418335 call _cond_invalid tmp[418322]))
    if call_tmp[603761]
    {
      (418338 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[554123] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554124] "maybe param" "temp"
    unknown call_tmp[603766] "expr temp" "maybe param" "maybe type" "temp"
    (603769 'move' call_tmp[603766](418323 call isTrue tmp[418322]))
    (554129 'move' tmp[554124](554127 call _cond_test call_tmp[603766]))
    if tmp[554124]
    {
      (554134 'move' tmp[554123](554131 '_paramFoldLogical' tmp[554124] 1))
    }
    {
      unknown tmp[554136] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (554138 'move' tmp[554136](418327 call isTrue enablePostfixBangChecks[324]))
      (554143 'move' tmp[554123](554140 '_paramFoldLogical' tmp[554124] tmp[554136]))
    }
    unknown call_tmp[603771] "expr temp" "maybe param" "maybe type" "temp"
    (603774 'move' call_tmp[603771](40766 call _cond_test tmp[554123]))
    if call_tmp[603771]
    {
      unknown call_tmp[603778] "expr temp" "maybe param" "maybe type" "temp"
      (603781 'move' call_tmp[603778](40719 call chpl_t _mt[243] lhs[40665]))
      unknown call_tmp[603783] "expr temp" "maybe param" "maybe type" "temp"
      (603786 'move' call_tmp[603783](40723 call isNonNilableClass call_tmp[603778]))
      unknown call_tmp[603788] "expr temp" "maybe param" "maybe type" "temp"
      (603791 'move' call_tmp[603788](40761 call _cond_test call_tmp[603783]))
      if call_tmp[603788]
      {
        unknown call_tmp[603795] "expr temp" "maybe param" "maybe type" "temp"
        (603798 'move' call_tmp[603795](40725 call chpl_p _mt[243] rhs[40671]))
        unknown call_tmp[603800] "expr temp" "maybe param" "maybe type" "temp"
        (603803 'move' call_tmp[603800](40729 call == call_tmp[603795] nil[44]))
        unknown call_tmp[603805] "expr temp" "maybe param" "maybe type" "temp"
        (603808 'move' call_tmp[603805](40756 call _cond_test call_tmp[603800]))
        if call_tmp[603805]
        {
          (40753 call nilCheckHalt module=[255] HaltWrappers[210085] "assigning nil to non-nilable owned")
          (357007 'referenced modules list' HaltWrappers[210085])
        }
      }
    }
    unknown call_tmp[603814] "expr temp" "maybe param" "maybe type" "temp"
    (603817 'move' call_tmp[603814](40779 call(40775 call (partial) release _mt[243] rhs[40671])))
    (40781 call(40771 call (partial) retain _mt[243] lhs[40665]) call_tmp[603814])
    label _end_=[505309]
    (505311 return _void[55])
    (355135 'used modules list'(40687 'import' HaltWrappers[210085]))
  }
  where {
    unknown tmp[418280] "maybe param" "temp"
    (418291 'move' tmp[418280](40677 call isNonNilableClass lhs[40665]))
    unknown call_tmp[603819] "expr temp" "maybe param" "maybe type" "temp"
    (603822 'move' call_tmp[603819](418293 call _cond_invalid tmp[418280]))
    if call_tmp[603819]
    {
      (418296 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554150] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554151] "maybe param" "temp"
    unknown call_tmp[603824] "expr temp" "maybe param" "maybe type" "temp"
    (603827 'move' call_tmp[603824](418281 call isTrue tmp[418280]))
    (554156 'move' tmp[554151](554154 call _cond_test call_tmp[603824]))
    if tmp[554151]
    {
      unknown tmp[554158] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603829] "expr temp" "maybe param" "maybe type" "temp"
      (603832 'move' call_tmp[603829](40681 call isNilableClass rhs[40671]))
      (554160 'move' tmp[554158](418284 call isTrue call_tmp[603829]))
      (554165 'move' tmp[554150](554162 '_paramFoldLogical' tmp[554151] tmp[554158]))
    }
    {
      (554170 'move' tmp[554150](554167 '_paramFoldLogical' tmp[554151] 0))
    }
    (40684 call ! tmp[554150])
  }
  function =[40792](ref arg lhs[40789]:_owned[30](?), arg rhs[40795]:_nilType[42]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    (40811 call(40807 call (partial) clear _mt[243] lhs[40789]))
    (505315 return _void[55])
  }
  where {
    unknown call_tmp[603836] "expr temp" "maybe param" "maybe type" "temp"
    (603839 'move' call_tmp[603836](40801 call isNonNilableClass lhs[40789]))
    (40802 call ! call_tmp[603836])
  }
  function <=>[40823](ref arg lhs[40820]:_owned[30](?), ref arg rhs[40827]:_owned[30](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[603843] "expr temp" "maybe param" "maybe type" "temp"
    (603846 'move' call_tmp[603843](40831 call chpl_p _mt[243] lhs[40820]))
    unknown call_tmp[603850] "expr temp" "maybe param" "maybe type" "temp"
    (603853 'move' call_tmp[603850](40835 call chpl_p _mt[243] rhs[40827]))
    (40838 call <=> call_tmp[603843] call_tmp[603850])
    (505317 return _void[55])
  }
  function chpl__initCopy[40850](ref arg src[40847]:_owned[30](?)) : _unknown[51] "init copy fn" "no doc"
  {
    unknown ret[505321] "RVV" "temp"
    unknown call_tmp[603855] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603858 'move' call_tmp[603855](747922 'new' _owned[30](?) src[40847]))
    unknown ret[40857] "dead at end of block"
    (540671 'init var' ret[40857] call_tmp[603855])
    (40860 'end of statement')
    (505326 'move' ret[505321](505325 'deref' ret[40857]))
    gotoReturn _end_chpl__initCopy[505319] _end_chpl__initCopy[505319]
    (474193 'end of statement' ret[40857])
    label _end_chpl__initCopy[505319]
    (505323 return ret[505321])
  }
  function chpl__autoCopy[40873](ref arg src[40870]:_owned[30](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[505332] "RVV" "temp"
    unknown call_tmp[603860] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603863 'move' call_tmp[603860](747923 'new' _owned[30](?) src[40870]))
    unknown ret[40880] "dead at end of block" "insert auto destroy"
    (540673 'init var' ret[40880] call_tmp[603860])
    (40883 'end of statement')
    (505337 'move' ret[505332](505336 'deref' ret[40880]))
    gotoReturn _end_chpl__autoCopy[505330] _end_chpl__autoCopy[505330]
    (474195 'end of statement' ret[40880])
    label _end_chpl__autoCopy[505330]
    (505334 return ret[505332])
  }
  function chpl__autoDestroy[40896](ref arg x[40893]:_owned[30](?)) : _unknown[51] "auto destroy fn" "no doc" "no return value for void"
  {
    unknown call_tmp[603865] "expr temp" "maybe param" "maybe type" "temp"
    (603868 'move' call_tmp[603865](40903 'deref' x[40893]))
    (40904 'call destructor' call_tmp[603865])
    (505341 return _void[55])
  }
  function _owned[30](?).readWriteThis[40914](arg _mt[40919]:_MT[238], arg this[40916]:_owned[30](?) :
  _owned[30](?), arg f[40912]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    unknown call_tmp[603872] "expr temp" "maybe param" "maybe type" "temp"
    (603875 'move' call_tmp[603872](40923 call chpl_p _mt[243] this[40916]))
    (40926 call <~> f[40912] call_tmp[603872])
    (505343 return _void[55])
  }
  function _cast[40941](arg t[40938]:owned?[415468](?), in arg x[40946]:owned[415472](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505347] "RVV" "temp"
    unknown call_tmp[603879] "expr temp" "maybe param" "maybe type" "temp"
    (603882 'move' call_tmp[603879](40970 call chpl_t _mt[243] t[40938]))
    unknown call_tmp[603884] "expr temp" "maybe param" "maybe type" "temp"
    (603887 'move' call_tmp[603884](40974 call _to_unmanaged call_tmp[603879]))
    unknown call_tmp[603889] "expr temp" "maybe param" "maybe type" "temp"
    (603892 'move' call_tmp[603889](40976 call _to_nilable call_tmp[603884]))
    unknown call_tmp[603896] "expr temp" "maybe param" "maybe type" "temp"
    (603899 'move' call_tmp[603896](40964 call chpl_p _mt[243] x[40946]))
    unknown call_tmp[603901] "maybe param" "maybe type" "temp"
    (603904 'move' call_tmp[603901](40977 call _cast call_tmp[603889] call_tmp[603896]))
    unknown castPtr[40979] "dead at end of block" "insert auto destroy"
    (540675 'init var' castPtr[40979] call_tmp[603901])
    (40982 'end of statement')
    unknown call_tmp[603908] "expr temp" "maybe param" "maybe type" "temp"
    (603911 'move' call_tmp[603908](40985 call chpl_p _mt[243] x[40946]))
    (40989 call = call_tmp[603908] nil[44])
    (474199 'end of statement')
    unknown call_tmp[603913] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603916 'move' call_tmp[603913](747924 'new' _owned[30](?) castPtr[40979]))
    (505352 'move' ret[505347](505351 'deref' call_tmp[603913]))
    gotoReturn _end__cast[505345] _end__cast[505345]
    (474200 'end of statement' castPtr[40979])
    label _end__cast[505345]
    (505349 return ret[505347])
  }
  where {
    unknown call_tmp[603920] "expr temp" "maybe param" "maybe type" "temp"
    (603923 'move' call_tmp[603920](40957 call chpl_t _mt[243] t[40938]))
    unknown call_tmp[603925] "expr temp" "maybe param" "maybe type" "temp"
    (603928 'move' call_tmp[603925](40961 call _to_nonnil call_tmp[603920]))
    unknown call_tmp[603932] "expr temp" "maybe param" "maybe type" "temp"
    (603935 'move' call_tmp[603932](40951 call chpl_t _mt[243] x[40946]))
    (354299 'is_subtype' call_tmp[603925] call_tmp[603932])
  }
  function _cast[41011](arg t[41008]:owned?[415468](?), in arg x[41017]:owned?[415468](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505358] "RVV" "temp"
    unknown call_tmp[603939] "expr temp" "maybe param" "maybe type" "temp"
    (603942 'move' call_tmp[603939](41038 call chpl_t _mt[243] t[41008]))
    unknown call_tmp[603944] "expr temp" "maybe param" "maybe type" "temp"
    (603947 'move' call_tmp[603944](41042 call _to_unmanaged call_tmp[603939]))
    unknown call_tmp[603949] "expr temp" "maybe param" "maybe type" "temp"
    (603952 'move' call_tmp[603949](41044 call _to_nilable call_tmp[603944]))
    unknown call_tmp[603956] "expr temp" "maybe param" "maybe type" "temp"
    (603959 'move' call_tmp[603956](41032 call chpl_p _mt[243] x[41017]))
    unknown call_tmp[603961] "maybe param" "maybe type" "temp"
    (603964 'move' call_tmp[603961](41045 call _cast call_tmp[603949] call_tmp[603956]))
    unknown castPtr[41047] "dead at end of block" "insert auto destroy"
    (540677 'init var' castPtr[41047] call_tmp[603961])
    (41050 'end of statement')
    unknown call_tmp[603968] "expr temp" "maybe param" "maybe type" "temp"
    (603971 'move' call_tmp[603968](41053 call chpl_p _mt[243] x[41017]))
    (41057 call = call_tmp[603968] nil[44])
    (474202 'end of statement')
    unknown call_tmp[603973] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603976 'move' call_tmp[603973](747925 'new' _owned[30](?) castPtr[41047]))
    (505363 'move' ret[505358](505362 'deref' call_tmp[603973]))
    gotoReturn _end__cast[505356] _end__cast[505356]
    (474203 'end of statement' castPtr[41047])
    label _end__cast[505356]
    (505360 return ret[505358])
  }
  where {
    unknown call_tmp[603980] "expr temp" "maybe param" "maybe type" "temp"
    (603983 'move' call_tmp[603980](41027 call chpl_t _mt[243] t[41008]))
    unknown call_tmp[603987] "expr temp" "maybe param" "maybe type" "temp"
    (603990 'move' call_tmp[603987](41022 call chpl_t _mt[243] x[41017]))
    (354300 'is_subtype' call_tmp[603980] call_tmp[603987])
  }
  function _cast[41078](arg t[41075]:owned[415472](?), in arg x[41083]:owned[415472](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505369] "RVV" "temp"
    unknown call_tmp[603994] "expr temp" "maybe param" "maybe type" "temp"
    (603997 'move' call_tmp[603994](41104 call chpl_t _mt[243] t[41075]))
    unknown call_tmp[603999] "expr temp" "maybe param" "maybe type" "temp"
    (604002 'move' call_tmp[603999](41108 call _to_unmanaged call_tmp[603994]))
    unknown call_tmp[604004] "expr temp" "maybe param" "maybe type" "temp"
    (604007 'move' call_tmp[604004](41110 call _to_nilable call_tmp[603999]))
    unknown call_tmp[604011] "expr temp" "maybe param" "maybe type" "temp"
    (604014 'move' call_tmp[604011](41098 call chpl_p _mt[243] x[41083]))
    unknown call_tmp[604016] "maybe param" "maybe type" "temp"
    (604019 'move' call_tmp[604016](41111 call _cast call_tmp[604004] call_tmp[604011]))
    unknown castPtr[41113] "dead at end of block" "insert auto destroy"
    (540679 'init var' castPtr[41113] call_tmp[604016])
    (41116 'end of statement')
    unknown call_tmp[604023] "expr temp" "maybe param" "maybe type" "temp"
    (604026 'move' call_tmp[604023](41119 call chpl_p _mt[243] x[41083]))
    (41123 call = call_tmp[604023] nil[44])
    (474205 'end of statement')
    unknown call_tmp[604028] "expr temp" "maybe param" "maybe type" "temp"
    (604031 'move' call_tmp[604028](41129 call postfix! castPtr[41113]))
    unknown call_tmp[604033] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604036 'move' call_tmp[604033](747926 'new' _owned[30](?) call_tmp[604028]))
    (505374 'move' ret[505369](505373 'deref' call_tmp[604033]))
    gotoReturn _end__cast[505367] _end__cast[505367]
    (474206 'end of statement' castPtr[41113])
    label _end__cast[505367]
    (505371 return ret[505369])
  }
  where {
    unknown call_tmp[604040] "expr temp" "maybe param" "maybe type" "temp"
    (604043 'move' call_tmp[604040](41093 call chpl_t _mt[243] t[41075]))
    unknown call_tmp[604047] "expr temp" "maybe param" "maybe type" "temp"
    (604050 'move' call_tmp[604047](41088 call chpl_t _mt[243] x[41083]))
    (354301 'is_subtype' call_tmp[604040] call_tmp[604047])
  }
  function _cast[41146](arg t[41143]:owned[415472](?), in arg x[41152]:owned?[415468](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505380] "RVV" "temp"
    unknown call_tmp[604054] "expr temp" "maybe param" "maybe type" "temp"
    (604057 'move' call_tmp[604054](41176 call chpl_t _mt[243] t[41143]))
    unknown call_tmp[604059] "expr temp" "maybe param" "maybe type" "temp"
    (604062 'move' call_tmp[604059](41180 call _to_unmanaged call_tmp[604054]))
    unknown call_tmp[604064] "expr temp" "maybe param" "maybe type" "temp"
    (604067 'move' call_tmp[604064](41182 call _to_nilable call_tmp[604059]))
    unknown call_tmp[604071] "expr temp" "maybe param" "maybe type" "temp"
    (604074 'move' call_tmp[604071](41170 call chpl_p _mt[243] x[41152]))
    unknown call_tmp[604076] "maybe param" "maybe type" "temp"
    (604079 'move' call_tmp[604076](41183 call _cast call_tmp[604064] call_tmp[604071]))
    unknown castPtr[41185] "dead at end of block" "insert auto destroy"
    (540681 'init var' castPtr[41185] call_tmp[604076])
    (41188 'end of statement')
    unknown call_tmp[604081] "expr temp" "maybe param" "maybe type" "temp"
    (604084 'move' call_tmp[604081](41192 call == castPtr[41185] nil[44]))
    unknown call_tmp[604086] "expr temp" "maybe param" "maybe type" "temp"
    (604089 'move' call_tmp[604086](41203 call _cond_test call_tmp[604081]))
    if call_tmp[604086]
    {
      unknown call_tmp[604091] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (604094 'move' call_tmp[604091](747927 'new' NilClassError[368396](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[604096] "expr temp" "maybe param" "maybe type" "temp"
      (604099 'move' call_tmp[604096](468145 call chpl_fix_thrown_error call_tmp[604091]))
      (41200 'throw' call_tmp[604096])
    }
    unknown call_tmp[604103] "expr temp" "maybe param" "maybe type" "temp"
    (604106 'move' call_tmp[604103](41208 call chpl_p _mt[243] x[41152]))
    (41212 call = call_tmp[604103] nil[44])
    (474209 'end of statement')
    unknown call_tmp[604108] "expr temp" "maybe param" "maybe type" "temp"
    (604111 'move' call_tmp[604108](41218 call postfix! castPtr[41185]))
    unknown call_tmp[604113] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604116 'move' call_tmp[604113](747928 'new' _owned[30](?) call_tmp[604108]))
    (505385 'move' ret[505380](505384 'deref' call_tmp[604113]))
    gotoReturn _end__cast[505378] _end__cast[505378]
    (474210 'end of statement' castPtr[41185])
    label _end__cast[505378]
    (505382 return ret[505380])
  }
  where {
    unknown call_tmp[604120] "expr temp" "maybe param" "maybe type" "temp"
    (604123 'move' call_tmp[604120](41165 call chpl_t _mt[243] t[41143]))
    unknown call_tmp[604127] "expr temp" "maybe param" "maybe type" "temp"
    (604130 'move' call_tmp[604127](41158 call chpl_t _mt[243] x[41152]))
    unknown call_tmp[604132] "expr temp" "maybe param" "maybe type" "temp"
    (604135 'move' call_tmp[604132](41162 call _to_nonnil call_tmp[604127]))
    (354302 'is_subtype' call_tmp[604120] call_tmp[604132])
  }
  function _cast[41235](arg t[41232]:owned[415472](?), ref arg x[41241]:owned?[415468](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505391] "RVV" "temp"
    unknown call_tmp[604139] "expr temp" "maybe param" "maybe type" "temp"
    (604142 'move' call_tmp[604139](41259 call chpl_p _mt[243] x[41241]))
    unknown call_tmp[604144] "expr temp" "maybe param" "maybe type" "temp"
    (604147 'move' call_tmp[604144](41263 call == call_tmp[604139] nil[44]))
    unknown call_tmp[604149] "expr temp" "maybe param" "maybe type" "temp"
    (604152 'move' call_tmp[604149](41274 call _cond_test call_tmp[604144]))
    if call_tmp[604149]
    {
      unknown call_tmp[604154] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (604157 'move' call_tmp[604154](747929 'new' NilClassError[368396](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[604159] "expr temp" "maybe param" "maybe type" "temp"
      (604162 'move' call_tmp[604159](468147 call chpl_fix_thrown_error call_tmp[604154]))
      (41271 'throw' call_tmp[604159])
    }
    unknown call_tmp[604166] "expr temp" "maybe param" "maybe type" "temp"
    (604169 'move' call_tmp[604166](41286 call chpl_t _mt[243] t[41232]))
    unknown call_tmp[604171] "expr temp" "maybe param" "maybe type" "temp"
    (604174 'move' call_tmp[604171](41290 call _to_unmanaged call_tmp[604166]))
    unknown call_tmp[604176] "expr temp" "maybe param" "maybe type" "temp"
    (604179 'move' call_tmp[604176](41292 call _to_nonnil call_tmp[604171]))
    unknown call_tmp[604183] "expr temp" "maybe param" "maybe type" "temp"
    (604186 'move' call_tmp[604183](41280 call chpl_p _mt[243] x[41241]))
    unknown call_tmp[604188] "maybe param" "maybe type" "temp"
    (604191 'move' call_tmp[604188](41293 call _cast call_tmp[604176] call_tmp[604183]))
    unknown castPtr[41296] "dead at end of block" "insert auto destroy"
    (540683 'init var' castPtr[41296] call_tmp[604188])
    (41299 'end of statement')
    unknown call_tmp[604195] "expr temp" "maybe param" "maybe type" "temp"
    (604198 'move' call_tmp[604195](41301 call chpl_p _mt[243] x[41241]))
    (41305 call = call_tmp[604195] nil[44])
    (474213 'end of statement')
    unknown call_tmp[604200] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604203 'move' call_tmp[604200](747930 'new' _owned[30](?) castPtr[41296]))
    (505396 'move' ret[505391](505395 'deref' call_tmp[604200]))
    gotoReturn _end__cast[505389] _end__cast[505389]
    (474214 'end of statement' castPtr[41296])
    label _end__cast[505389]
    (505393 return ret[505391])
  }
  where {
    unknown call_tmp[604207] "expr temp" "maybe param" "maybe type" "temp"
    (604210 'move' call_tmp[604207](41252 call chpl_t _mt[243] x[41241]))
    unknown call_tmp[604212] "expr temp" "maybe param" "maybe type" "temp"
    (604215 'move' call_tmp[604212](41256 call _to_nonnil call_tmp[604207]))
    unknown call_tmp[604219] "expr temp" "maybe param" "maybe type" "temp"
    (604222 'move' call_tmp[604219](41246 call chpl_t _mt[243] t[41232]))
    (354303 'is_proper_subtype' call_tmp[604212] call_tmp[604219])
  }
  function _cast[41326](arg t[41323]:owned[415472](?), ref arg x[41331]:owned[415472](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505402] "RVV" "temp"
    unknown call_tmp[604226] "expr temp" "maybe param" "maybe type" "temp"
    (604229 'move' call_tmp[604226](41352 call chpl_t _mt[243] t[41323]))
    unknown call_tmp[604231] "expr temp" "maybe param" "maybe type" "temp"
    (604234 'move' call_tmp[604231](41356 call _to_unmanaged call_tmp[604226]))
    unknown call_tmp[604236] "expr temp" "maybe param" "maybe type" "temp"
    (604239 'move' call_tmp[604236](41358 call _to_nonnil call_tmp[604231]))
    unknown call_tmp[604243] "expr temp" "maybe param" "maybe type" "temp"
    (604246 'move' call_tmp[604243](41346 call chpl_p _mt[243] x[41331]))
    unknown call_tmp[604248] "maybe param" "maybe type" "temp"
    (604251 'move' call_tmp[604248](41359 call _cast call_tmp[604236] call_tmp[604243]))
    unknown castPtr[41362] "dead at end of block" "insert auto destroy"
    (540685 'init var' castPtr[41362] call_tmp[604248])
    (41365 'end of statement')
    unknown call_tmp[604255] "expr temp" "maybe param" "maybe type" "temp"
    (604258 'move' call_tmp[604255](41368 call chpl_p _mt[243] x[41331]))
    (41372 call = call_tmp[604255] nil[44])
    (474216 'end of statement')
    unknown call_tmp[604260] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604263 'move' call_tmp[604260](747931 'new' _owned[30](?) castPtr[41362]))
    (505407 'move' ret[505402](505406 'deref' call_tmp[604260]))
    gotoReturn _end__cast[505400] _end__cast[505400]
    (474217 'end of statement' castPtr[41362])
    label _end__cast[505400]
    (505404 return ret[505402])
  }
  where {
    unknown call_tmp[604267] "expr temp" "maybe param" "maybe type" "temp"
    (604270 'move' call_tmp[604267](41341 call chpl_t _mt[243] x[41331]))
    unknown call_tmp[604274] "expr temp" "maybe param" "maybe type" "temp"
    (604277 'move' call_tmp[604274](41336 call chpl_t _mt[243] t[41323]))
    (354304 'is_proper_subtype' call_tmp[604267] call_tmp[604274])
  }
  function _cast[41394](arg t[41391]:owned?[415468](?), ref arg x[41400]:owned?[415468](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505413] "RVV" "temp"
    unknown call_tmp[604281] "expr temp" "maybe param" "maybe type" "temp"
    (604284 'move' call_tmp[604281](41421 call chpl_t _mt[243] t[41391]))
    unknown call_tmp[604286] "expr temp" "maybe param" "maybe type" "temp"
    (604289 'move' call_tmp[604286](41425 call _to_unmanaged call_tmp[604281]))
    unknown call_tmp[604291] "expr temp" "maybe param" "maybe type" "temp"
    (604294 'move' call_tmp[604291](41427 call _to_nilable call_tmp[604286]))
    unknown call_tmp[604298] "expr temp" "maybe param" "maybe type" "temp"
    (604301 'move' call_tmp[604298](41415 call chpl_p _mt[243] x[41400]))
    unknown call_tmp[604303] "maybe param" "maybe type" "temp"
    (604306 'move' call_tmp[604303](41428 call _cast call_tmp[604291] call_tmp[604298]))
    unknown castPtr[41430] "dead at end of block" "insert auto destroy"
    (540687 'init var' castPtr[41430] call_tmp[604303])
    (41433 'end of statement')
    unknown call_tmp[604308] "expr temp" "maybe param" "maybe type" "temp"
    (604311 'move' call_tmp[604308](41437 call != castPtr[41430] nil[44]))
    unknown call_tmp[604313] "expr temp" "maybe param" "maybe type" "temp"
    (604316 'move' call_tmp[604313](41448 call _cond_test call_tmp[604308]))
    if call_tmp[604313]
    {
      unknown call_tmp[604320] "expr temp" "maybe param" "maybe type" "temp"
      (604323 'move' call_tmp[604320](41440 call chpl_p _mt[243] x[41400]))
      (41444 call = call_tmp[604320] nil[44])
    }
    unknown call_tmp[604325] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604328 'move' call_tmp[604325](747932 'new' _owned[30](?) castPtr[41430]))
    (505418 'move' ret[505413](505417 'deref' call_tmp[604325]))
    gotoReturn _end__cast[505411] _end__cast[505411]
    (474220 'end of statement' castPtr[41430])
    label _end__cast[505411]
    (505415 return ret[505413])
  }
  where {
    unknown call_tmp[604332] "expr temp" "maybe param" "maybe type" "temp"
    (604335 'move' call_tmp[604332](41410 call chpl_t _mt[243] x[41400]))
    unknown call_tmp[604339] "expr temp" "maybe param" "maybe type" "temp"
    (604342 'move' call_tmp[604339](41405 call chpl_t _mt[243] t[41391]))
    (354305 'is_proper_subtype' call_tmp[604332] call_tmp[604339])
  }
  function _cast[41471](arg t[41468]:owned?[415468](?), ref arg x[41476]:owned[415472](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505424] "RVV" "temp"
    unknown call_tmp[604346] "expr temp" "maybe param" "maybe type" "temp"
    (604349 'move' call_tmp[604346](41500 call chpl_t _mt[243] t[41468]))
    unknown call_tmp[604351] "expr temp" "maybe param" "maybe type" "temp"
    (604354 'move' call_tmp[604351](41504 call _to_unmanaged call_tmp[604346]))
    unknown call_tmp[604356] "expr temp" "maybe param" "maybe type" "temp"
    (604359 'move' call_tmp[604356](41506 call _to_nilable call_tmp[604351]))
    unknown call_tmp[604363] "expr temp" "maybe param" "maybe type" "temp"
    (604366 'move' call_tmp[604363](41494 call chpl_p _mt[243] x[41476]))
    unknown call_tmp[604368] "maybe param" "maybe type" "temp"
    (604371 'move' call_tmp[604368](41507 call _cast call_tmp[604356] call_tmp[604363]))
    unknown castPtr[41509] "dead at end of block" "insert auto destroy"
    (540689 'init var' castPtr[41509] call_tmp[604368])
    (41512 'end of statement')
    unknown call_tmp[604373] "expr temp" "maybe param" "maybe type" "temp"
    (604376 'move' call_tmp[604373](41516 call != castPtr[41509] nil[44]))
    unknown call_tmp[604378] "expr temp" "maybe param" "maybe type" "temp"
    (604381 'move' call_tmp[604378](41527 call _cond_test call_tmp[604373]))
    if call_tmp[604378]
    {
      unknown call_tmp[604385] "expr temp" "maybe param" "maybe type" "temp"
      (604388 'move' call_tmp[604385](41519 call chpl_p _mt[243] x[41476]))
      (41523 call = call_tmp[604385] nil[44])
    }
    unknown call_tmp[604390] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604393 'move' call_tmp[604390](747933 'new' _owned[30](?) castPtr[41509]))
    (505429 'move' ret[505424](505428 'deref' call_tmp[604390]))
    gotoReturn _end__cast[505422] _end__cast[505422]
    (474223 'end of statement' castPtr[41509])
    label _end__cast[505422]
    (505426 return ret[505424])
  }
  where {
    unknown call_tmp[604397] "expr temp" "maybe param" "maybe type" "temp"
    (604400 'move' call_tmp[604397](41489 call chpl_t _mt[243] x[41476]))
    unknown call_tmp[604404] "expr temp" "maybe param" "maybe type" "temp"
    (604407 'move' call_tmp[604404](41482 call chpl_t _mt[243] t[41468]))
    unknown call_tmp[604409] "expr temp" "maybe param" "maybe type" "temp"
    (604412 'move' call_tmp[604409](41486 call _to_nonnil call_tmp[604404]))
    (354306 'is_proper_subtype' call_tmp[604397] call_tmp[604409])
  }
  function _cast[41547](arg t[41544]:_owned[30](?), arg x[41550]:_nilType[42]) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505435] "RVV" "temp"
    unknown call_tmp[604416] "expr temp" "maybe param" "maybe type" "temp"
    (604419 'move' call_tmp[604416](41555 call chpl_t _mt[243] t[41544]))
    unknown call_tmp[604421] "expr temp" "maybe param" "maybe type" "temp"
    (604424 'move' call_tmp[604421](41559 call isNonNilableClass call_tmp[604416]))
    unknown call_tmp[604426] "expr temp" "maybe param" "maybe type" "temp"
    (604429 'move' call_tmp[604426](41581 call _cond_test call_tmp[604421]))
    if call_tmp[604426]
    {
      (41579 call compilerError "Illegal cast from nil to non-nilable owned type")
    }
    unknown tmp[41588] "dead at end of block" "insert auto destroy"
    (540691 'default init var' tmp[41588] t[41544])
    (41591 'end of statement')
    (505440 'move' ret[505435](505439 'deref' tmp[41588]))
    gotoReturn _end__cast[505433] _end__cast[505433]
    (474226 'end of statement' tmp[41588])
    label _end__cast[505433]
    (505437 return ret[505435])
  }
  function postfix![41603](const  ref arg x[41600]:_owned[30](?)) : _unknown[51] "always propagate line file info" "inline" "no doc"
  {
    unknown ret[505446] "RVV" "temp"
    unknown call_tmp[604431] "expr temp" "maybe param" "maybe type" "temp"
    (604434 'move' call_tmp[604431](41649 call _cond_test 1))
    if call_tmp[604431]
    {
      unknown call_tmp[604438] "expr temp" "maybe param" "maybe type" "temp"
      (604441 'move' call_tmp[604438](41612 call chpl_t _mt[243] x[41600]))
      unknown call_tmp[604443] "expr temp" "maybe param" "maybe type" "temp"
      (604446 'move' call_tmp[604443](41616 call _to_nilable call_tmp[604438]))
      unknown call_tmp[604450] "expr temp" "maybe param" "maybe type" "temp"
      (604453 'move' call_tmp[604450](41618 call chpl_t _mt[243] x[41600]))
      unknown call_tmp[604455] "expr temp" "maybe param" "maybe type" "temp"
      (604458 'move' call_tmp[604455](41621 call == call_tmp[604443] call_tmp[604450]))
      unknown call_tmp[604460] "expr temp" "maybe param" "maybe type" "temp"
      (604463 'move' call_tmp[604460](41644 call _cond_test call_tmp[604455]))
      if call_tmp[604460]
      {
        unknown call_tmp[604467] "expr temp" "maybe param" "maybe type" "temp"
        (604470 'move' call_tmp[604467](41624 call chpl_p _mt[243] x[41600]))
        unknown call_tmp[604472] "expr temp" "maybe param" "maybe type" "temp"
        (604475 'move' call_tmp[604472](41628 call == call_tmp[604467] nil[44]))
        unknown call_tmp[604477] "expr temp" "maybe param" "maybe type" "temp"
        (604480 'move' call_tmp[604477](41639 call _cond_test call_tmp[604472]))
        if call_tmp[604477]
        {
          (41636 call nilCheckHalt module=[255] HaltWrappers[210085] "argument to ! is nil")
          (357064 'referenced modules list' HaltWrappers[210085])
        }
      }
    }
    unknown call_tmp[604484] "expr temp" "maybe param" "maybe type" "temp"
    (604487 'move' call_tmp[604484](41655 call chpl_p _mt[243] x[41600]))
    unknown call_tmp[604489] "expr temp" "maybe param" "maybe type" "temp"
    (604492 'move' call_tmp[604489](41659 call _to_nonnil call_tmp[604484]))
    (505451 'move' ret[505446](505450 'deref' call_tmp[604489]))
    (505448 return ret[505446])
    (355137 'used modules list'(41606 'import' HaltWrappers[210085]))
  }
  (355133 'used modules list'(39588 'use' ChapelStandard[20267]))
}