AST dump for TwoArrayPartitioning after pass parse.
Module use list: 

{
  (353044 'use' ChapelStandard)
  (279196 'use' BlockDist)
  (279205 'use'(279202 call . super c"MSBRadixSort"))
  (279209 'use' List 'only' list)
  (279216 'import' Sort.{ShellSort, RadixSortHelp, SampleSortHelp, ShallowCopy})
  { scopeless
    unknown debug[279219] "param" "private" 0
    (279222 'end of statement')
  }
  { scopeless
    unknown maxBuckets[279226] "param" 512
    (279229 'end of statement')
  }
  type TwoArraySortTask[279339] unknown start[279232] int[13] unknown size[279237] int[13] unknown startbit[279242] int[13] unknown inA[279247] bool[10] unknown doSort[279252] bool[10] function TwoArraySortTask[279339].init[279258](arg _mt[279343]:_MT[238], arg this[279341]:TwoArraySortTask[279339]) : _unknown[51] "method" "primary method"
  {
  } function TwoArraySortTask[279339].init[279269](arg _mt[279347]:_MT[238], arg this[279345]:TwoArraySortTask[279339], arg start[279266] :
  int[13], arg size[279272] :
  int[13], arg startbit[279276] :
  int[13], arg inA[279280] :
  bool[10], arg doSort[279284] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (279294 call =(279290 call . this c"start") start)
    (279303 call =(279299 call . this c"size") size)
    (279313 call =(279309 call . this c"startbit") startbit)
    (279323 call =(279319 call . this c"inA") inA)
    (279333 call =(279329 call . this c"doSort") doSort)
  }
  type TwoArrayBucketizerPerTaskState[279368] unknown localCounts[279363](279361 call chpl__buildArrayRuntimeType(279359 call chpl__ensureDomainExpr(279355 call #(279352 call chpl_build_low_bounded_range 0) maxBuckets)) int[13])
  type TwoArrayBucketizerSharedState[279538](?) unknown nTasks[279385](279382 IfExpr (279375 call > dataParTasksPerLocale 0) then
  { scopeless
    dataParTasksPerLocale
  } else
  { scopeless
    (279379 call . here c"maxTaskPar")
  } ) int[13] unknown countsSize[279394](279392 call * nTasks maxBuckets) int[13] unknown bucketizer[279398] unknown globalCounts[279414](279412 call chpl__buildArrayRuntimeType(279410 call chpl__ensureDomainExpr(279406 call #(279403 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown globalEnds[279430](279428 call chpl__buildArrayRuntimeType(279426 call chpl__ensureDomainExpr(279422 call #(279419 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown localState[279446](279444 call chpl__buildArrayRuntimeType(279442 call chpl__ensureDomainExpr(279438 call #(279435 call chpl_build_low_bounded_range 0) nTasks)) TwoArrayBucketizerPerTaskState) unknown counts[279462](279460 call chpl__buildArrayRuntimeType(279458 call chpl__ensureDomainExpr(279454 call #(279451 call chpl_build_low_bounded_range 0) maxBuckets)) int[13]) unknown ends[279478](279476 call chpl__buildArrayRuntimeType(279474 call chpl__ensureDomainExpr(279470 call #(279467 call chpl_build_low_bounded_range 0) maxBuckets)) int[13]) unknown outputInA[279494](279492 call chpl__buildArrayRuntimeType(279490 call chpl__ensureDomainExpr(279486 call #(279483 call chpl_build_low_bounded_range 0) maxBuckets)) bool[10]) unknown bigTasks[279502](279501 call list TwoArraySortTask) unknown smallTasks[279510](279509 call list TwoArraySortTask) unknown baseCaseSize[279516] 16 int[13] unknown sequentialSizePerTask[279524] 4096 int[13] unknown endbit[279533](279532 call max int[13]) int[13]
  type TwoArrayDistributedBucketizerStatePerLocale[279595](?) unknown bucketizerType[279542] "type variable" unknown compat[279549](279548 call TwoArrayBucketizerSharedState bucketizerType) unknown countsSize[279558](279556 call * numLocales maxBuckets) int[13] unknown globalCounts[279574](279572 call chpl__buildArrayRuntimeType(279570 call chpl__ensureDomainExpr(279566 call #(279563 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown globalEnds[279590](279588 call chpl__buildArrayRuntimeType(279586 call chpl__ensureDomainExpr(279582 call #(279579 call chpl_build_low_bounded_range 0) countsSize)) int[13])
  type TasksForLocale[279608] unknown localTasks[279603](279602 call list TwoArraySortTask)
  type TwoArrayDistributedBucketizerSharedState[279820](?) unknown bucketizerType[279612] "type variable" unknown numLocales[279616] int[13] unknown perLocale[279633](279632 call newBlockArr(279625 call #(279622 call chpl_build_low_bounded_range 0) numLocales)(279631 call TwoArrayDistributedBucketizerStatePerLocale bucketizerType)) const baseCaseSize[279638] "const" int[13] const endbit[279647] "const"(279646 call max int[13]) int[13] const countsSize[279656] "const"(279654 call * numLocales maxBuckets) int[13] unknown globalCounts[279672](279670 call chpl__buildArrayRuntimeType(279668 call chpl__ensureDomainExpr(279664 call #(279661 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown globalEnds[279688](279686 call chpl__buildArrayRuntimeType(279684 call chpl__ensureDomainExpr(279680 call #(279677 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown distTasks[279696](279695 call list TwoArraySortTask) unknown localTasks[279712](279710 call chpl__buildArrayRuntimeType(279708 call chpl__ensureDomainExpr(279704 call #(279701 call chpl_build_low_bounded_range 0) numLocales)) TasksForLocale) function TwoArrayDistributedBucketizerSharedState[279820](?).postinit[279718](arg _mt[279824]:_MT[238], arg this[279822]:TwoArrayDistributedBucketizerSharedState[279820](?)) : _unknown[51] "method" "primary method"
  {
    {
      unknown _indexOfInterest[279783] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[279784] "expr temp" "temp"
      (279793 'move' _iterator[279784](279791 call _getIterator perLocale))
      Defer
      {
        {
          (279809 call _freeIterator _iterator[279784])
        }
      }
      { scopeless type
        (279798 'move' _indexOfInterest[279783](279795 call iteratorIndex _iterator[279784]))
      }
      ForLoop[279785]
      {
        unknown p[279802] "index var" "insert auto destroy"
        (279804 'move' p[279802] _indexOfInterest[279783])
        {
          (279734 call =(279730 call .(279725 call . p c"compat") c"baseCaseSize") baseCaseSize)
          (279748 call =(279744 call .(279739 call . p c"compat") c"endbit") endbit)
          (279765 call assert(279762 call >(279758 call .(279753 call . p c"compat") c"nTasks") 0))
          (279781 call assert(279778 call >(279774 call .(279769 call . p c"compat") c"countsSize") 0))
        }
        label _continueLabel[279788]
        _indexOfInterest[279783]
        _iterator[279784]
      }
      label _breakLabel[279789]
    }
  }
  function bucketize[279833](arg start_n[279830] :
  int[13], arg end_n[279836] :
  int[13], arg dst[279842] :
  (279839 call chpl__buildArrayRuntimeType nil[44]), arg src[279848] :
  (279845 call chpl__buildArrayRuntimeType nil[44]), ref arg state[279852] :
  TwoArrayBucketizerSharedState, arg criterion[279855]:_any[178](?), arg startbit[279858] :
  int[13]) : _unknown[51]
  {
    if(279905 call _cond_test debug)
    {
      { scopeless
        (279903 call writeln "bucketize "(279883 call chpl_build_bounded_range start_n end_n) " startbit=" startbit)
      }
    }
    { scopeless
      const nBuckets[279922] "const"(279921 call(279917 call .(279914 call . state c"bucketizer") c"getNumBuckets"))
      (279925 'end of statement')
    }
    { scopeless
      const n[279933] "const"(279931 call +(279928 call - end_n start_n) 1)
      (279936 'end of statement')
    }
    { scopeless
      const nTasks[279952] "const"(279949 IfExpr (279942 call >= n(279939 call . state c"nTasks")) then
      { scopeless
        (279945 call . state c"nTasks")
      } else
      { scopeless
        1
      } )
      (279955 'end of statement')
    }
    (279962 call assert(279959 call > nTasks 0))
    if(279981 call _cond_test(279966 call == n 0))
    {
      (279975 call =(279971 call . state c"counts") 0)
      (279979 return)
    }
    { scopeless
      const countsSize[279989] "const"(279987 call * nTasks nBuckets)
      (279992 'end of statement')
    }
    { scopeless
      const blockSize[279998] "const"(279997 call divceil n nTasks)
      (280001 'end of statement')
    }
    { scopeless
      const nBlocks[280007] "const"(280006 call divceil n blockSize)
      (280010 'end of statement')
    }
    {
      unknown tmpIter[280329] "expr temp" "maybe ref" "no copy" "temp"
      (280332 'move' tmpIter[280329](280016 call #(280013 call chpl_build_low_bounded_range 0) nTasks))
      unknown isRngDomArr[280700] "maybe param" "temp"
      (280715 'move' isRngDomArr[280700](280713 call ||(280702 call isBoundedRange tmpIter[280329])(280711 call ||(280705 call isDomain tmpIter[280329])(280708 call isArray tmpIter[280329]))))
      if isRngDomArr[280700]
      {
        const _coforallCount[280567] "const" "end count" "temp"
        (280636 'move' _coforallCount[280567](280633 call _endCountAlloc 1))
        unknown numTasks[280568] "temp"
        (280620 'move' numTasks[280568](280616 call . tmpIter[280329] c"size"))
        (280611 call _upEndCount _coforallCount[280567] 1 numTasks[280568])
        (280608 call chpl_resetTaskSpawn numTasks[280568])
        unknown _indexOfInterest[280575] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[280576] "expr temp" "temp"
        (280585 'move' _iterator[280576](280583 call _getIterator tmpIter[280329]))
        Defer
        {
          {
            (280601 call _freeIterator _iterator[280576])
          }
        }
        { scopeless type
          (280590 'move' _indexOfInterest[280575](280587 call iteratorIndex _iterator[280576]))
        }
        ForLoop[280577]
        {
          unknown tid[280594] "coforall index var" "index var" "insert auto destroy"
          (280596 'move' tid[280594] _indexOfInterest[280575])
          {
            {
              { scopeless
                unknown start[280339](280341 call + start_n(280344 call * tid blockSize))
                (280348 'end of statement')
              }
              { scopeless
                unknown end[280350](280352 call -(280354 call + start blockSize) 1)
                (280359 'end of statement')
              }
              if(280361 call _cond_test(280363 call > end end_n))
              {
                (280368 call = end end_n)
              }
              if(280373 call _cond_test debug)
              {
                { scopeless
                  (280378 call writeln "tid " tid " considering "(280383 call chpl_build_bounded_range start end))
                }
              }
              { scopeless
                unknown counts[280388] "ref var"(280390 call .(280395 call(280392 call . state c"localState") tid) c"localCounts")
                (280399 'end of statement')
              }
              {
                unknown _indexOfInterest[280401] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280403] "expr temp" "temp"
                (280405 'move' _iterator[280403](280408 call _getIterator(280410 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (280415 call _freeIterator _iterator[280403])
                  }
                }
                { scopeless type
                  (280419 'move' _indexOfInterest[280401](280422 call iteratorIndex _iterator[280403]))
                }
                ForLoop[280424]
                {
                  unknown bin[280427] "index var" "insert auto destroy"
                  (280429 'move' bin[280427] _indexOfInterest[280401])
                  {
                    (280434 call =(280436 call counts bin) 0)
                  }
                  label _continueLabel[280439]
                  _indexOfInterest[280401]
                  _iterator[280403]
                }
                label _breakLabel[280441]
              }
              {
                unknown _indexOfInterest[280444] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280446] "expr temp" "temp"
                (280448 'move' _iterator[280446](280451 call _getIterator(280459 call(280453 call .(280455 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (280467 call _freeIterator _iterator[280446])
                  }
                }
                { scopeless type
                  (280471 'move' _indexOfInterest[280444](280474 call iteratorIndex _iterator[280446]))
                }
                ForLoop[280476]
                {
                  (280480 call _check_tuple_var_decl _indexOfInterest[280444] 2)
                  unknown i[280483] "index var" "insert auto destroy"
                  (280485 'move' i[280483](280488 call _indexOfInterest[280444] 0))
                  unknown bin[280490] "index var" "insert auto destroy"
                  (280492 'move' bin[280490](280495 call _indexOfInterest[280444] 1))
                  {
                    (280499 call +=(280501 call counts bin) 1)
                  }
                  label _continueLabel[280504]
                  _indexOfInterest[280444]
                  _iterator[280446]
                }
                label _breakLabel[280506]
              }
              {
                unknown _indexOfInterest[280509] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280511] "expr temp" "temp"
                (280513 'move' _iterator[280511](280516 call _getIterator(280518 call vectorizeOnly(280520 call #(280522 call chpl_build_low_bounded_range 0) nBuckets))))
                Defer
                {
                  {
                    (280527 call _freeIterator _iterator[280511])
                  }
                }
                { scopeless type
                  (280531 'move' _indexOfInterest[280509](280534 call iteratorIndex _iterator[280511]))
                }
                ForLoop[280536]
                {
                  unknown bin[280539] "index var" "insert auto destroy"
                  (280541 'move' bin[280539] _indexOfInterest[280509])
                  {
                    (280546 call =(280551 call(280548 call . state c"globalCounts")(280553 call +(280555 call * bin nTasks) tid))(280560 call counts bin))
                  }
                  label _continueLabel[280562]
                  _indexOfInterest[280509]
                  _iterator[280511]
                }
                label _breakLabel[280564]
              }
            }
            (280570 call _downEndCount _coforallCount[280567] nil[44])
            (280569 'coforall loop')
            (280334 'actuals list' tiMarkRef[294] state)
          }
          label _continueLabel[280580]
          _indexOfInterest[280575]
          _iterator[280576]
        }
        label _breakLabel[280581]
        Defer
        {
          {
            (280623 call _endCountFree _coforallCount[280567])
          }
        }
        (280628 call _waitEndCount _coforallCount[280567] 1 numTasks[280568])
      }
      {
        const _coforallCount[280640] "const" "end count" "temp"
        (280697 'move' _coforallCount[280640](280694 call _endCountAlloc 1))
        unknown _indexOfInterest[280648] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[280649] "expr temp" "temp"
        (280658 'move' _iterator[280649](280656 call _getIterator tmpIter[280329]))
        Defer
        {
          {
            (280674 call _freeIterator _iterator[280649])
          }
        }
        { scopeless type
          (280663 'move' _indexOfInterest[280648](280660 call iteratorIndex _iterator[280649]))
        }
        ForLoop[280650]
        {
          unknown tid[280667] "coforall index var" "index var" "insert auto destroy"
          (280669 'move' tid[280667] _indexOfInterest[280648])
          (280681 call _upEndCount _coforallCount[280640] 1)
          {
            {
              { scopeless
                unknown start[280033](280031 call + start_n(280029 call * tid blockSize))
                (280036 'end of statement')
              }
              { scopeless
                unknown end[280045](280043 call -(280040 call + start blockSize) 1)
                (280048 'end of statement')
              }
              if(280059 call _cond_test(280051 call > end end_n))
              {
                (280055 call = end end_n)
              }
              if(280107 call _cond_test debug)
              {
                { scopeless
                  (280105 call writeln "tid " tid " considering "(280103 call chpl_build_bounded_range start end))
                }
              }
              { scopeless
                unknown counts[280126] "ref var"(280123 call .(280120 call(280115 call . state c"localState") tid) c"localCounts")
                (280129 'end of statement')
              }
              {
                unknown _indexOfInterest[280146] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280147] "expr temp" "temp"
                (280156 'move' _iterator[280147](280154 call _getIterator(280163 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (280179 call _freeIterator _iterator[280147])
                  }
                }
                { scopeless type
                  (280168 'move' _indexOfInterest[280146](280165 call iteratorIndex _iterator[280147]))
                }
                ForLoop[280148]
                {
                  unknown bin[280172] "index var" "insert auto destroy"
                  (280174 'move' bin[280172] _indexOfInterest[280146])
                  {
                    (280142 call =(280140 call counts bin) 0)
                  }
                  label _continueLabel[280151]
                  _indexOfInterest[280146]
                  _iterator[280147]
                }
                label _breakLabel[280152]
              }
              {
                unknown _indexOfInterest[280214] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280215] "expr temp" "temp"
                (280224 'move' _iterator[280215](280222 call _getIterator(280204 call(280195 call .(280192 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (280255 call _freeIterator _iterator[280215])
                  }
                }
                { scopeless type
                  (280230 'move' _indexOfInterest[280214](280227 call iteratorIndex _iterator[280215]))
                }
                ForLoop[280216]
                {
                  (280235 call _check_tuple_var_decl _indexOfInterest[280214] 2)
                  unknown i[280241] "index var" "insert auto destroy"
                  (280243 'move' i[280241](280239 call _indexOfInterest[280214] 0))
                  unknown bin[280248] "index var" "insert auto destroy"
                  (280250 'move' bin[280248](280246 call _indexOfInterest[280214] 1))
                  {
                    (280210 call +=(280208 call counts bin) 1)
                  }
                  label _continueLabel[280219]
                  _indexOfInterest[280214]
                  _iterator[280215]
                }
                label _breakLabel[280220]
              }
              {
                unknown _indexOfInterest[280295] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280296] "expr temp" "temp"
                (280305 'move' _iterator[280296](280303 call _getIterator(280271 call vectorizeOnly(280268 call #(280265 call chpl_build_low_bounded_range 0) nBuckets))))
                Defer
                {
                  {
                    (280322 call _freeIterator _iterator[280296])
                  }
                }
                { scopeless type
                  (280311 'move' _indexOfInterest[280295](280308 call iteratorIndex _iterator[280296]))
                }
                ForLoop[280297]
                {
                  unknown bin[280315] "index var" "insert auto destroy"
                  (280317 'move' bin[280315] _indexOfInterest[280295])
                  {
                    (280291 call =(280286 call(280275 call . state c"globalCounts")(280283 call +(280280 call * bin nTasks) tid))(280290 call counts bin))
                  }
                  label _continueLabel[280300]
                  _indexOfInterest[280295]
                  _iterator[280296]
                }
                label _breakLabel[280301]
              }
            }
            (280643 call _downEndCount _coforallCount[280640] nil[44])
            (280642 'coforall loop')
            (280023 'actuals list' tiMarkRef[294] state)
          }
          label _continueLabel[280653]
          _indexOfInterest[280648]
          _iterator[280649]
        }
        label _breakLabel[280654]
        Defer
        {
          {
            (280685 call _endCountFree _coforallCount[280640])
          }
        }
        (280690 call _waitEndCount _coforallCount[280640] 1)
      }
    }
    (280767 call =(280722 call . state c"globalEnds")(280765 call +(280763 call function chpl__scan4[280730](arg chpl_toScan[280732]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
    {
      unknown chpl_eltType[280734] "maybe type" "temp"
      { scopeless type
        (280738 'move' chpl_eltType[280734](280740 'typeof'(280742 call chpl__initCopy(280744 call iteratorIndex(280746 call _getIterator chpl_toScan[280732])))))
      }
      const tmp[280735] "const" "temp"
      (280755 'move' tmp[280735](280754 'new'(280753 call SumReduceScanOp(eltType = chpl_eltType[280734])(_chpl_manager = unmanaged[220](?)))))
      (280757 return(280759 call chpl__scanIterator tmp[280735] chpl_toScan[280732]))
    }(280727 call . state c"globalCounts")) start_n))
    if(280969 call _cond_test debug)
    {
      {
        unknown _indexOfInterest[280928] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[280929] "expr temp" "temp"
        (280938 'move' _iterator[280929](280936 call _getIterator(280945 call chpl_direct_counted_range_iter 0 nBuckets)))
        Defer
        {
          {
            (280961 call _freeIterator _iterator[280929])
          }
        }
        { scopeless type
          (280950 'move' _indexOfInterest[280928](280947 call iteratorIndex _iterator[280929]))
        }
        ForLoop[280930]
        {
          unknown bin[280954] "index var" "insert auto destroy"
          (280956 'move' bin[280954] _indexOfInterest[280928])
          {
            {
              unknown _indexOfInterest[280887] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[280888] "expr temp" "temp"
              (280897 'move' _iterator[280888](280895 call _getIterator(280904 call chpl_direct_counted_range_iter 0 nTasks)))
              Defer
              {
                {
                  (280920 call _freeIterator _iterator[280888])
                }
              }
              { scopeless type
                (280909 'move' _indexOfInterest[280887](280906 call iteratorIndex _iterator[280888]))
              }
              ForLoop[280889]
              {
                unknown tid[280913] "index var" "insert auto destroy"
                (280915 'move' tid[280913] _indexOfInterest[280887])
                {
                  { scopeless
                    unknown gb[280792](280790 call +(280787 call * bin nTasks) tid)
                    (280795 'end of statement')
                  }
                  if(280883 call _cond_test(280805 call !=(280803 call(280798 call . state c"globalCounts") gb) 0))
                  {
                    (280880 call writeln "tid " tid " count[" bin "] = "(280852 call(280847 call . state c"globalCounts") gb) " end = "(280878 call -(280876 call(280871 call . state c"globalEnds") gb) 1))
                  }
                }
                label _continueLabel[280892]
                _indexOfInterest[280887]
                _iterator[280888]
              }
              label _breakLabel[280893]
            }
          }
          label _continueLabel[280933]
          _indexOfInterest[280928]
          _iterator[280929]
        }
        label _breakLabel[280934]
      }
    }
    {
      unknown tmpIter[281332] "expr temp" "maybe ref" "no copy" "temp"
      (281335 'move' tmpIter[281332](280978 call #(280975 call chpl_build_low_bounded_range 0) nTasks))
      unknown isRngDomArr[281715] "maybe param" "temp"
      (281730 'move' isRngDomArr[281715](281728 call ||(281717 call isBoundedRange tmpIter[281332])(281726 call ||(281720 call isDomain tmpIter[281332])(281723 call isArray tmpIter[281332]))))
      if isRngDomArr[281715]
      {
        const _coforallCount[281582] "const" "end count" "temp"
        (281651 'move' _coforallCount[281582](281648 call _endCountAlloc 1))
        unknown numTasks[281583] "temp"
        (281635 'move' numTasks[281583](281631 call . tmpIter[281332] c"size"))
        (281626 call _upEndCount _coforallCount[281582] 1 numTasks[281583])
        (281623 call chpl_resetTaskSpawn numTasks[281583])
        unknown _indexOfInterest[281590] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[281591] "expr temp" "temp"
        (281600 'move' _iterator[281591](281598 call _getIterator tmpIter[281332]))
        Defer
        {
          {
            (281616 call _freeIterator _iterator[281591])
          }
        }
        { scopeless type
          (281605 'move' _indexOfInterest[281590](281602 call iteratorIndex _iterator[281591]))
        }
        ForLoop[281592]
        {
          unknown tid[281609] "coforall index var" "index var" "insert auto destroy"
          (281611 'move' tid[281609] _indexOfInterest[281590])
          {
            {
              { scopeless
                unknown start[281342](281344 call + start_n(281347 call * tid blockSize))
                (281351 'end of statement')
              }
              { scopeless
                unknown end[281353](281355 call -(281357 call + start blockSize) 1)
                (281362 'end of statement')
              }
              if(281364 call _cond_test(281366 call > end end_n))
              {
                (281371 call = end end_n)
              }
              { scopeless
                unknown nextOffsets[281376] "ref var"(281378 call .(281383 call(281380 call . state c"localState") tid) c"localCounts")
                (281387 'end of statement')
              }
              {
                unknown _indexOfInterest[281389] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[281391] "expr temp" "temp"
                (281393 'move' _iterator[281391](281396 call _getIterator(281398 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (281403 call _freeIterator _iterator[281391])
                  }
                }
                { scopeless type
                  (281407 'move' _indexOfInterest[281389](281410 call iteratorIndex _iterator[281391]))
                }
                ForLoop[281412]
                {
                  unknown bin[281415] "index var" "insert auto destroy"
                  (281417 'move' bin[281415] _indexOfInterest[281389])
                  {
                    { scopeless
                      unknown globalBin[281422](281424 call +(281426 call * bin nTasks) tid)
                      (281431 'end of statement')
                    }
                    (281433 call =(281435 call nextOffsets bin)(281453 IfExpr (281438 call > globalBin 0) then
                    { scopeless
                      (281446 call(281443 call . state c"globalEnds")(281448 call - globalBin 1))
                    } else
                    { scopeless
                      start_n
                    } ))
                    if(281455 call _cond_test debug)
                    {
                      if(281459 call _cond_test(281461 call !=(281466 call(281463 call . state c"globalCounts") globalBin) 0))
                      {
                        (281471 call writeln "tid " tid " nextOffsets[" bin "] = "(281478 call nextOffsets bin))
                      }
                    }
                  }
                  label _continueLabel[281482]
                  _indexOfInterest[281389]
                  _iterator[281391]
                }
                label _breakLabel[281484]
              }
              {
                unknown _indexOfInterest[281487] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[281489] "expr temp" "temp"
                (281491 'move' _iterator[281489](281494 call _getIterator(281502 call(281496 call .(281498 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (281510 call _freeIterator _iterator[281489])
                  }
                }
                { scopeless type
                  (281514 'move' _indexOfInterest[281487](281517 call iteratorIndex _iterator[281489]))
                }
                ForLoop[281519]
                {
                  (281523 call _check_tuple_var_decl _indexOfInterest[281487] 2)
                  unknown i[281526] "index var" "insert auto destroy"
                  (281528 'move' i[281526](281531 call _indexOfInterest[281487] 0))
                  unknown bin[281533] "index var" "insert auto destroy"
                  (281535 'move' bin[281533](281538 call _indexOfInterest[281487] 1))
                  {
                    { scopeless
                      unknown next[281542] "ref var"(281544 call nextOffsets bin)
                      (281547 'end of statement')
                    }
                    if(281549 call _cond_test debug)
                    {
                      (281553 call writeln "tid " tid " dst[" next "] = src[" i "] bin " bin)
                    }
                    (281567 call(281564 call . ShallowCopy c"shallowCopy") dst next src i 1)
                    (281574 call += next 1)
                  }
                  label _continueLabel[281577]
                  _indexOfInterest[281487]
                  _iterator[281489]
                }
                label _breakLabel[281579]
              }
            }
            (281585 call _downEndCount _coforallCount[281582] nil[44])
            (281584 'coforall loop')
            (281337 'actuals list' tiMarkRef[294] state)
          }
          label _continueLabel[281595]
          _indexOfInterest[281590]
          _iterator[281591]
        }
        label _breakLabel[281596]
        Defer
        {
          {
            (281638 call _endCountFree _coforallCount[281582])
          }
        }
        (281643 call _waitEndCount _coforallCount[281582] 1 numTasks[281583])
      }
      {
        const _coforallCount[281655] "const" "end count" "temp"
        (281712 'move' _coforallCount[281655](281709 call _endCountAlloc 1))
        unknown _indexOfInterest[281663] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[281664] "expr temp" "temp"
        (281673 'move' _iterator[281664](281671 call _getIterator tmpIter[281332]))
        Defer
        {
          {
            (281689 call _freeIterator _iterator[281664])
          }
        }
        { scopeless type
          (281678 'move' _indexOfInterest[281663](281675 call iteratorIndex _iterator[281664]))
        }
        ForLoop[281665]
        {
          unknown tid[281682] "coforall index var" "index var" "insert auto destroy"
          (281684 'move' tid[281682] _indexOfInterest[281663])
          (281696 call _upEndCount _coforallCount[281655] 1)
          {
            {
              { scopeless
                unknown start[280995](280993 call + start_n(280991 call * tid blockSize))
                (280998 'end of statement')
              }
              { scopeless
                unknown end[281007](281005 call -(281002 call + start blockSize) 1)
                (281010 'end of statement')
              }
              if(281021 call _cond_test(281013 call > end end_n))
              {
                (281017 call = end end_n)
              }
              { scopeless
                unknown nextOffsets[281035] "ref var"(281032 call .(281031 call(281026 call . state c"localState") tid) c"localCounts")
                (281038 'end of statement')
              }
              {
                unknown _indexOfInterest[281133] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[281134] "expr temp" "temp"
                (281143 'move' _iterator[281134](281141 call _getIterator(281150 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (281166 call _freeIterator _iterator[281134])
                  }
                }
                { scopeless type
                  (281155 'move' _indexOfInterest[281133](281152 call iteratorIndex _iterator[281134]))
                }
                ForLoop[281135]
                {
                  unknown bin[281159] "index var" "insert auto destroy"
                  (281161 'move' bin[281159] _indexOfInterest[281133])
                  {
                    { scopeless
                      unknown globalBin[281053](281051 call +(281048 call * bin nTasks) tid)
                      (281056 'end of statement')
                    }
                    (281080 call =(281061 call nextOffsets bin)(281077 IfExpr (281064 call > globalBin 0) then
                    { scopeless
                      (281075 call(281067 call . state c"globalEnds")(281072 call - globalBin 1))
                    } else
                    { scopeless
                      start_n
                    } ))
                    if(281129 call _cond_test debug)
                    {
                      if(281124 call _cond_test(281092 call !=(281090 call(281085 call . state c"globalCounts") globalBin) 0))
                      {
                        (281121 call writeln "tid " tid " nextOffsets[" bin "] = "(281120 call nextOffsets bin))
                      }
                    }
                  }
                  label _continueLabel[281138]
                  _indexOfInterest[281133]
                  _iterator[281134]
                }
                label _breakLabel[281139]
              }
              {
                unknown _indexOfInterest[281284] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[281285] "expr temp" "temp"
                (281294 'move' _iterator[281285](281292 call _getIterator(281191 call(281182 call .(281179 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (281325 call _freeIterator _iterator[281285])
                  }
                }
                { scopeless type
                  (281300 'move' _indexOfInterest[281284](281297 call iteratorIndex _iterator[281285]))
                }
                ForLoop[281286]
                {
                  (281305 call _check_tuple_var_decl _indexOfInterest[281284] 2)
                  unknown i[281311] "index var" "insert auto destroy"
                  (281313 'move' i[281311](281309 call _indexOfInterest[281284] 0))
                  unknown bin[281318] "index var" "insert auto destroy"
                  (281320 'move' bin[281318](281316 call _indexOfInterest[281284] 1))
                  {
                    { scopeless
                      unknown next[281196] "ref var"(281195 call nextOffsets bin)
                      (281199 'end of statement')
                    }
                    if(281263 call _cond_test debug)
                    {
                      (281260 call writeln "tid " tid " dst[" next "] = src[" i "] bin " bin)
                    }
                    (281277 call(281268 call . ShallowCopy c"shallowCopy") dst next src i 1)
                    (281281 call += next 1)
                  }
                  label _continueLabel[281289]
                  _indexOfInterest[281284]
                  _iterator[281285]
                }
                label _breakLabel[281290]
              }
            }
            (281658 call _downEndCount _coforallCount[281655] nil[44])
            (281657 'coforall loop')
            (280985 'actuals list' tiMarkRef[294] state)
          }
          label _continueLabel[281668]
          _indexOfInterest[281663]
          _iterator[281664]
        }
        label _breakLabel[281669]
        Defer
        {
          {
            (281700 call _endCountFree _coforallCount[281655])
          }
        }
        (281705 call _waitEndCount _coforallCount[281655] 1)
      }
    }
    { scopeless
      unknown counts[281738] "ref var"(281735 call . state c"counts")
      (281741 'end of statement')
    }
    Forall {
      induction variables:
        
        unknown bin[281829] "index var" "insert auto destroy"
      iterated expressions:
        (281747 call #(281744 call chpl_build_low_bounded_range 0) nBuckets)
      shadow variables:
      other variables
        forall body
      {
        { scopeless
          unknown total[281750] 0
          (281753 'end of statement')
        }
        {
          unknown _indexOfInterest[281780] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[281781] "expr temp" "temp"
          (281790 'move' _iterator[281781](281788 call _getIterator(281797 call chpl_direct_counted_range_iter 0 nTasks)))
          Defer
          {
            {
              (281813 call _freeIterator _iterator[281781])
            }
          }
          { scopeless type
            (281802 'move' _indexOfInterest[281780](281799 call iteratorIndex _iterator[281781]))
          }
          ForLoop[281782]
          {
            unknown tid[281806] "index var" "insert auto destroy"
            (281808 'move' tid[281806] _indexOfInterest[281780])
            {
              (281776 call += total(281775 call(281764 call . state c"globalCounts")(281772 call +(281769 call * bin nTasks) tid)))
            }
            label _continueLabel[281785]
            _indexOfInterest[281780]
            _iterator[281781]
          }
          label _breakLabel[281786]
        }
        (281825 call =(281823 call counts bin) total)
      }
    }
  }
  function testBucketize[281840](arg start_n[281837] :
  int[13], arg end_n[281843] :
  int[13], arg dst[281849] :
  (281846 call chpl__buildArrayRuntimeType nil[44]), arg src[281855] :
  (281852 call chpl__buildArrayRuntimeType nil[44]), arg bucketizer[281858]:_any[178](?), arg criterion[281860]:_any[178](?), arg startbit[281863] :
  int[13]) : _unknown[51]
  {
    { scopeless
      unknown state[281872](281866 'new'(281871 call TwoArrayBucketizerSharedState(bucketizer = bucketizer)))
      (281875 'end of statement')
    }
    (281886 call bucketize start_n end_n dst src state criterion startbit)
    (281892 return(281889 call . state c"counts"))
  }
  function partitioningSortWithScratchSpaceHandleSampling[281902](arg start_n[281899] :
  int[13], arg end_n[281905] :
  int[13], arg A[281911] :
  (281908 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[281917] :
  (281914 call chpl__buildArrayRuntimeType nil[44]), ref arg state[281921] :
  TwoArrayBucketizerSharedState, arg criterion[281924]:_any[178](?), arg startbit[281927] :
  int[13]) : _unknown[51] "private"
  {
    if(282246 call _cond_test(281944 call isSubtype(281936 'typeof'(281933 call . state c"bucketizer"))(281941 call . SampleSortHelp c"SampleBucketizer")))
    {
      { scopeless
        unknown n[281952](281950 call -(281947 call + 1 end_n) start_n)
        (281955 'end of statement')
      }
      { scopeless
        unknown logNumBuckets[281966](281965 call(281960 call . SampleSortHelp c"computeLogBucketSize") n)
        (281969 'end of statement')
      }
      { scopeless
        unknown numBuckets[281974](281972 call << 1 logNumBuckets)
        (281977 'end of statement')
      }
      { scopeless
        unknown sampleStep[281988](281987 call(281981 call . SampleSortHelp c"chooseSampleStep") n logNumBuckets)
        (281991 'end of statement')
      }
      { scopeless
        unknown sampleSize[281999](281997 call -(281994 call * sampleStep numBuckets) 1)
        (282002 'end of statement')
      }
      if(282047 call _cond_test(282005 call >= sampleSize n))
      {
        if(282029 call _cond_test debug)
        {
          { scopeless
            (282027 call writeln "Reducing sample size because it was too big")
          }
        }
        (282044 call = sampleSize(282043 call max 1(282041 call / n 2)))
      }
      (282062 call(282054 call . SampleSortHelp c"putRandomSampleAtArrayStart") start_n end_n A sampleSize)
      if(282086 call _cond_test debug)
      {
        { scopeless
          (282084 call writeln "recursing to sort the sample")
        }
      }
      if(282141 call _cond_test(282096 call <= sampleSize(282094 call * 1024 1024)))
      {
        (282120 call msbRadixSort start_n(282106 call -(282103 call + start_n sampleSize) 1) A criterion startbit(282112 call . state c"endbit")(settings =(282115 'new'(282118 call MSBRadixSortSettings))))
      }
      {
        (282138 call partitioningSortWithScratchSpace start_n(282131 call -(282128 call + start_n sampleSize) 1) A Scratch state criterion startbit)
      }
      if(282167 call _cond_test debug)
      {
        (282164 call(282149 call . RadixSortHelp c"checkSorted") start_n(282159 call -(282156 call + start_n sampleSize) 1) A criterion startbit)
      }
      (282183 call createSplittersFromSample A(282175 call . state c"bucketizer") criterion start_n sampleSize sampleStep numBuckets)
      if(282242 call _cond_test debug)
      {
        (282209 call writeln "sample bucketizer "(282206 call . state c"bucketizer"))
        (282240 call writef "A %i %i A=%xt\n" start_n end_n(282239 call A(282236 call chpl_build_bounded_range start_n end_n)))
      }
    }
  }
  { scopeless type
    void[4]
  }
  function partitioningSortWithScratchSpace[282260](arg start_n[282257] :
  int[13], arg end_n[282263] :
  int[13], arg A[282269] :
  (282266 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[282275] :
  (282272 call chpl__buildArrayRuntimeType nil[44]), ref arg state[282279] :
  TwoArrayBucketizerSharedState, arg criterion[282282]:_any[178](?), arg startbit[282285] :
  int[13]) : _unknown[51]
  {
    if(282298 call _cond_test(282294 call > startbit(282291 call . state c"endbit")))
    {
      { scopeless
        (282296 return)
      }
    }
    if(282332 call _cond_test(282312 call <(282306 call - end_n start_n)(282309 call . state c"baseCaseSize")))
    {
      (282327 call(282317 call . ShellSort c"shellSort") A criterion(start = start_n)(end = end_n))
      (282330 return)
    }
    if(282377 call _cond_test debug)
    {
      (282360 call writeln "partitioningSortWithScratchSpace(" start_n "," end_n ")")
      (282375 call writef "A %i %i A=%xt\n" start_n end_n(282374 call A(282371 call chpl_build_bounded_range start_n end_n)))
    }
    { scopeless
      const n[282388] "const"(282386 call +(282383 call - end_n start_n) 1)
      (282391 'end of statement')
    }
    { scopeless
      const maxSequentialSize[282414] "const"(282413 call max(282398 call / n(282395 call . state c"nTasks"))(282411 call *(282402 call . state c"nTasks")(282408 call . state c"sequentialSizePerTask")))
      (282417 'end of statement')
    }
    (282439 call(282424 call .(282421 call . state c"bigTasks") c"append")(282427 'new'(282437 call TwoArraySortTask start_n n startbit(inA = 1)(doSort = 1))))
    (282453 call assert(282450 call ==(282446 call .(282443 call . state c"bigTasks") c"size") 1))
    (282469 call assert(282466 call ==(282462 call .(282459 call . state c"smallTasks") c"size") 0))
    {
      unknown tmp[283122] "temp"
      (283158 'move' tmp[283122](283147 call _cond_test(283149 call !(283157 call(283151 call .(283153 call . state c"bigTasks") c"isEmpty")))))
      WhileDo[283127]
      {
        {
          { scopeless
            const task[282493] "const"(282492 call(282488 call .(282483 call . state c"bigTasks") c"pop"))
            (282496 'end of statement')
          }
          { scopeless
            const taskEnd[282511] "const"(282509 call -(282506 call +(282499 call . task c"start")(282503 call . task c"size")) 1)
            (282514 'end of statement')
          }
          (282521 call assert(282517 call . task c"doSort"))
          if(282553 call _cond_test debug)
          {
            (282550 call writeln "doing big task "(282548 call chpl_build_bounded_range(282544 call . task c"start") taskEnd))
          }
          if(282715 call _cond_test(282558 call . task c"inA"))
          {
            (282576 call partitioningSortWithScratchSpaceHandleSampling(282563 call . task c"start") taskEnd A Scratch state criterion(282573 call . task c"startbit"))
            (282594 call bucketize(282581 call . task c"start") taskEnd Scratch A state criterion(282591 call . task c"startbit"))
            if(282634 call _cond_test debug)
            {
              (282631 call writef "pb %i %i Scratch=%xt\n"(282617 call . task c"start") taskEnd(282630 call Scratch(282627 call chpl_build_bounded_range(282623 call . task c"start") taskEnd)))
            }
          }
          {
            (282653 call partitioningSortWithScratchSpaceHandleSampling(282640 call . task c"start") taskEnd Scratch A state criterion(282650 call . task c"startbit"))
            (282671 call bucketize(282658 call . task c"start") taskEnd A Scratch state criterion(282668 call . task c"startbit"))
            if(282711 call _cond_test debug)
            {
              (282708 call writef "pb %i %i A=%xt\n"(282694 call . task c"start") taskEnd(282707 call A(282704 call chpl_build_bounded_range(282700 call . task c"start") taskEnd)))
            }
          }
          { scopeless
            const nowInA[282725] "const"(282723 call !(282720 call . task c"inA"))
            (282728 'end of statement')
          }
          (282780 call =(282732 call . state c"ends")(282778 call +(282773 call function chpl__scan5[282740](arg chpl_toScan[282742]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
          {
            unknown chpl_eltType[282744] "maybe type" "temp"
            { scopeless type
              (282748 'move' chpl_eltType[282744](282750 'typeof'(282752 call chpl__initCopy(282754 call iteratorIndex(282756 call _getIterator chpl_toScan[282742])))))
            }
            const tmp[282745] "const" "temp"
            (282765 'move' tmp[282745](282764 'new'(282763 call SumReduceScanOp(eltType = chpl_eltType[282744])(_chpl_manager = unmanaged[220](?)))))
            (282767 return(282769 call chpl__scanIterator tmp[282745] chpl_toScan[282742]))
          }(282737 call . state c"counts"))(282775 call . task c"start")))
          { scopeless
            const nBuckets[282792] "const"(282791 call(282787 call .(282784 call . state c"bucketizer") c"getNumBuckets"))
            (282795 'end of statement')
          }
          {
            unknown _indexOfInterest[283082] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[283083] "expr temp" "temp"
            (283092 'move' _iterator[283083](283090 call _getIterator(283099 call chpl_direct_counted_range_iter 0 nBuckets)))
            Defer
            {
              {
                (283115 call _freeIterator _iterator[283083])
              }
            }
            { scopeless type
              (283104 'move' _indexOfInterest[283082](283101 call iteratorIndex _iterator[283083]))
            }
            ForLoop[283084]
            {
              unknown bin[283108] "index var" "insert auto destroy"
              (283110 'move' bin[283108] _indexOfInterest[283082])
              {
                { scopeless
                  const binSize[282810] "const"(282809 call(282804 call . state c"counts") bin)
                  (282813 'end of statement')
                }
                { scopeless
                  const binStart[282825] "const"(282823 call -(282821 call(282816 call . state c"ends") bin) binSize)
                  (282828 'end of statement')
                }
                { scopeless
                  const binEnd[282836] "const"(282834 call -(282831 call + binStart binSize) 1)
                  (282839 'end of statement')
                }
                { scopeless
                  const binStartBit[282855] "const"(282854 call(282846 call .(282841 call . state c"bucketizer") c"getNextStartBit")(282850 call . task c"startbit"))
                  (282858 'end of statement')
                }
                { scopeless
                  const sortit[282876] "const"(282875 call(282870 call .(282869 call(282865 call .(282860 call . state c"bucketizer") c"getBinsToRecursivelySort")) c"contains") bin)
                  (282879 'end of statement')
                }
                if(283077 call _cond_test(282882 call == binSize 0))
                {
                }
                {
                  { scopeless
                    if(283072 call _cond_test(282891 call &&(282886 call ! nowInA)(282889 call ! sortit)))
                    {
                      (282910 call(282897 call .(282894 call . state c"smallTasks") c"append")(282900 'new'(282908 call TwoArraySortTask binStart binSize binStartBit nowInA sortit)))
                    }
                    {
                      { scopeless
                        if(283068 call _cond_test(282930 call ||(282924 call ||(282918 call > binStartBit(282915 call . state c"endbit"))(282922 call >= binStart binEnd))(282928 call <= binSize maxSequentialSize)))
                        {
                          if(282984 call _cond_test(282937 call && debug(282935 call > binSize 0)))
                          {
                            (282981 call writeln "handling bin " bin " "(282962 call chpl_build_bounded_range binStart binEnd) " as small")
                          }
                          (283006 call(282993 call .(282990 call . state c"smallTasks") c"append")(282996 'new'(283004 call TwoArraySortTask binStart binSize binStartBit nowInA sortit)))
                        }
                        {
                          if(283044 call _cond_test(283013 call && debug(283011 call > binSize 0)))
                          {
                            (283041 call writeln "handling bin " bin " "(283022 call chpl_build_bounded_range binStart binEnd) " as big")
                          }
                          (283066 call(283053 call .(283050 call . state c"bigTasks") c"append")(283056 'new'(283064 call TwoArraySortTask binStart binSize binStartBit nowInA sortit)))
                        }
                      }
                    }
                  }
                }
              }
              label _continueLabel[283087]
              _indexOfInterest[283082]
              _iterator[283083]
            }
            label _breakLabel[283088]
          }
        }
        label _continueLabel[283125]
        (283142 'move' tmp[283122](283131 call _cond_test(283133 call !(283141 call(283135 call .(283137 call . state c"bigTasks") c"isEmpty")))))
        tmp[283122]
      }
      label _breakLabel[283126]
    }
    Forall {
      induction variables:
        
        unknown task[283305] "index var" "insert auto destroy"
      iterated expressions:
        (283163 call . state c"smallTasks")
      shadow variables:
      other variables
        forall body
      {
        { scopeless
          const size[283170] "const"(283167 call . task c"size")
          (283173 'end of statement')
        }
        { scopeless
          const taskEnd[283185] "const"(283183 call -(283180 call +(283176 call . task c"start") size) 1)
          (283188 'end of statement')
        }
        if(283300 call _cond_test(283191 call > size 0))
        {
          if(283218 call _cond_test(283197 call !(283194 call . task c"inA")))
          {
            (283215 call(283200 call . ShallowCopy c"shallowCopy") A(283206 call . task c"start") Scratch(283211 call . task c"start") size)
          }
          if(283261 call _cond_test debug)
          {
            (283258 call writef "doing small task %i %i A=%xt\n"(283244 call . task c"start") taskEnd(283257 call A(283254 call chpl_build_bounded_range(283250 call . task c"start") taskEnd)))
          }
          if(283296 call _cond_test(283266 call . task c"doSort"))
          {
            (283293 call msbRadixSort(283271 call . task c"start") taskEnd A criterion(283279 call . task c"startbit")(283283 call . state c"endbit")(settings =(283286 'new'(283291 call MSBRadixSortSettings(alwaysSerial = 1)))))
          }
        }
      }
    }
    if(283382 call _cond_test debug)
    {
      (283337 call writef "ps %i %i A=%xt\n" start_n end_n(283336 call A(283333 call chpl_build_bounded_range start_n end_n)))
      (283368 call writef "ps %i %i Scratch=%xt\n" start_n end_n(283367 call Scratch(283364 call chpl_build_bounded_range start_n end_n)))
      (283380 call(283371 call . RadixSortHelp c"checkSorted") start_n end_n A criterion startbit)
    }
  }
  { scopeless type
    void[4]
  }
  function distributedPartitioningSortWithScratchSpaceBaseCase[283395](arg start_n[283392] :
  int[13], arg end_n[283398] :
  int[13], arg A[283404] :
  (283401 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283410] :
  (283407 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283414] :
  TwoArrayDistributedBucketizerSharedState, arg criterion[283417]:_any[178](?), arg startbit[283420] :
  int[13]) : _unknown[51] "private"
  {
    if(283433 call _cond_test(283429 call > startbit(283426 call . state c"endbit")))
    {
      { scopeless
        (283431 return)
      }
    }
    { scopeless
      const n[283446] "const"(283444 call +(283441 call - end_n start_n) 1)
      (283449 'end of statement')
    }
    { scopeless
      const localSubdomain[283458] "const"(283457 call(283453 call . A c"localSubdomain"))
      (283461 'end of statement')
    }
    { scopeless
      const curDomain[283469] "const"(283467 call chpl__buildDomainExpr(283464 call chpl_build_bounded_range start_n end_n))
      (283472 'end of statement')
    }
    { scopeless
      const intersect[283477] "const"(283476 call curDomain localSubdomain)
      (283480 'end of statement')
    }
    if(283641 call _cond_test(283483 call == curDomain intersect))
    {
      if(283539 call _cond_test(283490 call > n(283487 call . state c"baseCaseSize")))
      {
        (283516 call msbRadixSort start_n end_n(283504 call(283499 call . A c"localSlice") curDomain) criterion startbit(283508 call . state c"endbit")(settings =(283511 'new'(283514 call MSBRadixSortSettings))))
      }
      {
        (283536 call(283520 call . ShellSort c"shellSort")(283529 call(283524 call . A c"localSlice") curDomain) criterion(start = start_n)(end = end_n))
      }
    }
    {
      { scopeless
        const size[283551] "const"(283549 call +(283546 call - end_n start_n) 1)
        (283554 'end of statement')
      }
      { scopeless
        unknown LocalA[283569](283567 call chpl__buildArrayRuntimeType(283565 call chpl__ensureDomainExpr(283558 call chpl_build_bounded_range start_n end_n))(283562 call . A c"eltType"))
        (283572 'end of statement')
      }
      (283583 call(283574 call . ShallowCopy c"shallowCopy") LocalA start_n A start_n size)
      if(283625 call _cond_test(283590 call > n(283587 call . state c"baseCaseSize")))
      {
        (283608 call msbRadixSort start_n end_n LocalA criterion startbit(283600 call . state c"endbit")(settings =(283603 'new'(283606 call MSBRadixSortSettings))))
      }
      {
        (283622 call(283612 call . ShellSort c"shellSort") LocalA criterion(start = start_n)(end = end_n))
      }
      (283639 call(283630 call . ShallowCopy c"shallowCopy") A start_n LocalA start_n size)
    }
    if(283658 call _cond_test debug)
    {
      (283655 call(283647 call . RadixSortHelp c"checkSorted") start_n end_n A criterion)
    }
    (283662 return)
  }
  { scopeless type
    void[4]
  }
  function distributedPartitioningSortWithScratchSpaceHandleSampling[283673](arg start_n[283670] :
  int[13], arg end_n[283676] :
  int[13], arg A[283682] :
  (283679 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283688] :
  (283685 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283692] :
  TwoArrayDistributedBucketizerSharedState, arg criterion[283695]:_any[178](?), arg startbit[283698] :
  int[13]) : _unknown[51] "private"
  {
    if(284040 call _cond_test(283724 call isSubtype(283718 'typeof'(283715 call .(283712 call .(283711 call(283706 call . state c"perLocale") 0) c"compat") c"bucketizer"))(283721 call . SampleSortHelp c"SampleBucketizer")))
    {
      { scopeless
        unknown n[283732](283730 call -(283727 call + 1 end_n) start_n)
        (283735 'end of statement')
      }
      { scopeless
        unknown logNumBuckets[283744](283743 call(283738 call . SampleSortHelp c"computeLogBucketSize") n)
        (283747 'end of statement')
      }
      { scopeless
        unknown numBuckets[283752](283750 call << 1 logNumBuckets)
        (283755 'end of statement')
      }
      { scopeless
        unknown sampleStep[283764](283763 call(283757 call . SampleSortHelp c"chooseSampleStep") n logNumBuckets)
        (283767 'end of statement')
      }
      { scopeless
        unknown sampleSize[283775](283773 call -(283770 call * sampleStep numBuckets) 1)
        (283778 'end of statement')
      }
      if(283807 call _cond_test(283781 call >= sampleSize n))
      {
        if(283789 call _cond_test debug)
        {
          { scopeless
            (283787 call writeln "Reducing sample size because it was too big")
          }
        }
        (283804 call = sampleSize(283803 call max 1(283801 call / n 2)))
      }
      (283820 call(283812 call . SampleSortHelp c"putRandomSampleAtArrayStart") start_n end_n A sampleSize)
      if(283828 call _cond_test debug)
      {
        { scopeless
          (283826 call writeln "recursing to sort the sample")
        }
      }
      if(283876 call _cond_test(283838 call <= sampleSize(283836 call * 1024 1024)))
      {
        (283855 call distributedPartitioningSortWithScratchSpaceBaseCase start_n(283848 call -(283845 call + start_n sampleSize) 1) A Scratch state criterion startbit)
      }
      {
        (283873 call distributedPartitioningSortWithScratchSpace start_n(283866 call -(283863 call + start_n sampleSize) 1) A Scratch state criterion startbit)
      }
      if(283900 call _cond_test debug)
      {
        (283897 call(283882 call . RadixSortHelp c"checkSorted") start_n(283892 call -(283889 call + start_n sampleSize) 1) A criterion startbit)
      }
      (283925 call createSplittersFromSample A(283917 call .(283914 call .(283913 call(283908 call . state c"perLocale") 0) c"compat") c"bucketizer") criterion start_n sampleSize sampleStep numBuckets)
      if(283961 call _cond_test debug)
      {
        (283944 call writeln "sample bucketizer "(283941 call .(283938 call .(283937 call(283932 call . state c"perLocale") 0) c"compat") c"bucketizer"))
        (283959 call writef "A %i %i A=%xt\n" start_n end_n(283958 call A(283955 call chpl_build_bounded_range start_n end_n)))
      }
      {
        unknown _indexOfInterest[283999] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[284000] "expr temp" "temp"
        (284009 'move' _iterator[284000](284007 call _getIterator(284017 call chpl_direct_range_iter 1(284014 call . state c"numLocales") 1)))
        Defer
        {
          {
            (284033 call _freeIterator _iterator[284000])
          }
        }
        { scopeless type
          (284022 'move' _indexOfInterest[283999](284019 call iteratorIndex _iterator[284000]))
        }
        ForLoop[284001]
        {
          unknown lid[284026] "index var" "insert auto destroy"
          (284028 'move' lid[284026] _indexOfInterest[283999])
          {
            (283995 call =(283982 call .(283981 call(283976 call . state c"perLocale") lid) c"bucketizer")(283992 call .(283991 call(283986 call . state c"perLocale") 0) c"bucketizer"))
          }
          label _continueLabel[284004]
          _indexOfInterest[283999]
          _iterator[284000]
        }
        label _breakLabel[284005]
      }
    }
  }
  { scopeless type
    void[4]
  }
  function distributedPartitioningSortWithScratchSpace[284054](arg start_n[284051] :
  int[13], arg end_n[284057] :
  int[13], arg A[284063] :
  (284060 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[284069] :
  (284066 call chpl__buildArrayRuntimeType nil[44]), ref arg state[284073] :
  TwoArrayDistributedBucketizerSharedState, arg criterion[284076]:_any[178](?), arg startbit[284079] :
  int[13]) : _unknown[51]
  {
    if(284115 call _cond_test(284091 call !(284090 call(284086 call . A c"hasSingleLocalSubdomain"))))
    {
      (284112 call compilerError "distributedPartitioningSortWithScratchSpace needs single local subdomain")
    }
    if(284129 call _cond_test(284125 call > startbit(284122 call . state c"endbit")))
    {
      { scopeless
        (284127 return)
      }
    }
    if(284158 call _cond_test(284142 call <(284136 call - end_n start_n)(284139 call . state c"baseCaseSize")))
    {
      (284153 call distributedPartitioningSortWithScratchSpaceBaseCase start_n end_n A Scratch state criterion startbit)
      (284156 return)
    }
    if(284227 call _cond_test debug)
    {
      (284224 call writeln "in distributed radix sort " start_n ".." end_n " startbit " startbit " endbit "(284221 call . state c"endbit"))
    }
    { scopeless
      const n[284238] "const"(284236 call +(284233 call - end_n start_n) 1)
      (284241 'end of statement')
    }
    (284261 call(284248 call .(284245 call . state c"distTasks") c"append")(284251 'new'(284259 call TwoArraySortTask start_n n startbit 1 1)))
    (284275 call assert(284272 call ==(284268 call .(284265 call . state c"distTasks") c"size") 1))
    {
      unknown tmp[286899] "temp"
      (286935 'move' tmp[286899](286924 call _cond_test(286926 call !(286934 call(286928 call .(286930 call . state c"distTasks") c"isEmpty")))))
      WhileDo[286904]
      {
        {
          { scopeless
            const task[284297] "const"(284296 call(284292 call .(284289 call . state c"distTasks") c"pop"))
            (284300 'end of statement')
          }
          { scopeless
            const taskStart[284306] "const"(284303 call . task c"start")
            (284309 'end of statement')
          }
          { scopeless
            const taskEnd[284323] "const"(284321 call -(284318 call +(284311 call . task c"start")(284315 call . task c"size")) 1)
            (284326 'end of statement')
          }
          (284333 call assert(284329 call . task c"doSort"))
          (284341 call assert(284337 call . task c"inA"))
          (284358 call distributedPartitioningSortWithScratchSpaceHandleSampling(284345 call . task c"start") taskEnd A Scratch state criterion(284355 call . task c"startbit"))
          { scopeless
            const nBuckets[284378] "const"(284377 call(284373 call .(284370 call .(284367 call .(284366 call(284361 call . state c"perLocale") 0) c"compat") c"bucketizer") c"getNumBuckets"))
            (284381 'end of statement')
          }
          { scopeless
            const nTasks[284386] "const"(284383 call . state c"numLocales")
            (284389 'end of statement')
          }
          {
            unknown tmpIter[284722] "expr temp" "maybe ref" "no copy" "temp"
            (284725 'move' tmpIter[284722](284407 call _build_tuple(284402 call(284398 call . A c"targetLocales"))(284405 call chpl_build_low_bounded_range 0)))
            unknown isRngDomArr[285122] "maybe param" "temp"
            (285137 'move' isRngDomArr[285122](285135 call ||(285124 call isBoundedRange tmpIter[284722])(285133 call ||(285127 call isDomain tmpIter[284722])(285130 call isArray tmpIter[284722]))))
            if isRngDomArr[285122]
            {
              const _coforallCount[284966] "const" "end count" "temp"
              (285045 'move' _coforallCount[284966](285042 call _endCountAlloc 0))
              unknown numTasks[284967] "temp"
              (285029 'move' numTasks[284967](285025 call . tmpIter[284722] c"size"))
              (285020 call _upEndCount _coforallCount[284966] 0 numTasks[284967])
              unknown _indexOfInterest[284973] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[284974] "expr temp" "temp"
              (284983 'move' _iterator[284974](284981 call _getIteratorZip tmpIter[284722]))
              Defer
              {
                {
                  (285013 call _freeIterator _iterator[284974])
                }
              }
              { scopeless type
                (284988 'move' _indexOfInterest[284973](284985 call iteratorIndex _iterator[284974]))
              }
              ForLoop[284975]
              {
                (284993 call _check_tuple_var_decl _indexOfInterest[284973] 2)
                unknown loc[284999] "coforall index var" "index var" "insert auto destroy"
                (285001 'move' loc[284999](284997 call _indexOfInterest[284973] 0))
                unknown tid[285006] "coforall index var" "index var" "insert auto destroy"
                (285008 'move' tid[285006](285004 call _indexOfInterest[284973] 1))
                { scopeless
                  { scopeless
                    const tmp[284731] "const" "temp"
                    (284733 'move' tmp[284731](284735 'deref'(284736 '_wide_get_locale' loc)))
                    {
                      {
                        { scopeless
                          const localDomain[284744] "const"(284750 call(284749 call(284746 call . A c"localSubdomain"))(284752 call chpl_build_bounded_range(284754 call . task c"start") taskEnd))
                          (284759 'end of statement')
                        }
                        { scopeless
                          unknown localSrc[284761] "ref var"(284766 call(284763 call . A c"localSlice") localDomain)
                          (284769 'end of statement')
                        }
                        { scopeless
                          unknown localDst[284771] "ref var"(284776 call(284773 call . Scratch c"localSlice") localDomain)
                          (284779 'end of statement')
                        }
                        (284781 call bucketize(284783 call . localDomain c"alignedLow")(284787 call . localDomain c"alignedHigh") localDst localSrc(284793 call .(284798 call(284795 call . state c"perLocale") tid) c"compat") criterion(284803 call . task c"startbit"))
                        { scopeless
                          unknown localCounts[284807] "ref var"(284809 call .(284811 call .(284816 call(284813 call . state c"perLocale") tid) c"compat") c"counts")
                          (284821 'end of statement')
                        }
                        if(284823 call _cond_test debug)
                        {
                          { scopeless
                            unknown total[284827] 0
                            (284830 'end of statement')
                          }
                          {
                            unknown _indexOfInterest[284832] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[284834] "expr temp" "temp"
                            (284836 'move' _iterator[284834](284839 call _getIterator(284841 call chpl_direct_counted_range_iter 0 nBuckets)))
                            Defer
                            {
                              {
                                (284846 call _freeIterator _iterator[284834])
                              }
                            }
                            { scopeless type
                              (284850 'move' _indexOfInterest[284832](284853 call iteratorIndex _iterator[284834]))
                            }
                            ForLoop[284855]
                            {
                              unknown bin[284858] "index var" "insert auto destroy"
                              (284860 'move' bin[284858] _indexOfInterest[284832])
                              {
                                if(284865 call _cond_test(284867 call >(284869 call localCounts bin) 0))
                                {
                                  (284874 call writeln "localCounts[" bin "]="(284879 call localCounts bin))
                                  (284882 call += total(284885 call localCounts bin))
                                }
                              }
                              label _continueLabel[284888]
                              _indexOfInterest[284832]
                              _iterator[284834]
                            }
                            label _breakLabel[284890]
                          }
                          (284893 call assert(284895 call == total(284898 call . localDomain c"size")))
                        }
                        {
                          unknown _indexOfInterest[284903] "an _indexOfInterest or chpl__followIdx variable" "temp"
                          unknown _iterator[284905] "expr temp" "temp"
                          (284907 'move' _iterator[284905](284910 call _getIterator(284912 call vectorizeOnly(284914 call #(284916 call chpl_build_low_bounded_range 0) nBuckets))))
                          Defer
                          {
                            {
                              (284921 call _freeIterator _iterator[284905])
                            }
                          }
                          { scopeless type
                            (284925 'move' _indexOfInterest[284903](284928 call iteratorIndex _iterator[284905]))
                          }
                          ForLoop[284930]
                          {
                            unknown bin[284933] "index var" "insert auto destroy"
                            (284935 'move' bin[284933] _indexOfInterest[284903])
                            {
                              (284940 call =(284950 call(284942 call .(284947 call(284944 call . state c"perLocale") 0) c"globalCounts")(284952 call +(284954 call * bin nTasks) tid))(284959 call localCounts bin))
                            }
                            label _continueLabel[284961]
                            _indexOfInterest[284903]
                            _iterator[284905]
                          }
                          label _breakLabel[284963]
                        }
                      }
                      (284968 call _downEndCount _coforallCount[284966] nil[44])
                      (284739 'coforall on block' 0 tmp[284731])
                      (284727 'actuals list' tiMarkRef[294] state)
                    }
                  }
                }
                label _continueLabel[284978]
                _indexOfInterest[284973]
                _iterator[284974]
              }
              label _breakLabel[284979]
              Defer
              {
                {
                  (285032 call _endCountFree _coforallCount[284966])
                }
              }
              (285037 call _waitEndCount _coforallCount[284966] 0 numTasks[284967])
            }
            {
              const _coforallCount[285049] "const" "end count" "temp"
              (285119 'move' _coforallCount[285049](285116 call _endCountAlloc 0))
              unknown _indexOfInterest[285056] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[285057] "expr temp" "temp"
              (285066 'move' _iterator[285057](285064 call _getIteratorZip tmpIter[284722]))
              Defer
              {
                {
                  (285096 call _freeIterator _iterator[285057])
                }
              }
              { scopeless type
                (285071 'move' _indexOfInterest[285056](285068 call iteratorIndex _iterator[285057]))
              }
              ForLoop[285058]
              {
                (285076 call _check_tuple_var_decl _indexOfInterest[285056] 2)
                unknown loc[285082] "coforall index var" "index var" "insert auto destroy"
                (285084 'move' loc[285082](285080 call _indexOfInterest[285056] 0))
                unknown tid[285089] "coforall index var" "index var" "insert auto destroy"
                (285091 'move' tid[285089](285087 call _indexOfInterest[285056] 1))
                (285103 call _upEndCount _coforallCount[285049] 0)
                { scopeless
                  { scopeless
                    const tmp[284712] "const" "temp"
                    (284714 'move' tmp[284712](284710 'deref'(284709 '_wide_get_locale' loc)))
                    {
                      {
                        { scopeless
                          const localDomain[284432] "const"(284431 call(284422 call(284418 call . A c"localSubdomain"))(284428 call chpl_build_bounded_range(284424 call . task c"start") taskEnd))
                          (284435 'end of statement')
                        }
                        { scopeless
                          unknown localSrc[284444] "ref var"(284443 call(284438 call . A c"localSlice") localDomain)
                          (284447 'end of statement')
                        }
                        { scopeless
                          unknown localDst[284455] "ref var"(284454 call(284449 call . Scratch c"localSlice") localDomain)
                          (284458 'end of statement')
                        }
                        (284486 call bucketize(284461 call . localDomain c"alignedLow")(284466 call . localDomain c"alignedHigh") localDst localSrc(284478 call .(284477 call(284472 call . state c"perLocale") tid) c"compat") criterion(284483 call . task c"startbit"))
                        { scopeless
                          unknown localCounts[284501] "ref var"(284498 call .(284495 call .(284494 call(284489 call . state c"perLocale") tid) c"compat") c"counts")
                          (284504 'end of statement')
                        }
                        if(284634 call _cond_test debug)
                        {
                          { scopeless
                            unknown total[284507] 0
                            (284510 'end of statement')
                          }
                          {
                            unknown _indexOfInterest[284583] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[284584] "expr temp" "temp"
                            (284593 'move' _iterator[284584](284591 call _getIterator(284600 call chpl_direct_counted_range_iter 0 nBuckets)))
                            Defer
                            {
                              {
                                (284616 call _freeIterator _iterator[284584])
                              }
                            }
                            { scopeless type
                              (284605 'move' _indexOfInterest[284583](284602 call iteratorIndex _iterator[284584]))
                            }
                            ForLoop[284585]
                            {
                              unknown bin[284609] "index var" "insert auto destroy"
                              (284611 'move' bin[284609] _indexOfInterest[284583])
                              {
                                if(284578 call _cond_test(284524 call >(284522 call localCounts bin) 0))
                                {
                                  (284567 call writeln "localCounts[" bin "]="(284566 call localCounts bin))
                                  (284575 call += total(284574 call localCounts bin))
                                }
                              }
                              label _continueLabel[284588]
                              _indexOfInterest[284583]
                              _iterator[284584]
                            }
                            label _breakLabel[284589]
                          }
                          (284632 call assert(284629 call == total(284626 call . localDomain c"size")))
                        }
                        {
                          unknown _indexOfInterest[284675] "an _indexOfInterest or chpl__followIdx variable" "temp"
                          unknown _iterator[284676] "expr temp" "temp"
                          (284685 'move' _iterator[284676](284683 call _getIterator(284647 call vectorizeOnly(284644 call #(284641 call chpl_build_low_bounded_range 0) nBuckets))))
                          Defer
                          {
                            {
                              (284702 call _freeIterator _iterator[284676])
                            }
                          }
                          { scopeless type
                            (284691 'move' _indexOfInterest[284675](284688 call iteratorIndex _iterator[284676]))
                          }
                          ForLoop[284677]
                          {
                            unknown bin[284695] "index var" "insert auto destroy"
                            (284697 'move' bin[284695] _indexOfInterest[284675])
                            {
                              (284671 call =(284666 call(284655 call .(284654 call(284649 call . state c"perLocale") 0) c"globalCounts")(284663 call +(284660 call * bin nTasks) tid))(284670 call localCounts bin))
                            }
                            label _continueLabel[284680]
                            _indexOfInterest[284675]
                            _iterator[284676]
                          }
                          label _breakLabel[284681]
                        }
                      }
                      (285051 call _downEndCount _coforallCount[285049] nil[44])
                      (284717 'coforall on block' 0 tmp[284712])
                      (284413 'actuals list' tiMarkRef[294] state)
                    }
                  }
                }
                label _continueLabel[285061]
                _indexOfInterest[285056]
                _iterator[285057]
              }
              label _breakLabel[285062]
              Defer
              {
                {
                  (285107 call _endCountFree _coforallCount[285049])
                }
              }
              (285112 call _waitEndCount _coforallCount[285049] 0)
            }
          }
          if(285174 call _cond_test debug)
          {
            (285171 call writef "after bucketize local portions, Scratch is %xt\n"(285170 call Scratch(285167 call chpl_build_bounded_range(285163 call . task c"start") taskEnd)))
          }
          (285239 call =(285185 call .(285184 call(285179 call . state c"perLocale") 0) c"globalEnds")(285237 call +(285232 call function chpl__scan6[285199](arg chpl_toScan[285201]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
          {
            unknown chpl_eltType[285203] "maybe type" "temp"
            { scopeless type
              (285207 'move' chpl_eltType[285203](285209 'typeof'(285211 call chpl__initCopy(285213 call iteratorIndex(285215 call _getIterator chpl_toScan[285201])))))
            }
            const tmp[285204] "const" "temp"
            (285224 'move' tmp[285204](285223 'new'(285222 call SumReduceScanOp(eltType = chpl_eltType[285203])(_chpl_manager = unmanaged[220](?)))))
            (285226 return(285228 call chpl__scanIterator tmp[285204] chpl_toScan[285201]))
          }(285196 call .(285195 call(285190 call . state c"perLocale") 0) c"globalCounts"))(285234 call . task c"start")))
          Forall {
            induction variables:
              
              unknown loc[285321] "index var" "insert auto destroy"
              
              unknown tid[285323] "index var" "insert auto destroy"
            iterated expressions:
              (285252 call(285248 call . A c"targetLocales"))
              (285255 call chpl_build_low_bounded_range 0)
            shadow variables:
              state[285259] 'ref' intent
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              if(285315 call _cond_test(285266 call != tid 0))
              {
                (285288 call =(285275 call .(285274 call(285269 call . state c"perLocale") tid) c"globalCounts")(285285 call .(285284 call(285279 call . state c"perLocale") 0) c"globalCounts"))
                (285312 call =(285299 call .(285298 call(285293 call . state c"perLocale") tid) c"globalEnds")(285309 call .(285308 call(285303 call . state c"perLocale") 0) c"globalEnds"))
              }
            }
          }
          if(285508 call _cond_test debug)
          {
            { scopeless
              unknown total[285328] 0
              (285331 'end of statement')
            }
            {
              unknown _indexOfInterest[285454] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[285455] "expr temp" "temp"
              (285464 'move' _iterator[285455](285462 call _getIterator(285474 call chpl_direct_counted_range_iter 0(285470 call . state c"countsSize"))))
              Defer
              {
                {
                  (285490 call _freeIterator _iterator[285455])
                }
              }
              { scopeless type
                (285479 'move' _indexOfInterest[285454](285476 call iteratorIndex _iterator[285455]))
              }
              ForLoop[285456]
              {
                unknown i[285483] "index var" "insert auto destroy"
                (285485 'move' i[285483] _indexOfInterest[285454])
                {
                  if(285449 call _cond_test(285357 call !=(285355 call(285350 call .(285349 call(285344 call . state c"perLocale") 0) c"globalCounts") i) 0))
                  {
                    (285373 call += total(285372 call(285367 call .(285366 call(285361 call . state c"perLocale") 0) c"globalCounts") i))
                    (285411 call writeln "state.globalCounts[" i "]="(285410 call(285405 call .(285404 call(285399 call . state c"perLocale") 0) c"globalCounts") i))
                    (285447 call writeln "state.globalEnds[" i "]="(285446 call(285441 call .(285440 call(285435 call . state c"perLocale") 0) c"globalEnds") i))
                  }
                }
                label _continueLabel[285459]
                _indexOfInterest[285454]
                _iterator[285455]
              }
              label _breakLabel[285460]
            }
            (285506 call assert(285503 call == total(285500 call . task c"size")))
          }
          {
            unknown tmpIter[285986] "expr temp" "maybe ref" "no copy" "temp"
            (285989 'move' tmpIter[285986](285527 call _build_tuple(285522 call(285518 call . A c"targetLocales"))(285525 call chpl_build_low_bounded_range 0)))
            unknown isRngDomArr[286477] "maybe param" "temp"
            (286492 'move' isRngDomArr[286477](286490 call ||(286479 call isBoundedRange tmpIter[285986])(286488 call ||(286482 call isDomain tmpIter[285986])(286485 call isArray tmpIter[285986]))))
            if isRngDomArr[286477]
            {
              const _coforallCount[286321] "const" "end count" "temp"
              (286400 'move' _coforallCount[286321](286397 call _endCountAlloc 0))
              unknown numTasks[286322] "temp"
              (286384 'move' numTasks[286322](286380 call . tmpIter[285986] c"size"))
              (286375 call _upEndCount _coforallCount[286321] 0 numTasks[286322])
              unknown _indexOfInterest[286328] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[286329] "expr temp" "temp"
              (286338 'move' _iterator[286329](286336 call _getIteratorZip tmpIter[285986]))
              Defer
              {
                {
                  (286368 call _freeIterator _iterator[286329])
                }
              }
              { scopeless type
                (286343 'move' _indexOfInterest[286328](286340 call iteratorIndex _iterator[286329]))
              }
              ForLoop[286330]
              {
                (286348 call _check_tuple_var_decl _indexOfInterest[286328] 2)
                unknown loc[286354] "coforall index var" "index var" "insert auto destroy"
                (286356 'move' loc[286354](286352 call _indexOfInterest[286328] 0))
                unknown tid[286361] "coforall index var" "index var" "insert auto destroy"
                (286363 'move' tid[286361](286359 call _indexOfInterest[286328] 1))
                { scopeless
                  { scopeless
                    const tmp[285995] "const" "temp"
                    (285997 'move' tmp[285995](285999 'deref'(286000 '_wide_get_locale' loc)))
                    {
                      {
                        { scopeless
                          const globalCounts[286008] "const" "ref var"(286010 call .(286015 call(286012 call . state c"perLocale") tid) c"globalCounts")
                          (286019 'end of statement')
                        }
                        { scopeless
                          const globalEnds[286021] "const" "ref var"(286023 call .(286028 call(286025 call . state c"perLocale") tid) c"globalEnds")
                          (286032 'end of statement')
                        }
                        { scopeless
                          const localSubdomain[286034] "const"(286040 call(286039 call(286036 call . A c"localSubdomain"))(286042 call chpl_build_bounded_range(286044 call . task c"start") taskEnd))
                          (286049 'end of statement')
                        }
                        { scopeless
                          unknown localOffsets[286051] "ref var"(286053 call .(286055 call .(286060 call(286057 call . state c"perLocale") tid) c"compat") c"counts")
                          (286065 'end of statement')
                        }
                        {
                          { scopeless
                            unknown offset[286068](286070 call . localSubdomain c"low")
                            (286074 'end of statement')
                          }
                          {
                            unknown _indexOfInterest[286076] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[286078] "expr temp" "temp"
                            (286080 'move' _iterator[286078](286083 call _getIterator(286085 call chpl_direct_counted_range_iter 0 nBuckets)))
                            Defer
                            {
                              {
                                (286090 call _freeIterator _iterator[286078])
                              }
                            }
                            { scopeless type
                              (286094 'move' _indexOfInterest[286076](286097 call iteratorIndex _iterator[286078]))
                            }
                            ForLoop[286099]
                            {
                              unknown bin[286102] "index var" "insert auto destroy"
                              (286104 'move' bin[286102] _indexOfInterest[286076])
                              {
                                (286109 call =(286111 call localOffsets bin) offset)
                                (286115 call += offset(286118 call globalCounts(286120 call +(286122 call * bin nTasks) tid)))
                              }
                              label _continueLabel[286126]
                              _indexOfInterest[286076]
                              _iterator[286078]
                            }
                            label _breakLabel[286128]
                          }
                        }
                        Forall {
                          induction variables:
                            
                            unknown bin[286312] "index var" "insert auto destroy"
                          iterated expressions:
                            (286315 call #(286317 call chpl_build_low_bounded_range 0) nBuckets)
                          shadow variables:
                          other variables
                            forall body
                          {
                            { scopeless
                              unknown size[286132](286134 call globalCounts(286136 call +(286138 call * bin nTasks) tid))
                              (286143 'end of statement')
                            }
                            if(286145 call _cond_test(286147 call > size 0))
                            {
                              { scopeless
                                unknown localStart[286152](286154 call localOffsets bin)
                                (286157 'end of statement')
                              }
                              { scopeless
                                unknown localEnd[286159](286161 call -(286163 call + localStart size) 1)
                                (286168 'end of statement')
                              }
                              { scopeless
                                unknown globalStart[286170](286196 IfExpr (286172 call >(286174 call +(286176 call * bin nTasks) tid) 0) then
                                { scopeless
                                  (286183 call globalEnds(286185 call -(286187 call +(286189 call * bin nTasks) tid) 1))
                                } else
                                { scopeless
                                  taskStart
                                } )
                                (286198 'end of statement')
                              }
                              { scopeless
                                unknown globalEnd[286200](286202 call -(286204 call globalEnds(286206 call +(286208 call * bin nTasks) tid)) 1)
                                (286214 'end of statement')
                              }
                              if(286216 call _cond_test debug)
                              {
                                (286220 call writeln "bin " bin " tid " tid " range "(286227 call chpl_build_bounded_range taskStart taskEnd) " A[" globalStart ".." globalEnd "] = Scratch[" localStart ".." localEnd "]")
                                (286240 call assert(286242 call ==(286244 call globalCounts(286246 call +(286248 call * bin nTasks) tid))(286261 call(286253 call .(286258 call(286255 call . state c"perLocale") 0) c"globalCounts")(286263 call +(286265 call * bin nTasks) tid))))
                                (286270 call assert(286272 call ==(286274 call globalEnds(286276 call +(286278 call * bin nTasks) tid))(286291 call(286283 call .(286288 call(286285 call . state c"perLocale") 0) c"globalEnds")(286293 call +(286295 call * bin nTasks) tid))))
                              }
                              (286304 call(286301 call . ShallowCopy c"shallowCopy") A globalStart Scratch localStart size)
                            }
                          }
                        }
                      }
                      (286323 call _downEndCount _coforallCount[286321] nil[44])
                      (286003 'coforall on block' 0 tmp[285995])
                      (285991 'actuals list' tiMarkRef[294] state)
                    }
                  }
                }
                label _continueLabel[286333]
                _indexOfInterest[286328]
                _iterator[286329]
              }
              label _breakLabel[286334]
              Defer
              {
                {
                  (286387 call _endCountFree _coforallCount[286321])
                }
              }
              (286392 call _waitEndCount _coforallCount[286321] 0 numTasks[286322])
            }
            {
              const _coforallCount[286404] "const" "end count" "temp"
              (286474 'move' _coforallCount[286404](286471 call _endCountAlloc 0))
              unknown _indexOfInterest[286411] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[286412] "expr temp" "temp"
              (286421 'move' _iterator[286412](286419 call _getIteratorZip tmpIter[285986]))
              Defer
              {
                {
                  (286451 call _freeIterator _iterator[286412])
                }
              }
              { scopeless type
                (286426 'move' _indexOfInterest[286411](286423 call iteratorIndex _iterator[286412]))
              }
              ForLoop[286413]
              {
                (286431 call _check_tuple_var_decl _indexOfInterest[286411] 2)
                unknown loc[286437] "coforall index var" "index var" "insert auto destroy"
                (286439 'move' loc[286437](286435 call _indexOfInterest[286411] 0))
                unknown tid[286444] "coforall index var" "index var" "insert auto destroy"
                (286446 'move' tid[286444](286442 call _indexOfInterest[286411] 1))
                (286458 call _upEndCount _coforallCount[286404] 0)
                { scopeless
                  { scopeless
                    const tmp[285976] "const" "temp"
                    (285978 'move' tmp[285976](285974 'deref'(285973 '_wide_get_locale' loc)))
                    {
                      {
                        { scopeless
                          const globalCounts[285547] "const" "ref var"(285544 call .(285543 call(285538 call . state c"perLocale") tid) c"globalCounts")
                          (285550 'end of statement')
                        }
                        { scopeless
                          const globalEnds[285562] "const" "ref var"(285559 call .(285558 call(285553 call . state c"perLocale") tid) c"globalEnds")
                          (285565 'end of statement')
                        }
                        { scopeless
                          const localSubdomain[285581] "const"(285580 call(285571 call(285567 call . A c"localSubdomain"))(285577 call chpl_build_bounded_range(285573 call . task c"start") taskEnd))
                          (285584 'end of statement')
                        }
                        { scopeless
                          unknown localOffsets[285598] "ref var"(285595 call .(285592 call .(285591 call(285586 call . state c"perLocale") tid) c"compat") c"counts")
                          (285601 'end of statement')
                        }
                        {
                          { scopeless
                            unknown offset[285606](285603 call . localSubdomain c"low")
                            (285609 'end of statement')
                          }
                          {
                            unknown _indexOfInterest[285641] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[285642] "expr temp" "temp"
                            (285651 'move' _iterator[285642](285649 call _getIterator(285658 call chpl_direct_counted_range_iter 0 nBuckets)))
                            Defer
                            {
                              {
                                (285674 call _freeIterator _iterator[285642])
                              }
                            }
                            { scopeless type
                              (285663 'move' _indexOfInterest[285641](285660 call iteratorIndex _iterator[285642]))
                            }
                            ForLoop[285643]
                            {
                              unknown bin[285667] "index var" "insert auto destroy"
                              (285669 'move' bin[285667] _indexOfInterest[285641])
                              {
                                (285623 call =(285621 call localOffsets bin) offset)
                                (285638 call += offset(285637 call globalCounts(285634 call +(285631 call * bin nTasks) tid)))
                              }
                              label _continueLabel[285646]
                              _indexOfInterest[285641]
                              _iterator[285642]
                            }
                            label _breakLabel[285647]
                          }
                        }
                        Forall {
                          induction variables:
                            
                            unknown bin[285970] "index var" "insert auto destroy"
                          iterated expressions:
                            (285686 call #(285683 call chpl_build_low_bounded_range 0) nBuckets)
                          shadow variables:
                          other variables
                            forall body
                          {
                            { scopeless
                              unknown size[285698](285697 call globalCounts(285694 call +(285691 call * bin nTasks) tid))
                              (285701 'end of statement')
                            }
                            if(285965 call _cond_test(285705 call > size 0))
                            {
                              { scopeless
                                unknown localStart[285711](285710 call localOffsets bin)
                                (285714 'end of statement')
                              }
                              { scopeless
                                unknown localEnd[285723](285721 call -(285718 call + localStart size) 1)
                                (285726 'end of statement')
                              }
                              { scopeless
                                unknown globalStart[285754](285751 IfExpr (285735 call >(285732 call +(285729 call * bin nTasks) tid) 0) then
                                { scopeless
                                  (285749 call globalEnds(285746 call -(285743 call +(285740 call * bin nTasks) tid) 1))
                                } else
                                { scopeless
                                  taskStart
                                } )
                                (285757 'end of statement')
                              }
                              { scopeless
                                unknown globalEnd[285771](285769 call -(285767 call globalEnds(285764 call +(285761 call * bin nTasks) tid)) 1)
                                (285774 'end of statement')
                              }
                              if(285949 call _cond_test debug)
                              {
                                (285876 call writeln "bin " bin " tid " tid " range "(285833 call chpl_build_bounded_range taskStart taskEnd) " A[" globalStart ".." globalEnd "] = Scratch[" localStart ".." localEnd "]")
                                (285912 call assert(285909 call ==(285889 call globalCounts(285886 call +(285883 call * bin nTasks) tid))(285908 call(285897 call .(285896 call(285891 call . state c"perLocale") 0) c"globalCounts")(285905 call +(285902 call * bin nTasks) tid))))
                                (285947 call assert(285944 call ==(285924 call globalEnds(285921 call +(285918 call * bin nTasks) tid))(285943 call(285932 call .(285931 call(285926 call . state c"perLocale") 0) c"globalEnds")(285940 call +(285937 call * bin nTasks) tid))))
                              }
                              (285963 call(285954 call . ShallowCopy c"shallowCopy") A globalStart Scratch localStart size)
                            }
                          }
                        }
                      }
                      (286406 call _downEndCount _coforallCount[286404] nil[44])
                      (285981 'coforall on block' 0 tmp[285976])
                      (285533 'actuals list' tiMarkRef[294] state)
                    }
                  }
                }
                label _continueLabel[286416]
                _indexOfInterest[286411]
                _iterator[286412]
              }
              label _breakLabel[286417]
              Defer
              {
                {
                  (286462 call _endCountFree _coforallCount[286404])
                }
              }
              (286467 call _waitEndCount _coforallCount[286404] 0)
            }
          }
          if(286529 call _cond_test debug)
          {
            (286526 call writef "after distribute, A is %xt\n"(286525 call A(286522 call chpl_build_bounded_range(286518 call . task c"start") taskEnd)))
          }
          {
            unknown _indexOfInterest[286865] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[286866] "expr temp" "temp"
            (286875 'move' _iterator[286866](286873 call _getIterator(286551 call(286547 call .(286544 call .(286541 call .(286540 call(286535 call . state c"perLocale") 0) c"compat") c"bucketizer") c"getBinsToRecursivelySort"))))
            Defer
            {
              {
                (286892 call _freeIterator _iterator[286866])
              }
            }
            { scopeless type
              (286881 'move' _indexOfInterest[286865](286878 call iteratorIndex _iterator[286866]))
            }
            ForLoop[286867]
            {
              unknown bin[286885] "index var" "insert auto destroy"
              (286887 'move' bin[286885] _indexOfInterest[286865])
              {
                { scopeless
                  const binStart[286585] "const"(286582 IfExpr (286557 call >(286554 call * bin nTasks) 0) then
                  { scopeless
                    (286577 call(286566 call .(286565 call(286560 call . state c"perLocale") 0) c"globalEnds")(286574 call -(286571 call * bin nTasks) 1))
                  } else
                  { scopeless
                    (286579 call . task c"start")
                  } )
                  (286588 'end of statement')
                }
                { scopeless
                  const binEnd[286615] "const"(286613 call -(286611 call(286597 call .(286596 call(286591 call . state c"perLocale") 0) c"globalEnds")(286608 call -(286605 call +(286602 call * bin nTasks) nTasks) 1)) 1)
                  (286618 'end of statement')
                }
                { scopeless
                  const binSize[286626] "const"(286624 call +(286621 call - binEnd binStart) 1)
                  (286629 'end of statement')
                }
                { scopeless
                  const binStartBit[286652] "const"(286651 call(286643 call .(286640 call .(286637 call .(286636 call(286631 call . state c"perLocale") 0) c"compat") c"bucketizer") c"getNextStartBit")(286647 call . task c"startbit"))
                  (286655 'end of statement')
                }
                if(286861 call _cond_test(286658 call > binSize 1))
                {
                  { scopeless
                    unknown isOnOneLocale[286661] 0
                    (286664 'end of statement')
                  }
                  { scopeless
                    unknown theLocaleId[286669](286667 call - 1)
                    (286672 'end of statement')
                  }
                  {
                    unknown _indexOfInterest[286748] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[286749] "expr temp" "temp"
                    (286771 'move' _iterator[286749](286688 call _build_tuple(286762 call _getIterator(286761 call(286758 call . A c"targetLocales")))(286768 call _getIterator(286766 call chpl_build_low_bounded_range 0))))
                    Defer
                    {
                      {
                        (286801 call _freeIterator _iterator[286749])
                      }
                    }
                    { scopeless type
                      (286776 'move' _indexOfInterest[286748](286773 call iteratorIndex _iterator[286749]))
                    }
                    ForLoop[286750]
                    {
                      (286781 call _check_tuple_var_decl _indexOfInterest[286748] 2)
                      unknown loc[286787] "index var" "insert auto destroy"
                      (286789 'move' loc[286787](286785 call _indexOfInterest[286748] 0))
                      unknown tid[286794] "index var" "insert auto destroy"
                      (286796 'move' tid[286794](286792 call _indexOfInterest[286748] 1))
                      {
                        { scopeless
                          const localSubdomain[286705] "const"(286704 call(286695 call(286690 call . A c"localSubdomain") loc)(286701 call chpl_build_bounded_range(286697 call . task c"start") taskEnd))
                          (286708 'end of statement')
                        }
                        { scopeless
                          const curDomain[286717] "const"(286715 call chpl__buildDomainExpr(286712 call chpl_build_bounded_range binStart binEnd))
                          (286720 'end of statement')
                        }
                        { scopeless
                          const intersect[286725] "const"(286724 call curDomain localSubdomain)
                          (286728 'end of statement')
                        }
                        if(286744 call _cond_test(286731 call == curDomain intersect))
                        {
                          (286735 call = isOnOneLocale 1)
                          (286741 call = theLocaleId tid)
                        }
                      }
                      label _continueLabel[286753]
                      _indexOfInterest[286748]
                      _iterator[286749]
                    }
                    label _breakLabel[286754]
                  }
                  if(286857 call _cond_test isOnOneLocale)
                  {
                    (286834 call(286821 call .(286818 call .(286817 call(286812 call . state c"localTasks") theLocaleId) c"localTasks") c"append")(286824 'new'(286832 call TwoArraySortTask binStart binSize binStartBit 1 1)))
                  }
                  {
                    (286854 call(286841 call .(286838 call . state c"distTasks") c"append")(286844 'new'(286852 call TwoArraySortTask binStart binSize binStartBit 1 1)))
                  }
                }
              }
              label _continueLabel[286870]
              _indexOfInterest[286865]
              _iterator[286866]
            }
            label _breakLabel[286871]
          }
        }
        label _continueLabel[286902]
        (286919 'move' tmp[286899](286908 call _cond_test(286910 call !(286918 call(286912 call .(286914 call . state c"distTasks") c"isEmpty")))))
        tmp[286899]
      }
      label _breakLabel[286903]
    }
    {
      unknown tmpIter[287198] "expr temp" "maybe ref" "no copy" "temp"
      (287201 'move' tmpIter[287198](286953 call _build_tuple(286948 call(286944 call . A c"targetLocales"))(286951 call chpl_build_low_bounded_range 0)))
      unknown isRngDomArr[287560] "maybe param" "temp"
      (287575 'move' isRngDomArr[287560](287573 call ||(287562 call isBoundedRange tmpIter[287198])(287571 call ||(287565 call isDomain tmpIter[287198])(287568 call isArray tmpIter[287198]))))
      if isRngDomArr[287560]
      {
        const _coforallCount[287404] "const" "end count" "temp"
        (287483 'move' _coforallCount[287404](287480 call _endCountAlloc 0))
        unknown numTasks[287405] "temp"
        (287467 'move' numTasks[287405](287463 call . tmpIter[287198] c"size"))
        (287458 call _upEndCount _coforallCount[287404] 0 numTasks[287405])
        unknown _indexOfInterest[287411] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[287412] "expr temp" "temp"
        (287421 'move' _iterator[287412](287419 call _getIteratorZip tmpIter[287198]))
        Defer
        {
          {
            (287451 call _freeIterator _iterator[287412])
          }
        }
        { scopeless type
          (287426 'move' _indexOfInterest[287411](287423 call iteratorIndex _iterator[287412]))
        }
        ForLoop[287413]
        {
          (287431 call _check_tuple_var_decl _indexOfInterest[287411] 2)
          unknown loc[287437] "coforall index var" "index var" "insert auto destroy"
          (287439 'move' loc[287437](287435 call _indexOfInterest[287411] 0))
          unknown tid[287444] "coforall index var" "index var" "insert auto destroy"
          (287446 'move' tid[287444](287442 call _indexOfInterest[287411] 1))
          { scopeless
            { scopeless
              const tmp[287207] "const" "temp"
              (287209 'move' tmp[287207](287211 'deref'(287212 '_wide_get_locale' loc)))
              {
                {
                  { scopeless
                    unknown myTasks[287220](287222 call .(287227 call(287224 call . state c"localTasks") tid) c"localTasks")
                    (287231 'end of statement')
                  }
                  { scopeless
                    unknown baseCaseSize[287233](287235 call . state c"baseCaseSize")
                    (287239 'end of statement')
                  }
                  { scopeless
                    unknown compat[287241] "ref var"(287243 call .(287248 call(287245 call . state c"perLocale") tid) c"compat")
                    (287252 'end of statement')
                  }
                  {
                    unknown _indexOfInterest[287254] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[287256] "expr temp" "temp"
                    (287258 'move' _iterator[287256](287261 call _getIterator myTasks))
                    Defer
                    {
                      {
                        (287265 call _freeIterator _iterator[287256])
                      }
                    }
                    { scopeless type
                      (287269 'move' _indexOfInterest[287254](287272 call iteratorIndex _iterator[287256]))
                    }
                    ForLoop[287274]
                    {
                      unknown task[287277] "index var" "insert auto destroy"
                      (287279 'move' task[287277] _indexOfInterest[287254])
                      {
                        { scopeless
                          const taskEnd[287284] "const"(287286 call -(287288 call +(287290 call . task c"start")(287294 call . task c"size")) 1)
                          (287299 'end of statement')
                        }
                        { scopeless
                          const curDomain[287301] "const"(287303 call chpl__buildDomainExpr(287305 call chpl_build_bounded_range(287307 call . task c"start") taskEnd))
                          (287312 'end of statement')
                        }
                        if(287314 call _cond_test(287316 call > n baseCaseSize))
                        {
                          (287327 call(287321 call .(287323 call . compat c"bigTasks") c"clear"))
                          (287335 call(287329 call .(287331 call . compat c"smallTasks") c"clear"))
                          (287337 call partitioningSortWithScratchSpace(287339 call . task c"start") taskEnd(287347 call(287344 call . A c"localSlice") curDomain)(287353 call(287350 call . Scratch c"localSlice") curDomain) compat criterion(287358 call . task c"startbit"))
                        }
                        {
                          (287366 call(287363 call . ShellSort c"shellSort")(287371 call(287368 call . A c"localSlice") curDomain) criterion(start =(287375 call . task c"start"))(end = taskEnd))
                        }
                        if(287383 call _cond_test debug)
                        {
                          (287387 call writef "after recursive sorts, dst is %xt\n"(287390 call A(287392 call chpl_build_bounded_range(287394 call . task c"start") taskEnd)))
                        }
                      }
                      label _continueLabel[287399]
                      _indexOfInterest[287254]
                      _iterator[287256]
                    }
                    label _breakLabel[287401]
                  }
                }
                (287406 call _downEndCount _coforallCount[287404] nil[44])
                (287215 'coforall on block' 0 tmp[287207])
                (287203 'actuals list' tiMarkRef[294] state)
              }
            }
          }
          label _continueLabel[287416]
          _indexOfInterest[287411]
          _iterator[287412]
        }
        label _breakLabel[287417]
        Defer
        {
          {
            (287470 call _endCountFree _coforallCount[287404])
          }
        }
        (287475 call _waitEndCount _coforallCount[287404] 0 numTasks[287405])
      }
      {
        const _coforallCount[287487] "const" "end count" "temp"
        (287557 'move' _coforallCount[287487](287554 call _endCountAlloc 0))
        unknown _indexOfInterest[287494] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[287495] "expr temp" "temp"
        (287504 'move' _iterator[287495](287502 call _getIteratorZip tmpIter[287198]))
        Defer
        {
          {
            (287534 call _freeIterator _iterator[287495])
          }
        }
        { scopeless type
          (287509 'move' _indexOfInterest[287494](287506 call iteratorIndex _iterator[287495]))
        }
        ForLoop[287496]
        {
          (287514 call _check_tuple_var_decl _indexOfInterest[287494] 2)
          unknown loc[287520] "coforall index var" "index var" "insert auto destroy"
          (287522 'move' loc[287520](287518 call _indexOfInterest[287494] 0))
          unknown tid[287527] "coforall index var" "index var" "insert auto destroy"
          (287529 'move' tid[287527](287525 call _indexOfInterest[287494] 1))
          (287541 call _upEndCount _coforallCount[287487] 0)
          { scopeless
            { scopeless
              const tmp[287188] "const" "temp"
              (287190 'move' tmp[287188](287186 'deref'(287185 '_wide_get_locale' loc)))
              {
                {
                  { scopeless
                    unknown myTasks[286973](286970 call .(286969 call(286964 call . state c"localTasks") tid) c"localTasks")
                    (286976 'end of statement')
                  }
                  { scopeless
                    unknown baseCaseSize[286982](286979 call . state c"baseCaseSize")
                    (286985 'end of statement')
                  }
                  { scopeless
                    unknown compat[286996] "ref var"(286993 call .(286992 call(286987 call . state c"perLocale") tid) c"compat")
                    (286999 'end of statement')
                  }
                  {
                    unknown _indexOfInterest[287152] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[287153] "expr temp" "temp"
                    (287162 'move' _iterator[287153](287160 call _getIterator myTasks))
                    Defer
                    {
                      {
                        (287178 call _freeIterator _iterator[287153])
                      }
                    }
                    { scopeless type
                      (287167 'move' _indexOfInterest[287152](287164 call iteratorIndex _iterator[287153]))
                    }
                    ForLoop[287154]
                    {
                      unknown task[287171] "index var" "insert auto destroy"
                      (287173 'move' task[287171] _indexOfInterest[287152])
                      {
                        { scopeless
                          const taskEnd[287015] "const"(287013 call -(287010 call +(287003 call . task c"start")(287007 call . task c"size")) 1)
                          (287018 'end of statement')
                        }
                        { scopeless
                          const curDomain[287030] "const"(287028 call chpl__buildDomainExpr(287025 call chpl_build_bounded_range(287021 call . task c"start") taskEnd))
                          (287033 'end of statement')
                        }
                        if(287111 call _cond_test(287036 call > n baseCaseSize))
                        {
                          (287046 call(287042 call .(287039 call . compat c"bigTasks") c"clear"))
                          (287057 call(287053 call .(287050 call . compat c"smallTasks") c"clear"))
                          (287086 call partitioningSortWithScratchSpace(287061 call . task c"start") taskEnd(287072 call(287067 call . A c"localSlice") curDomain)(287079 call(287074 call . Scratch c"localSlice") curDomain) compat criterion(287083 call . task c"startbit"))
                        }
                        {
                          (287108 call(287089 call . ShellSort c"shellSort")(287098 call(287093 call . A c"localSlice") curDomain) criterion(start =(287102 call . task c"start"))(end = taskEnd))
                        }
                        if(287148 call _cond_test debug)
                        {
                          (287145 call writef "after recursive sorts, dst is %xt\n"(287144 call A(287141 call chpl_build_bounded_range(287137 call . task c"start") taskEnd)))
                        }
                      }
                      label _continueLabel[287157]
                      _indexOfInterest[287152]
                      _iterator[287153]
                    }
                    label _breakLabel[287158]
                  }
                }
                (287489 call _downEndCount _coforallCount[287487] nil[44])
                (287193 'coforall on block' 0 tmp[287188])
                (286959 'actuals list' tiMarkRef[294] state)
              }
            }
          }
          label _continueLabel[287499]
          _indexOfInterest[287494]
          _iterator[287495]
        }
        label _breakLabel[287500]
        Defer
        {
          {
            (287545 call _endCountFree _coforallCount[287487])
          }
        }
        (287550 call _waitEndCount _coforallCount[287487] 0)
      }
    }
  }
  { scopeless type
    void[4]
  }
}