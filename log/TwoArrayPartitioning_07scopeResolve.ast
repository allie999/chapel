AST dump for TwoArrayPartitioning after pass scopeResolve.
Module use list: ChapelStandard BlockDist MSBRadixSort List Sort ShallowCopy SampleSortHelp RadixSortHelp ShellSort 

{ unknown debug[279219] "param" "private" 0(279222 'end of statement') unknown maxBuckets[279226] "param" 512(279229 'end of statement') function TwoArraySortTask[279339].init[279258](arg _mt[279343]:_MT[238], arg this[279341]:TwoArraySortTask[279339]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  } function TwoArraySortTask[279339].init[279269](arg _mt[279347]:_MT[238], arg this[279345]:TwoArraySortTask[279339], arg start[279266] : int(64)[13], arg size[279272] : int(64)[13], arg startbit[279276] : int(64)[13], arg inA[279280] : bool[10], arg doSort[279284] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(279294 call =(279290 call . this[279345] c"start") start[279266])(279303 call =(279299 call . this[279345] c"size") size[279272])(279313 call =(279309 call . this[279345] c"startbit") startbit[279276])(279323 call =(279319 call . this[279345] c"inA") inA[279280])(279333 call =(279329 call . this[279345] c"doSort") doSort[279284])
  } type TwoArraySortTask[279339] unknown start[279232] int(64)[13] unknown size[279237] int(64)[13] unknown startbit[279242] int(64)[13] unknown inA[279247] bool[10] unknown doSort[279252] bool[10] type TwoArrayBucketizerPerTaskState[279368] unknown localCounts[279363](279361 call chpl__buildArrayRuntimeType(279359 call chpl__ensureDomainExpr(279355 call #(279352 call chpl_build_low_bounded_range 0) maxBuckets[279226])) int(64)[13]) type TwoArrayBucketizerSharedState[279538](?) unknown nTasks[279385](279382 IfExpr (279375 call > dataParTasksPerLocale[93281] 0) then
  { scopeless dataParTasksPerLocale[93281]
  } else
  { scopeless(279379 call .(364324 call here[90435]) c"maxTaskPar")
  } ) int(64)[13] unknown countsSize[279394](279392 call * nTasks[279385] maxBuckets[279226]) int(64)[13] unknown bucketizer[279398] unknown globalCounts[279414](279412 call chpl__buildArrayRuntimeType(279410 call chpl__ensureDomainExpr(279406 call #(279403 call chpl_build_low_bounded_range 0) countsSize[279394])) int(64)[13]) unknown globalEnds[279430](279428 call chpl__buildArrayRuntimeType(279426 call chpl__ensureDomainExpr(279422 call #(279419 call chpl_build_low_bounded_range 0) countsSize[279394])) int(64)[13]) unknown localState[279446](279444 call chpl__buildArrayRuntimeType(279442 call chpl__ensureDomainExpr(279438 call #(279435 call chpl_build_low_bounded_range 0) nTasks[279385])) TwoArrayBucketizerPerTaskState[279368]) unknown counts[279462](279460 call chpl__buildArrayRuntimeType(279458 call chpl__ensureDomainExpr(279454 call #(279451 call chpl_build_low_bounded_range 0) maxBuckets[279226])) int(64)[13]) unknown ends[279478](279476 call chpl__buildArrayRuntimeType(279474 call chpl__ensureDomainExpr(279470 call #(279467 call chpl_build_low_bounded_range 0) maxBuckets[279226])) int(64)[13]) unknown outputInA[279494](279492 call chpl__buildArrayRuntimeType(279490 call chpl__ensureDomainExpr(279486 call #(279483 call chpl_build_low_bounded_range 0) maxBuckets[279226])) bool[10]) unknown bigTasks[279502](279501 call list[304193](?) TwoArraySortTask[279339]) unknown smallTasks[279510](279509 call list[304193](?) TwoArraySortTask[279339]) unknown baseCaseSize[279516] 16 int(64)[13] unknown sequentialSizePerTask[279524] 4096 int(64)[13] unknown endbit[279533](279532 call max int(64)[13]) int(64)[13] type TwoArrayDistributedBucketizerStatePerLocale[279595](?) unknown bucketizerType[279542] "type variable" unknown compat[279549](279548 call TwoArrayBucketizerSharedState[279538](?) bucketizerType[279542]) unknown countsSize[279558](279556 call * numLocales[209834] maxBuckets[279226]) int(64)[13] unknown globalCounts[279574](279572 call chpl__buildArrayRuntimeType(279570 call chpl__ensureDomainExpr(279566 call #(279563 call chpl_build_low_bounded_range 0) countsSize[279558])) int(64)[13]) unknown globalEnds[279590](279588 call chpl__buildArrayRuntimeType(279586 call chpl__ensureDomainExpr(279582 call #(279579 call chpl_build_low_bounded_range 0) countsSize[279558])) int(64)[13]) type TasksForLocale[279608] unknown localTasks[279603](279602 call list[304193](?) TwoArraySortTask[279339]) function TwoArrayDistributedBucketizerSharedState[279820](?).postinit[279718](arg _mt[279824]:_MT[238], arg this[279822]:TwoArrayDistributedBucketizerSharedState[279820](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[279783] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[279784] "expr temp" "temp"(279793 'move' _iterator[279784](279791 call _getIterator(402871 call . this[279822] c"perLocale")))
      Defer
      {
        {(279809 call _freeIterator _iterator[279784])
        }
      }
      { scopeless type(279798 'move' _indexOfInterest[279783](279795 call iteratorIndex _iterator[279784]))
      }
      ForLoop[279785]
      { unknown p[279802] "index var" "insert auto destroy"(279804 'move' p[279802] _indexOfInterest[279783])
        {(279734 call =(279730 call .(279725 call . p[279802] c"compat") c"baseCaseSize")(402876 call . this[279822] c"baseCaseSize"))(279748 call =(279744 call .(279739 call . p[279802] c"compat") c"endbit")(402881 call . this[279822] c"endbit"))(279765 call assert(279762 call >(279758 call .(279753 call . p[279802] c"compat") c"nTasks") 0))(279781 call assert(279778 call >(279774 call .(279769 call . p[279802] c"compat") c"countsSize") 0))
        } label _continueLabel[279788] _indexOfInterest[279783] _iterator[279784]
      } label _breakLabel[279789]
    }
  } type TwoArrayDistributedBucketizerSharedState[279820](?) unknown bucketizerType[279612] "type variable" unknown numLocales[279616] int(64)[13] unknown perLocale[279633](279632 call newBlockArr(279625 call #(279622 call chpl_build_low_bounded_range 0) numLocales[279616])(279631 call TwoArrayDistributedBucketizerStatePerLocale[279595](?) bucketizerType[279612])) const baseCaseSize[279638] "const" int(64)[13] const endbit[279647] "const"(279646 call max int(64)[13]) int(64)[13] const countsSize[279656] "const"(279654 call * numLocales[279616] maxBuckets[279226]) int(64)[13] unknown globalCounts[279672](279670 call chpl__buildArrayRuntimeType(279668 call chpl__ensureDomainExpr(279664 call #(279661 call chpl_build_low_bounded_range 0) countsSize[279656])) int(64)[13]) unknown globalEnds[279688](279686 call chpl__buildArrayRuntimeType(279684 call chpl__ensureDomainExpr(279680 call #(279677 call chpl_build_low_bounded_range 0) countsSize[279656])) int(64)[13]) unknown distTasks[279696](279695 call list[304193](?) TwoArraySortTask[279339]) unknown localTasks[279712](279710 call chpl__buildArrayRuntimeType(279708 call chpl__ensureDomainExpr(279704 call #(279701 call chpl_build_low_bounded_range 0) numLocales[279616])) TasksForLocale[279608]) function bucketize[279833](arg start_n[279830] : int(64)[13], arg end_n[279836] : int(64)[13], arg dst[279842] :(279839 call chpl__buildArrayRuntimeType nil[44]), arg src[279848] :(279845 call chpl__buildArrayRuntimeType nil[44]), ref arg state[279852] : TwoArrayBucketizerSharedState[279538](?), arg criterion[279855]:_any[178](?), arg startbit[279858] : int(64)[13]) : _unknown[51] "no return value for void"
  {
    if(279905 call _cond_test debug[279219])
    {(279903 call writeln "bucketize "(279883 call chpl_build_bounded_range start_n[279830] end_n[279836]) " startbit=" startbit[279858])
    } const nBuckets[279922] "const"(279921 call(279917 call .(279914 call . state[279852] c"bucketizer") c"getNumBuckets"))(279925 'end of statement') const n[279933] "const"(279931 call +(279928 call - end_n[279836] start_n[279830]) 1)(279936 'end of statement') const nTasks[279952] "const"(279949 IfExpr (279942 call >= n[279933](279939 call . state[279852] c"nTasks")) then
    { scopeless(279945 call . state[279852] c"nTasks")
    } else
    { scopeless 1
    } )(279955 'end of statement')(279962 call assert(279959 call > nTasks[279952] 0))
    if(279981 call _cond_test(279966 call == n[279933] 0))
    {(279975 call =(279971 call . state[279852] c"counts") 0)(279979 return _void[55])
    } const countsSize[279989] "const"(279987 call * nTasks[279952] nBuckets[279922])(279992 'end of statement') const blockSize[279998] "const"(279997 call divceil n[279933] nTasks[279952])(280001 'end of statement') const nBlocks[280007] "const"(280006 call divceil n[279933] blockSize[279998])(280010 'end of statement')
    { unknown tmpIter[280329] "expr temp" "maybe ref" "no copy" "temp"(280332 'move' tmpIter[280329](280016 call #(280013 call chpl_build_low_bounded_range 0) nTasks[279952])) unknown isRngDomArr[280700] "maybe param" "temp"(280715 'move' isRngDomArr[280700](280713 call ||(280702 call isBoundedRange tmpIter[280329])(280711 call ||(280705 call isDomain tmpIter[280329])(280708 call isArray tmpIter[280329]))))
      if isRngDomArr[280700]
      { const _coforallCount[280567] "const" "end count" "temp"(280636 'move' _coforallCount[280567](280633 call _endCountAlloc 1)) unknown numTasks[280568] "temp"(280620 'move' numTasks[280568](280616 call . tmpIter[280329] c"size"))(280611 call _upEndCount _coforallCount[280567] 1 numTasks[280568])(280608 call chpl_resetTaskSpawn numTasks[280568]) unknown _indexOfInterest[280575] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280576] "expr temp" "temp"(280585 'move' _iterator[280576](280583 call _getIterator tmpIter[280329]))
        Defer
        {
          {(280601 call _freeIterator _iterator[280576])
          }
        }
        { scopeless type(280590 'move' _indexOfInterest[280575](280587 call iteratorIndex _iterator[280576]))
        }
        ForLoop[280577]
        { unknown tid[280594] "coforall index var" "index var" "insert auto destroy"(280596 'move' tid[280594] _indexOfInterest[280575])
          {
            { unknown start[280339](280341 call + start_n[279830](280344 call * tid[280594] blockSize[279998]))(280348 'end of statement') unknown end[280350](280352 call -(280354 call + start[280339] blockSize[279998]) 1)(280359 'end of statement')
              if(280361 call _cond_test(280363 call > end[280350] end_n[279836]))
              {(280368 call = end[280350] end_n[279836])
              }
              if(280373 call _cond_test debug[279219])
              {(280378 call writeln "tid " tid[280594] " considering "(280383 call chpl_build_bounded_range start[280339] end[280350]))
              } unknown counts[280388] "ref var"(280390 call .(280395 call(280392 call . state[279852] c"localState") tid[280594]) c"localCounts")(280399 'end of statement')
              { unknown _indexOfInterest[280401] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280403] "expr temp" "temp"(280405 'move' _iterator[280403](280408 call _getIterator(280410 call chpl_direct_counted_range_iter 0 nBuckets[279922])))
                Defer
                {
                  {(280415 call _freeIterator _iterator[280403])
                  }
                }
                { scopeless type(280419 'move' _indexOfInterest[280401](280422 call iteratorIndex _iterator[280403]))
                }
                ForLoop[280424]
                { unknown bin[280427] "index var" "insert auto destroy"(280429 'move' bin[280427] _indexOfInterest[280401])
                  {(280434 call =(280436 call counts[280388] bin[280427]) 0)
                  } label _continueLabel[280439] _indexOfInterest[280401] _iterator[280403]
                } label _breakLabel[280441]
              }
              { unknown _indexOfInterest[280444] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280446] "expr temp" "temp"(280448 'move' _iterator[280446](280451 call _getIterator(280459 call(280453 call .(280455 call . state[279852] c"bucketizer") c"classify") src[279848] start[280339] end[280350] criterion[279855] startbit[279858])))
                Defer
                {
                  {(280467 call _freeIterator _iterator[280446])
                  }
                }
                { scopeless type(280471 'move' _indexOfInterest[280444](280474 call iteratorIndex _iterator[280446]))
                }
                ForLoop[280476]
                {(280480 call _check_tuple_var_decl _indexOfInterest[280444] 2) unknown i[280483] "index var" "insert auto destroy"(280485 'move' i[280483](280488 call _indexOfInterest[280444] 0)) unknown bin[280490] "index var" "insert auto destroy"(280492 'move' bin[280490](280495 call _indexOfInterest[280444] 1))
                  {(280499 call +=(280501 call counts[280388] bin[280490]) 1)
                  } label _continueLabel[280504] _indexOfInterest[280444] _iterator[280446]
                } label _breakLabel[280506]
              }
              { unknown _indexOfInterest[280509] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280511] "expr temp" "temp"(280513 'move' _iterator[280511](280516 call _getIterator(280518 call vectorizeOnly(280520 call #(280522 call chpl_build_low_bounded_range 0) nBuckets[279922]))))
                Defer
                {
                  {(280527 call _freeIterator _iterator[280511])
                  }
                }
                { scopeless type(280531 'move' _indexOfInterest[280509](280534 call iteratorIndex _iterator[280511]))
                }
                ForLoop[280536]
                { unknown bin[280539] "index var" "insert auto destroy"(280541 'move' bin[280539] _indexOfInterest[280509])
                  {(280546 call =(280551 call(280548 call . state[279852] c"globalCounts")(280553 call +(280555 call * bin[280539] nTasks[279952]) tid[280594]))(280560 call counts[280388] bin[280539]))
                  } label _continueLabel[280562] _indexOfInterest[280509] _iterator[280511]
                } label _breakLabel[280564]
              }
            }(280570 call _downEndCount _coforallCount[280567] nil[44])(280569 'coforall loop')(280334 'actuals list' tiMarkRef[294] state[279852])
          } label _continueLabel[280580] _indexOfInterest[280575] _iterator[280576]
        } label _breakLabel[280581]
        Defer
        {
          {(280623 call _endCountFree _coforallCount[280567])
          }
        }(280628 call _waitEndCount _coforallCount[280567] 1 numTasks[280568])
      }
      { const _coforallCount[280640] "const" "end count" "temp"(280697 'move' _coforallCount[280640](280694 call _endCountAlloc 1)) unknown _indexOfInterest[280648] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280649] "expr temp" "temp"(280658 'move' _iterator[280649](280656 call _getIterator tmpIter[280329]))
        Defer
        {
          {(280674 call _freeIterator _iterator[280649])
          }
        }
        { scopeless type(280663 'move' _indexOfInterest[280648](280660 call iteratorIndex _iterator[280649]))
        }
        ForLoop[280650]
        { unknown tid[280667] "coforall index var" "index var" "insert auto destroy"(280669 'move' tid[280667] _indexOfInterest[280648])(280681 call _upEndCount _coforallCount[280640] 1)
          {
            { unknown start[280033](280031 call + start_n[279830](280029 call * tid[280667] blockSize[279998]))(280036 'end of statement') unknown end[280045](280043 call -(280040 call + start[280033] blockSize[279998]) 1)(280048 'end of statement')
              if(280059 call _cond_test(280051 call > end[280045] end_n[279836]))
              {(280055 call = end[280045] end_n[279836])
              }
              if(280107 call _cond_test debug[279219])
              {(280105 call writeln "tid " tid[280667] " considering "(280103 call chpl_build_bounded_range start[280033] end[280045]))
              } unknown counts[280126] "ref var"(280123 call .(280120 call(280115 call . state[279852] c"localState") tid[280667]) c"localCounts")(280129 'end of statement')
              { unknown _indexOfInterest[280146] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280147] "expr temp" "temp"(280156 'move' _iterator[280147](280154 call _getIterator(280163 call chpl_direct_counted_range_iter 0 nBuckets[279922])))
                Defer
                {
                  {(280179 call _freeIterator _iterator[280147])
                  }
                }
                { scopeless type(280168 'move' _indexOfInterest[280146](280165 call iteratorIndex _iterator[280147]))
                }
                ForLoop[280148]
                { unknown bin[280172] "index var" "insert auto destroy"(280174 'move' bin[280172] _indexOfInterest[280146])
                  {(280142 call =(280140 call counts[280126] bin[280172]) 0)
                  } label _continueLabel[280151] _indexOfInterest[280146] _iterator[280147]
                } label _breakLabel[280152]
              }
              { unknown _indexOfInterest[280214] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280215] "expr temp" "temp"(280224 'move' _iterator[280215](280222 call _getIterator(280204 call(280195 call .(280192 call . state[279852] c"bucketizer") c"classify") src[279848] start[280033] end[280045] criterion[279855] startbit[279858])))
                Defer
                {
                  {(280255 call _freeIterator _iterator[280215])
                  }
                }
                { scopeless type(280230 'move' _indexOfInterest[280214](280227 call iteratorIndex _iterator[280215]))
                }
                ForLoop[280216]
                {(280235 call _check_tuple_var_decl _indexOfInterest[280214] 2) unknown i[280241] "index var" "insert auto destroy"(280243 'move' i[280241](280239 call _indexOfInterest[280214] 0)) unknown bin[280248] "index var" "insert auto destroy"(280250 'move' bin[280248](280246 call _indexOfInterest[280214] 1))
                  {(280210 call +=(280208 call counts[280126] bin[280248]) 1)
                  } label _continueLabel[280219] _indexOfInterest[280214] _iterator[280215]
                } label _breakLabel[280220]
              }
              { unknown _indexOfInterest[280295] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280296] "expr temp" "temp"(280305 'move' _iterator[280296](280303 call _getIterator(280271 call vectorizeOnly(280268 call #(280265 call chpl_build_low_bounded_range 0) nBuckets[279922]))))
                Defer
                {
                  {(280322 call _freeIterator _iterator[280296])
                  }
                }
                { scopeless type(280311 'move' _indexOfInterest[280295](280308 call iteratorIndex _iterator[280296]))
                }
                ForLoop[280297]
                { unknown bin[280315] "index var" "insert auto destroy"(280317 'move' bin[280315] _indexOfInterest[280295])
                  {(280291 call =(280286 call(280275 call . state[279852] c"globalCounts")(280283 call +(280280 call * bin[280315] nTasks[279952]) tid[280667]))(280290 call counts[280126] bin[280315]))
                  } label _continueLabel[280300] _indexOfInterest[280295] _iterator[280296]
                } label _breakLabel[280301]
              }
            }(280643 call _downEndCount _coforallCount[280640] nil[44])(280642 'coforall loop')(280023 'actuals list' tiMarkRef[294] state[279852])
          } label _continueLabel[280653] _indexOfInterest[280648] _iterator[280649]
        } label _breakLabel[280654]
        Defer
        {
          {(280685 call _endCountFree _coforallCount[280640])
          }
        }(280690 call _waitEndCount _coforallCount[280640] 1)
      }
    } function chpl__scan4[280730](arg chpl_toScan[280732]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
    { unknown chpl_eltType[280734] "maybe type" "temp"
      { scopeless type(280738 'move' chpl_eltType[280734](280740 'typeof'(280742 call chpl__initCopy(280744 call iteratorIndex(280746 call _getIterator chpl_toScan[280732])))))
      } const tmp[280735] "const" "temp"(280755 'move' tmp[280735](280754 'new'(280753 call SumReduceScanOp[376372](?)(eltType = chpl_eltType[280734])(_chpl_manager = unmanaged[220](?)))))(280757 return(280759 call chpl__scanIterator tmp[280735] chpl_toScan[280732]))
    }(280767 call =(280722 call . state[279852] c"globalEnds")(280765 call +(280763 call chpl__scan4(280727 call . state[279852] c"globalCounts")) start_n[279830]))
    if(280969 call _cond_test debug[279219])
    {
      { unknown _indexOfInterest[280928] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280929] "expr temp" "temp"(280938 'move' _iterator[280929](280936 call _getIterator(280945 call chpl_direct_counted_range_iter 0 nBuckets[279922])))
        Defer
        {
          {(280961 call _freeIterator _iterator[280929])
          }
        }
        { scopeless type(280950 'move' _indexOfInterest[280928](280947 call iteratorIndex _iterator[280929]))
        }
        ForLoop[280930]
        { unknown bin[280954] "index var" "insert auto destroy"(280956 'move' bin[280954] _indexOfInterest[280928])
          {
            { unknown _indexOfInterest[280887] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280888] "expr temp" "temp"(280897 'move' _iterator[280888](280895 call _getIterator(280904 call chpl_direct_counted_range_iter 0 nTasks[279952])))
              Defer
              {
                {(280920 call _freeIterator _iterator[280888])
                }
              }
              { scopeless type(280909 'move' _indexOfInterest[280887](280906 call iteratorIndex _iterator[280888]))
              }
              ForLoop[280889]
              { unknown tid[280913] "index var" "insert auto destroy"(280915 'move' tid[280913] _indexOfInterest[280887])
                { unknown gb[280792](280790 call +(280787 call * bin[280954] nTasks[279952]) tid[280913])(280795 'end of statement')
                  if(280883 call _cond_test(280805 call !=(280803 call(280798 call . state[279852] c"globalCounts") gb[280792]) 0))
                  {(280880 call writeln "tid " tid[280913] " count[" bin[280954] "] = "(280852 call(280847 call . state[279852] c"globalCounts") gb[280792]) " end = "(280878 call -(280876 call(280871 call . state[279852] c"globalEnds") gb[280792]) 1))
                  }
                } label _continueLabel[280892] _indexOfInterest[280887] _iterator[280888]
              } label _breakLabel[280893]
            }
          } label _continueLabel[280933] _indexOfInterest[280928] _iterator[280929]
        } label _breakLabel[280934]
      }
    }
    { unknown tmpIter[281332] "expr temp" "maybe ref" "no copy" "temp"(281335 'move' tmpIter[281332](280978 call #(280975 call chpl_build_low_bounded_range 0) nTasks[279952])) unknown isRngDomArr[281715] "maybe param" "temp"(281730 'move' isRngDomArr[281715](281728 call ||(281717 call isBoundedRange tmpIter[281332])(281726 call ||(281720 call isDomain tmpIter[281332])(281723 call isArray tmpIter[281332]))))
      if isRngDomArr[281715]
      { const _coforallCount[281582] "const" "end count" "temp"(281651 'move' _coforallCount[281582](281648 call _endCountAlloc 1)) unknown numTasks[281583] "temp"(281635 'move' numTasks[281583](281631 call . tmpIter[281332] c"size"))(281626 call _upEndCount _coforallCount[281582] 1 numTasks[281583])(281623 call chpl_resetTaskSpawn numTasks[281583]) unknown _indexOfInterest[281590] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281591] "expr temp" "temp"(281600 'move' _iterator[281591](281598 call _getIterator tmpIter[281332]))
        Defer
        {
          {(281616 call _freeIterator _iterator[281591])
          }
        }
        { scopeless type(281605 'move' _indexOfInterest[281590](281602 call iteratorIndex _iterator[281591]))
        }
        ForLoop[281592]
        { unknown tid[281609] "coforall index var" "index var" "insert auto destroy"(281611 'move' tid[281609] _indexOfInterest[281590])
          {
            { unknown start[281342](281344 call + start_n[279830](281347 call * tid[281609] blockSize[279998]))(281351 'end of statement') unknown end[281353](281355 call -(281357 call + start[281342] blockSize[279998]) 1)(281362 'end of statement')
              if(281364 call _cond_test(281366 call > end[281353] end_n[279836]))
              {(281371 call = end[281353] end_n[279836])
              } unknown nextOffsets[281376] "ref var"(281378 call .(281383 call(281380 call . state[279852] c"localState") tid[281609]) c"localCounts")(281387 'end of statement')
              { unknown _indexOfInterest[281389] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281391] "expr temp" "temp"(281393 'move' _iterator[281391](281396 call _getIterator(281398 call chpl_direct_counted_range_iter 0 nBuckets[279922])))
                Defer
                {
                  {(281403 call _freeIterator _iterator[281391])
                  }
                }
                { scopeless type(281407 'move' _indexOfInterest[281389](281410 call iteratorIndex _iterator[281391]))
                }
                ForLoop[281412]
                { unknown bin[281415] "index var" "insert auto destroy"(281417 'move' bin[281415] _indexOfInterest[281389])
                  { unknown globalBin[281422](281424 call +(281426 call * bin[281415] nTasks[279952]) tid[281609])(281431 'end of statement')(281433 call =(281435 call nextOffsets[281376] bin[281415])(281453 IfExpr (281438 call > globalBin[281422] 0) then
                    { scopeless(281446 call(281443 call . state[279852] c"globalEnds")(281448 call - globalBin[281422] 1))
                    } else
                    { scopeless start_n[279830]
                    } ))
                    if(281455 call _cond_test debug[279219])
                    {
                      if(281459 call _cond_test(281461 call !=(281466 call(281463 call . state[279852] c"globalCounts") globalBin[281422]) 0))
                      {(281471 call writeln "tid " tid[281609] " nextOffsets[" bin[281415] "] = "(281478 call nextOffsets[281376] bin[281415]))
                      }
                    }
                  } label _continueLabel[281482] _indexOfInterest[281389] _iterator[281391]
                } label _breakLabel[281484]
              }
              { unknown _indexOfInterest[281487] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281489] "expr temp" "temp"(281491 'move' _iterator[281489](281494 call _getIterator(281502 call(281496 call .(281498 call . state[279852] c"bucketizer") c"classify") src[279848] start[281342] end[281353] criterion[279855] startbit[279858])))
                Defer
                {
                  {(281510 call _freeIterator _iterator[281489])
                  }
                }
                { scopeless type(281514 'move' _indexOfInterest[281487](281517 call iteratorIndex _iterator[281489]))
                }
                ForLoop[281519]
                {(281523 call _check_tuple_var_decl _indexOfInterest[281487] 2) unknown i[281526] "index var" "insert auto destroy"(281528 'move' i[281526](281531 call _indexOfInterest[281487] 0)) unknown bin[281533] "index var" "insert auto destroy"(281535 'move' bin[281533](281538 call _indexOfInterest[281487] 1))
                  { unknown next[281542] "ref var"(281544 call nextOffsets[281376] bin[281533])(281547 'end of statement')
                    if(281549 call _cond_test debug[279219])
                    {(281553 call writeln "tid " tid[281609] " dst[" next[281542] "] = src[" i[281526] "] bin " bin[281533])
                    }(281567 call shallowCopy module=[255] ShallowCopy[277381] dst[279842] next[281542] src[279848] i[281526] 1)(281574 call += next[281542] 1)(364360 'referenced modules list' ShallowCopy[277381])
                  } label _continueLabel[281577] _indexOfInterest[281487] _iterator[281489]
                } label _breakLabel[281579]
              }
            }(281585 call _downEndCount _coforallCount[281582] nil[44])(281584 'coforall loop')(281337 'actuals list' tiMarkRef[294] state[279852])
          } label _continueLabel[281595] _indexOfInterest[281590] _iterator[281591]
        } label _breakLabel[281596]
        Defer
        {
          {(281638 call _endCountFree _coforallCount[281582])
          }
        }(281643 call _waitEndCount _coforallCount[281582] 1 numTasks[281583])
      }
      { const _coforallCount[281655] "const" "end count" "temp"(281712 'move' _coforallCount[281655](281709 call _endCountAlloc 1)) unknown _indexOfInterest[281663] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281664] "expr temp" "temp"(281673 'move' _iterator[281664](281671 call _getIterator tmpIter[281332]))
        Defer
        {
          {(281689 call _freeIterator _iterator[281664])
          }
        }
        { scopeless type(281678 'move' _indexOfInterest[281663](281675 call iteratorIndex _iterator[281664]))
        }
        ForLoop[281665]
        { unknown tid[281682] "coforall index var" "index var" "insert auto destroy"(281684 'move' tid[281682] _indexOfInterest[281663])(281696 call _upEndCount _coforallCount[281655] 1)
          {
            { unknown start[280995](280993 call + start_n[279830](280991 call * tid[281682] blockSize[279998]))(280998 'end of statement') unknown end[281007](281005 call -(281002 call + start[280995] blockSize[279998]) 1)(281010 'end of statement')
              if(281021 call _cond_test(281013 call > end[281007] end_n[279836]))
              {(281017 call = end[281007] end_n[279836])
              } unknown nextOffsets[281035] "ref var"(281032 call .(281031 call(281026 call . state[279852] c"localState") tid[281682]) c"localCounts")(281038 'end of statement')
              { unknown _indexOfInterest[281133] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281134] "expr temp" "temp"(281143 'move' _iterator[281134](281141 call _getIterator(281150 call chpl_direct_counted_range_iter 0 nBuckets[279922])))
                Defer
                {
                  {(281166 call _freeIterator _iterator[281134])
                  }
                }
                { scopeless type(281155 'move' _indexOfInterest[281133](281152 call iteratorIndex _iterator[281134]))
                }
                ForLoop[281135]
                { unknown bin[281159] "index var" "insert auto destroy"(281161 'move' bin[281159] _indexOfInterest[281133])
                  { unknown globalBin[281053](281051 call +(281048 call * bin[281159] nTasks[279952]) tid[281682])(281056 'end of statement')(281080 call =(281061 call nextOffsets[281035] bin[281159])(281077 IfExpr (281064 call > globalBin[281053] 0) then
                    { scopeless(281075 call(281067 call . state[279852] c"globalEnds")(281072 call - globalBin[281053] 1))
                    } else
                    { scopeless start_n[279830]
                    } ))
                    if(281129 call _cond_test debug[279219])
                    {
                      if(281124 call _cond_test(281092 call !=(281090 call(281085 call . state[279852] c"globalCounts") globalBin[281053]) 0))
                      {(281121 call writeln "tid " tid[281682] " nextOffsets[" bin[281159] "] = "(281120 call nextOffsets[281035] bin[281159]))
                      }
                    }
                  } label _continueLabel[281138] _indexOfInterest[281133] _iterator[281134]
                } label _breakLabel[281139]
              }
              { unknown _indexOfInterest[281284] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281285] "expr temp" "temp"(281294 'move' _iterator[281285](281292 call _getIterator(281191 call(281182 call .(281179 call . state[279852] c"bucketizer") c"classify") src[279848] start[280995] end[281007] criterion[279855] startbit[279858])))
                Defer
                {
                  {(281325 call _freeIterator _iterator[281285])
                  }
                }
                { scopeless type(281300 'move' _indexOfInterest[281284](281297 call iteratorIndex _iterator[281285]))
                }
                ForLoop[281286]
                {(281305 call _check_tuple_var_decl _indexOfInterest[281284] 2) unknown i[281311] "index var" "insert auto destroy"(281313 'move' i[281311](281309 call _indexOfInterest[281284] 0)) unknown bin[281318] "index var" "insert auto destroy"(281320 'move' bin[281318](281316 call _indexOfInterest[281284] 1))
                  { unknown next[281196] "ref var"(281195 call nextOffsets[281035] bin[281318])(281199 'end of statement')
                    if(281263 call _cond_test debug[279219])
                    {(281260 call writeln "tid " tid[281682] " dst[" next[281196] "] = src[" i[281311] "] bin " bin[281318])
                    }(281277 call shallowCopy module=[255] ShallowCopy[277381] dst[279842] next[281196] src[279848] i[281311] 1)(281281 call += next[281196] 1)(364350 'referenced modules list' ShallowCopy[277381])
                  } label _continueLabel[281289] _indexOfInterest[281284] _iterator[281285]
                } label _breakLabel[281290]
              }
            }(281658 call _downEndCount _coforallCount[281655] nil[44])(281657 'coforall loop')(280985 'actuals list' tiMarkRef[294] state[279852])
          } label _continueLabel[281668] _indexOfInterest[281663] _iterator[281664]
        } label _breakLabel[281669]
        Defer
        {
          {(281700 call _endCountFree _coforallCount[281655])
          }
        }(281705 call _waitEndCount _coforallCount[281655] 1)
      }
    } unknown counts[281738] "ref var"(281735 call . state[279852] c"counts")(281741 'end of statement')
    Forall {
      induction variables:
        unknown bin[281829] "index var" "insert auto destroy"
      iterated expressions:
        (281747 call #(281744 call chpl_build_low_bounded_range 0) nBuckets[279922])
      shadow variables:
      other variables
        forall body
      { unknown total[281750] 0(281753 'end of statement')
        { unknown _indexOfInterest[281780] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281781] "expr temp" "temp"(281790 'move' _iterator[281781](281788 call _getIterator(281797 call chpl_direct_counted_range_iter 0 nTasks[279952])))
          Defer
          {
            {(281813 call _freeIterator _iterator[281781])
            }
          }
          { scopeless type(281802 'move' _indexOfInterest[281780](281799 call iteratorIndex _iterator[281781]))
          }
          ForLoop[281782]
          { unknown tid[281806] "index var" "insert auto destroy"(281808 'move' tid[281806] _indexOfInterest[281780])
            {(281776 call += total[281750](281775 call(281764 call . state[279852] c"globalCounts")(281772 call +(281769 call * bin[281829] nTasks[279952]) tid[281806])))
            } label _continueLabel[281785] _indexOfInterest[281780] _iterator[281781]
          } label _breakLabel[281786]
        }(281825 call =(281823 call counts[281738] bin[281829]) total[281750])
      }
    }
  } function testBucketize[281840](arg start_n[281837] : int(64)[13], arg end_n[281843] : int(64)[13], arg dst[281849] :(281846 call chpl__buildArrayRuntimeType nil[44]), arg src[281855] :(281852 call chpl__buildArrayRuntimeType nil[44]), arg bucketizer[281858]:_any[178](?), arg criterion[281860]:_any[178](?), arg startbit[281863] : int(64)[13]) : _unknown[51]
  { unknown state[281872](281866 'new'(281871 call TwoArrayBucketizerSharedState[279538](?)(bucketizer = bucketizer[281858])))(281875 'end of statement')(281886 call bucketize start_n[281837] end_n[281843] dst[281849] src[281855] state[281872] criterion[281860] startbit[281863])(281892 return(281889 call . state[281872] c"counts"))
  } function partitioningSortWithScratchSpaceHandleSampling[281902](arg start_n[281899] : int(64)[13], arg end_n[281905] : int(64)[13], arg A[281911] :(281908 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[281917] :(281914 call chpl__buildArrayRuntimeType nil[44]), ref arg state[281921] : TwoArrayBucketizerSharedState[279538](?), arg criterion[281924]:_any[178](?), arg startbit[281927] : int(64)[13]) : _unknown[51] "private" "no return value for void"
  {
    if(282246 call _cond_test(354892 'is_subtype' SampleBucketizer[275526](?)(281936 'typeof'(281933 call . state[281921] c"bucketizer"))))
    { unknown n[281952](281950 call -(281947 call + 1 end_n[281905]) start_n[281899])(281955 'end of statement') unknown logNumBuckets[281966](281965 call computeLogBucketSize module=[255] SampleSortHelp[273896] n[281952])(281969 'end of statement') unknown numBuckets[281974](281972 call << 1 logNumBuckets[281966])(281977 'end of statement') unknown sampleStep[281988](281987 call chooseSampleStep module=[255] SampleSortHelp[273896] n[281952] logNumBuckets[281966])(281991 'end of statement') unknown sampleSize[281999](281997 call -(281994 call * sampleStep[281988] numBuckets[281974]) 1)(282002 'end of statement')
      if(282047 call _cond_test(282005 call >= sampleSize[281999] n[281952]))
      {
        if(282029 call _cond_test debug[279219])
        {(282027 call writeln "Reducing sample size because it was too big")
        }(282044 call = sampleSize[281999](282043 call max 1(282041 call / n[281952] 2)))
      }(282062 call putRandomSampleAtArrayStart module=[255] SampleSortHelp[273896] start_n[281899] end_n[281905] A[281911] sampleSize[281999])
      if(282086 call _cond_test debug[279219])
      {(282084 call writeln "recursing to sort the sample")
      }
      if(282141 call _cond_test(282096 call <= sampleSize[281999](282094 call * 1024 1024)))
      {(282120 call msbRadixSort start_n[281899](282106 call -(282103 call + start_n[281899] sampleSize[281999]) 1) A[281911] criterion[281924] startbit[281927](282112 call . state[281921] c"endbit")(settings =(282115 'new'(282118 call MSBRadixSortSettings[288042](?)))))
      }
      {(282138 call partitioningSortWithScratchSpace start_n[281899](282131 call -(282128 call + start_n[281899] sampleSize[281999]) 1) A[281911] Scratch[281917] state[281921] criterion[281924] startbit[281927])
      }
      if(282167 call _cond_test debug[279219])
      {(282164 call checkSorted module=[255] RadixSortHelp[276074] start_n[281899](282159 call -(282156 call + start_n[281899] sampleSize[281999]) 1) A[281911] criterion[281924] startbit[281927])(364391 'referenced modules list' RadixSortHelp[276074])
      }(282183 call createSplittersFromSample A[281911](282175 call . state[281921] c"bucketizer") criterion[281924] start_n[281899] sampleSize[281999] sampleStep[281988] numBuckets[281974])
      if(282242 call _cond_test debug[279219])
      {(282209 call writeln "sample bucketizer "(282206 call . state[281921] c"bucketizer"))(282240 call writef "A %i %i A=%xt\n" start_n[281899] end_n[281905](282239 call A[281911](282236 call chpl_build_bounded_range start_n[281899] end_n[281905])))
      }(364374 'referenced modules list' SampleSortHelp[273896] SampleSortHelp[273896] SampleSortHelp[273896])
    }(364370 'referenced modules list' SampleSortHelp[273896])
  }
  { scopeless type void[4]
  } function partitioningSortWithScratchSpace[282260](arg start_n[282257] : int(64)[13], arg end_n[282263] : int(64)[13], arg A[282269] :(282266 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[282275] :(282272 call chpl__buildArrayRuntimeType nil[44]), ref arg state[282279] : TwoArrayBucketizerSharedState[279538](?), arg criterion[282282]:_any[178](?), arg startbit[282285] : int(64)[13]) : _unknown[51] "no return value for void"
  {
    if(282298 call _cond_test(282294 call > startbit[282285](282291 call . state[282279] c"endbit")))
    {(282296 return _void[55])
    }
    if(282332 call _cond_test(282312 call <(282306 call - end_n[282263] start_n[282257])(282309 call . state[282279] c"baseCaseSize")))
    {(282327 call shellSort module=[255] ShellSort[273520] A[282269] criterion[282282](start = start_n[282257])(end = end_n[282263]))(282330 return _void[55])(364401 'referenced modules list' ShellSort[273520])
    }
    if(282377 call _cond_test debug[279219])
    {(282360 call writeln "partitioningSortWithScratchSpace(" start_n[282257] "," end_n[282263] ")")(282375 call writef "A %i %i A=%xt\n" start_n[282257] end_n[282263](282374 call A[282269](282371 call chpl_build_bounded_range start_n[282257] end_n[282263])))
    } const n[282388] "const"(282386 call +(282383 call - end_n[282263] start_n[282257]) 1)(282391 'end of statement') const maxSequentialSize[282414] "const"(282413 call max(282398 call / n[282388](282395 call . state[282279] c"nTasks"))(282411 call *(282402 call . state[282279] c"nTasks")(282408 call . state[282279] c"sequentialSizePerTask")))(282417 'end of statement')(282439 call(282424 call .(282421 call . state[282279] c"bigTasks") c"append")(282427 'new'(282437 call TwoArraySortTask[279339] start_n[282257] n[282388] startbit[282285](inA = 1)(doSort = 1))))(282453 call assert(282450 call ==(282446 call .(282443 call . state[282279] c"bigTasks") c"size") 1))(282469 call assert(282466 call ==(282462 call .(282459 call . state[282279] c"smallTasks") c"size") 0))
    { unknown tmp[283122] "temp"(283158 'move' tmp[283122](283147 call _cond_test(283149 call !(283157 call(283151 call .(283153 call . state[282279] c"bigTasks") c"isEmpty")))))
      WhileDo[283127]
      {
        { const task[282493] "const"(282492 call(282488 call .(282483 call . state[282279] c"bigTasks") c"pop"))(282496 'end of statement') const taskEnd[282511] "const"(282509 call -(282506 call +(282499 call . task[282493] c"start")(282503 call . task[282493] c"size")) 1)(282514 'end of statement')(282521 call assert(282517 call . task[282493] c"doSort"))
          if(282553 call _cond_test debug[279219])
          {(282550 call writeln "doing big task "(282548 call chpl_build_bounded_range(282544 call . task[282493] c"start") taskEnd[282511]))
          }
          if(282715 call _cond_test(282558 call . task[282493] c"inA"))
          {(282576 call partitioningSortWithScratchSpaceHandleSampling(282563 call . task[282493] c"start") taskEnd[282511] A[282269] Scratch[282275] state[282279] criterion[282282](282573 call . task[282493] c"startbit"))(282594 call bucketize(282581 call . task[282493] c"start") taskEnd[282511] Scratch[282275] A[282269] state[282279] criterion[282282](282591 call . task[282493] c"startbit"))
            if(282634 call _cond_test debug[279219])
            {(282631 call writef "pb %i %i Scratch=%xt\n"(282617 call . task[282493] c"start") taskEnd[282511](282630 call Scratch[282275](282627 call chpl_build_bounded_range(282623 call . task[282493] c"start") taskEnd[282511])))
            }
          }
          {(282653 call partitioningSortWithScratchSpaceHandleSampling(282640 call . task[282493] c"start") taskEnd[282511] Scratch[282275] A[282269] state[282279] criterion[282282](282650 call . task[282493] c"startbit"))(282671 call bucketize(282658 call . task[282493] c"start") taskEnd[282511] A[282269] Scratch[282275] state[282279] criterion[282282](282668 call . task[282493] c"startbit"))
            if(282711 call _cond_test debug[279219])
            {(282708 call writef "pb %i %i A=%xt\n"(282694 call . task[282493] c"start") taskEnd[282511](282707 call A[282269](282704 call chpl_build_bounded_range(282700 call . task[282493] c"start") taskEnd[282511])))
            }
          } const nowInA[282725] "const"(282723 call !(282720 call . task[282493] c"inA"))(282728 'end of statement') function chpl__scan5[282740](arg chpl_toScan[282742]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
          { unknown chpl_eltType[282744] "maybe type" "temp"
            { scopeless type(282748 'move' chpl_eltType[282744](282750 'typeof'(282752 call chpl__initCopy(282754 call iteratorIndex(282756 call _getIterator chpl_toScan[282742])))))
            } const tmp[282745] "const" "temp"(282765 'move' tmp[282745](282764 'new'(282763 call SumReduceScanOp[376372](?)(eltType = chpl_eltType[282744])(_chpl_manager = unmanaged[220](?)))))(282767 return(282769 call chpl__scanIterator tmp[282745] chpl_toScan[282742]))
          }(282780 call =(282732 call . state[282279] c"ends")(282778 call +(282773 call chpl__scan5(282737 call . state[282279] c"counts"))(282775 call . task[282493] c"start"))) const nBuckets[282792] "const"(282791 call(282787 call .(282784 call . state[282279] c"bucketizer") c"getNumBuckets"))(282795 'end of statement')
          { unknown _indexOfInterest[283082] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[283083] "expr temp" "temp"(283092 'move' _iterator[283083](283090 call _getIterator(283099 call chpl_direct_counted_range_iter 0 nBuckets[282792])))
            Defer
            {
              {(283115 call _freeIterator _iterator[283083])
              }
            }
            { scopeless type(283104 'move' _indexOfInterest[283082](283101 call iteratorIndex _iterator[283083]))
            }
            ForLoop[283084]
            { unknown bin[283108] "index var" "insert auto destroy"(283110 'move' bin[283108] _indexOfInterest[283082])
              { const binSize[282810] "const"(282809 call(282804 call . state[282279] c"counts") bin[283108])(282813 'end of statement') const binStart[282825] "const"(282823 call -(282821 call(282816 call . state[282279] c"ends") bin[283108]) binSize[282810])(282828 'end of statement') const binEnd[282836] "const"(282834 call -(282831 call + binStart[282825] binSize[282810]) 1)(282839 'end of statement') const binStartBit[282855] "const"(282854 call(282846 call .(282841 call . state[282279] c"bucketizer") c"getNextStartBit")(282850 call . task[282493] c"startbit"))(282858 'end of statement') const sortit[282876] "const"(282875 call(282870 call .(282869 call(282865 call .(282860 call . state[282279] c"bucketizer") c"getBinsToRecursivelySort")) c"contains") bin[283108])(282879 'end of statement')
                if(283077 call _cond_test(282882 call == binSize[282810] 0))
                {
                }
                {
                  if(283072 call _cond_test(282891 call &&(282886 call ! nowInA[282725])(282889 call ! sortit[282876])))
                  {(282910 call(282897 call .(282894 call . state[282279] c"smallTasks") c"append")(282900 'new'(282908 call TwoArraySortTask[279339] binStart[282825] binSize[282810] binStartBit[282855] nowInA[282725] sortit[282876])))
                  }
                  {
                    if(283068 call _cond_test(282930 call ||(282924 call ||(282918 call > binStartBit[282855](282915 call . state[282279] c"endbit"))(282922 call >= binStart[282825] binEnd[282836]))(282928 call <= binSize[282810] maxSequentialSize[282414])))
                    {
                      if(282984 call _cond_test(282937 call && debug[279219](282935 call > binSize[282810] 0)))
                      {(282981 call writeln "handling bin " bin[283108] " "(282962 call chpl_build_bounded_range binStart[282825] binEnd[282836]) " as small")
                      }(283006 call(282993 call .(282990 call . state[282279] c"smallTasks") c"append")(282996 'new'(283004 call TwoArraySortTask[279339] binStart[282825] binSize[282810] binStartBit[282855] nowInA[282725] sortit[282876])))
                    }
                    {
                      if(283044 call _cond_test(283013 call && debug[279219](283011 call > binSize[282810] 0)))
                      {(283041 call writeln "handling bin " bin[283108] " "(283022 call chpl_build_bounded_range binStart[282825] binEnd[282836]) " as big")
                      }(283066 call(283053 call .(283050 call . state[282279] c"bigTasks") c"append")(283056 'new'(283064 call TwoArraySortTask[279339] binStart[282825] binSize[282810] binStartBit[282855] nowInA[282725] sortit[282876])))
                    }
                  }
                }
              } label _continueLabel[283087] _indexOfInterest[283082] _iterator[283083]
            } label _breakLabel[283088]
          }
        } label _continueLabel[283125](283142 'move' tmp[283122](283131 call _cond_test(283133 call !(283141 call(283135 call .(283137 call . state[282279] c"bigTasks") c"isEmpty"))))) tmp[283122]
      } label _breakLabel[283126]
    }
    Forall {
      induction variables:
        unknown task[283305] "index var" "insert auto destroy"
      iterated expressions:
        (283163 call . state[282279] c"smallTasks")
      shadow variables:
      other variables
        forall body
      { const size[283170] "const"(283167 call . task[283305] c"size")(283173 'end of statement') const taskEnd[283185] "const"(283183 call -(283180 call +(283176 call . task[283305] c"start") size[283170]) 1)(283188 'end of statement')
        if(283300 call _cond_test(283191 call > size[283170] 0))
        {
          if(283218 call _cond_test(283197 call !(283194 call . task[283305] c"inA")))
          {(283215 call shallowCopy module=[255] ShallowCopy[277381] A[282269](283206 call . task[283305] c"start") Scratch[282275](283211 call . task[283305] c"start") size[283170])(364451 'referenced modules list' ShallowCopy[277381])
          }
          if(283261 call _cond_test debug[279219])
          {(283258 call writef "doing small task %i %i A=%xt\n"(283244 call . task[283305] c"start") taskEnd[283185](283257 call A[282269](283254 call chpl_build_bounded_range(283250 call . task[283305] c"start") taskEnd[283185])))
          }
          if(283296 call _cond_test(283266 call . task[283305] c"doSort"))
          {(283293 call msbRadixSort(283271 call . task[283305] c"start") taskEnd[283185] A[282269] criterion[282282](283279 call . task[283305] c"startbit")(283283 call . state[282279] c"endbit")(settings =(283286 'new'(283291 call MSBRadixSortSettings[288042](?)(alwaysSerial = 1)))))
          }
        }
      }
    }
    if(283382 call _cond_test debug[279219])
    {(283337 call writef "ps %i %i A=%xt\n" start_n[282257] end_n[282263](283336 call A[282269](283333 call chpl_build_bounded_range start_n[282257] end_n[282263])))(283368 call writef "ps %i %i Scratch=%xt\n" start_n[282257] end_n[282263](283367 call Scratch[282275](283364 call chpl_build_bounded_range start_n[282257] end_n[282263])))(283380 call checkSorted module=[255] RadixSortHelp[276074] start_n[282257] end_n[282263] A[282269] criterion[282282] startbit[282285])(364465 'referenced modules list' RadixSortHelp[276074])
    }
  }
  { scopeless type void[4]
  } function distributedPartitioningSortWithScratchSpaceBaseCase[283395](arg start_n[283392] : int(64)[13], arg end_n[283398] : int(64)[13], arg A[283404] :(283401 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283410] :(283407 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283414] : TwoArrayDistributedBucketizerSharedState[279820](?), arg criterion[283417]:_any[178](?), arg startbit[283420] : int(64)[13]) : _unknown[51] "private" "no return value for void"
  {
    if(283433 call _cond_test(283429 call > startbit[283420](283426 call . state[283414] c"endbit")))
    {(283431 return _void[55])
    } const n[283446] "const"(283444 call +(283441 call - end_n[283398] start_n[283392]) 1)(283449 'end of statement') const localSubdomain[283458] "const"(283457 call(283453 call . A[283404] c"localSubdomain"))(283461 'end of statement') const curDomain[283469] "const"(283467 call chpl__buildDomainExpr(283464 call chpl_build_bounded_range start_n[283392] end_n[283398]))(283472 'end of statement') const intersect[283477] "const"(283476 call curDomain[283469] localSubdomain[283458])(283480 'end of statement')
    if(283641 call _cond_test(283483 call == curDomain[283469] intersect[283477]))
    {
      if(283539 call _cond_test(283490 call > n[283446](283487 call . state[283414] c"baseCaseSize")))
      {(283516 call msbRadixSort start_n[283392] end_n[283398](283504 call(283499 call . A[283404] c"localSlice") curDomain[283469]) criterion[283417] startbit[283420](283508 call . state[283414] c"endbit")(settings =(283511 'new'(283514 call MSBRadixSortSettings[288042](?)))))
      }
      {(283536 call shellSort module=[255] ShellSort[273520](283529 call(283524 call . A[283404] c"localSlice") curDomain[283469]) criterion[283417](start = start_n[283392])(end = end_n[283398]))(364476 'referenced modules list' ShellSort[273520])
      }
    }
    { const size[283551] "const"(283549 call +(283546 call - end_n[283398] start_n[283392]) 1)(283554 'end of statement') unknown LocalA[283569](283567 call chpl__buildArrayRuntimeType(283565 call chpl__ensureDomainExpr(283558 call chpl_build_bounded_range start_n[283392] end_n[283398]))(283562 call . A[283404] c"eltType"))(283572 'end of statement')(283583 call shallowCopy module=[255] ShallowCopy[277381] LocalA[283569] start_n[283392] A[283404] start_n[283392] size[283551])
      if(283625 call _cond_test(283590 call > n[283446](283587 call . state[283414] c"baseCaseSize")))
      {(283608 call msbRadixSort start_n[283392] end_n[283398] LocalA[283569] criterion[283417] startbit[283420](283600 call . state[283414] c"endbit")(settings =(283603 'new'(283606 call MSBRadixSortSettings[288042](?)))))
      }
      {(283622 call shellSort module=[255] ShellSort[273520] LocalA[283569] criterion[283417](start = start_n[283392])(end = end_n[283398]))(364492 'referenced modules list' ShellSort[273520])
      }(283639 call shallowCopy module=[255] ShallowCopy[277381] A[283404] start_n[283392] LocalA[283569] start_n[283392] size[283551])(364484 'referenced modules list' ShallowCopy[277381] ShallowCopy[277381])
    }
    if(283658 call _cond_test debug[279219])
    {(283655 call checkSorted module=[255] RadixSortHelp[276074] start_n[283392] end_n[283398] A[283404] criterion[283417])(364503 'referenced modules list' RadixSortHelp[276074])
    }(283662 return _void[55])
  }
  { scopeless type void[4]
  } function distributedPartitioningSortWithScratchSpaceHandleSampling[283673](arg start_n[283670] : int(64)[13], arg end_n[283676] : int(64)[13], arg A[283682] :(283679 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283688] :(283685 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283692] : TwoArrayDistributedBucketizerSharedState[279820](?), arg criterion[283695]:_any[178](?), arg startbit[283698] : int(64)[13]) : _unknown[51] "private" "no return value for void"
  {
    if(284040 call _cond_test(354897 'is_subtype' SampleBucketizer[275526](?)(283718 'typeof'(283715 call .(283712 call .(283711 call(283706 call . state[283692] c"perLocale") 0) c"compat") c"bucketizer"))))
    { unknown n[283732](283730 call -(283727 call + 1 end_n[283676]) start_n[283670])(283735 'end of statement') unknown logNumBuckets[283744](283743 call computeLogBucketSize module=[255] SampleSortHelp[273896] n[283732])(283747 'end of statement') unknown numBuckets[283752](283750 call << 1 logNumBuckets[283744])(283755 'end of statement') unknown sampleStep[283764](283763 call chooseSampleStep module=[255] SampleSortHelp[273896] n[283732] logNumBuckets[283744])(283767 'end of statement') unknown sampleSize[283775](283773 call -(283770 call * sampleStep[283764] numBuckets[283752]) 1)(283778 'end of statement')
      if(283807 call _cond_test(283781 call >= sampleSize[283775] n[283732]))
      {
        if(283789 call _cond_test debug[279219])
        {(283787 call writeln "Reducing sample size because it was too big")
        }(283804 call = sampleSize[283775](283803 call max 1(283801 call / n[283732] 2)))
      }(283820 call putRandomSampleAtArrayStart module=[255] SampleSortHelp[273896] start_n[283670] end_n[283676] A[283682] sampleSize[283775])
      if(283828 call _cond_test debug[279219])
      {(283826 call writeln "recursing to sort the sample")
      }
      if(283876 call _cond_test(283838 call <= sampleSize[283775](283836 call * 1024 1024)))
      {(283855 call distributedPartitioningSortWithScratchSpaceBaseCase start_n[283670](283848 call -(283845 call + start_n[283670] sampleSize[283775]) 1) A[283682] Scratch[283688] state[283692] criterion[283695] startbit[283698])
      }
      {(283873 call distributedPartitioningSortWithScratchSpace start_n[283670](283866 call -(283863 call + start_n[283670] sampleSize[283775]) 1) A[283682] Scratch[283688] state[283692] criterion[283695] startbit[283698])
      }
      if(283900 call _cond_test debug[279219])
      {(283897 call checkSorted module=[255] RadixSortHelp[276074] start_n[283670](283892 call -(283889 call + start_n[283670] sampleSize[283775]) 1) A[283682] criterion[283695] startbit[283698])(364530 'referenced modules list' RadixSortHelp[276074])
      }(283925 call createSplittersFromSample A[283682](283917 call .(283914 call .(283913 call(283908 call . state[283692] c"perLocale") 0) c"compat") c"bucketizer") criterion[283695] start_n[283670] sampleSize[283775] sampleStep[283764] numBuckets[283752])
      if(283961 call _cond_test debug[279219])
      {(283944 call writeln "sample bucketizer "(283941 call .(283938 call .(283937 call(283932 call . state[283692] c"perLocale") 0) c"compat") c"bucketizer"))(283959 call writef "A %i %i A=%xt\n" start_n[283670] end_n[283676](283958 call A[283682](283955 call chpl_build_bounded_range start_n[283670] end_n[283676])))
      }
      { unknown _indexOfInterest[283999] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284000] "expr temp" "temp"(284009 'move' _iterator[284000](284007 call _getIterator(284017 call chpl_direct_range_iter 1(284014 call . state[283692] c"numLocales") 1)))
        Defer
        {
          {(284033 call _freeIterator _iterator[284000])
          }
        }
        { scopeless type(284022 'move' _indexOfInterest[283999](284019 call iteratorIndex _iterator[284000]))
        }
        ForLoop[284001]
        { unknown lid[284026] "index var" "insert auto destroy"(284028 'move' lid[284026] _indexOfInterest[283999])
          {(283995 call =(283982 call .(283981 call(283976 call . state[283692] c"perLocale") lid[284026]) c"bucketizer")(283992 call .(283991 call(283986 call . state[283692] c"perLocale") 0) c"bucketizer"))
          } label _continueLabel[284004] _indexOfInterest[283999] _iterator[284000]
        } label _breakLabel[284005]
      }(364514 'referenced modules list' SampleSortHelp[273896] SampleSortHelp[273896] SampleSortHelp[273896])
    }(364510 'referenced modules list' SampleSortHelp[273896])
  }
  { scopeless type void[4]
  } function distributedPartitioningSortWithScratchSpace[284054](arg start_n[284051] : int(64)[13], arg end_n[284057] : int(64)[13], arg A[284063] :(284060 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[284069] :(284066 call chpl__buildArrayRuntimeType nil[44]), ref arg state[284073] : TwoArrayDistributedBucketizerSharedState[279820](?), arg criterion[284076]:_any[178](?), arg startbit[284079] : int(64)[13]) : _unknown[51] "no return value for void"
  {
    if(284115 call _cond_test(284091 call !(284090 call(284086 call . A[284063] c"hasSingleLocalSubdomain"))))
    {(284112 call compilerError "distributedPartitioningSortWithScratchSpace needs single local subdomain")
    }
    if(284129 call _cond_test(284125 call > startbit[284079](284122 call . state[284073] c"endbit")))
    {(284127 return _void[55])
    }
    if(284158 call _cond_test(284142 call <(284136 call - end_n[284057] start_n[284051])(284139 call . state[284073] c"baseCaseSize")))
    {(284153 call distributedPartitioningSortWithScratchSpaceBaseCase start_n[284051] end_n[284057] A[284063] Scratch[284069] state[284073] criterion[284076] startbit[284079])(284156 return _void[55])
    }
    if(284227 call _cond_test debug[279219])
    {(284224 call writeln "in distributed radix sort " start_n[284051] ".." end_n[284057] " startbit " startbit[284079] " endbit "(284221 call . state[284073] c"endbit"))
    } const n[284238] "const"(284236 call +(284233 call - end_n[284057] start_n[284051]) 1)(284241 'end of statement')(284261 call(284248 call .(284245 call . state[284073] c"distTasks") c"append")(284251 'new'(284259 call TwoArraySortTask[279339] start_n[284051] n[284238] startbit[284079] 1 1)))(284275 call assert(284272 call ==(284268 call .(284265 call . state[284073] c"distTasks") c"size") 1))
    { unknown tmp[286899] "temp"(286935 'move' tmp[286899](286924 call _cond_test(286926 call !(286934 call(286928 call .(286930 call . state[284073] c"distTasks") c"isEmpty")))))
      WhileDo[286904]
      {
        { const task[284297] "const"(284296 call(284292 call .(284289 call . state[284073] c"distTasks") c"pop"))(284300 'end of statement') const taskStart[284306] "const"(284303 call . task[284297] c"start")(284309 'end of statement') const taskEnd[284323] "const"(284321 call -(284318 call +(284311 call . task[284297] c"start")(284315 call . task[284297] c"size")) 1)(284326 'end of statement')(284333 call assert(284329 call . task[284297] c"doSort"))(284341 call assert(284337 call . task[284297] c"inA"))(284358 call distributedPartitioningSortWithScratchSpaceHandleSampling(284345 call . task[284297] c"start") taskEnd[284323] A[284063] Scratch[284069] state[284073] criterion[284076](284355 call . task[284297] c"startbit")) const nBuckets[284378] "const"(284377 call(284373 call .(284370 call .(284367 call .(284366 call(284361 call . state[284073] c"perLocale") 0) c"compat") c"bucketizer") c"getNumBuckets"))(284381 'end of statement') const nTasks[284386] "const"(284383 call . state[284073] c"numLocales")(284389 'end of statement')
          { unknown tmpIter[284722] "expr temp" "maybe ref" "no copy" "temp"(284725 'move' tmpIter[284722](284407 call _build_tuple(284402 call(284398 call . A[284063] c"targetLocales"))(284405 call chpl_build_low_bounded_range 0))) unknown isRngDomArr[285122] "maybe param" "temp"(285137 'move' isRngDomArr[285122](285135 call ||(285124 call isBoundedRange tmpIter[284722])(285133 call ||(285127 call isDomain tmpIter[284722])(285130 call isArray tmpIter[284722]))))
            if isRngDomArr[285122]
            { const _coforallCount[284966] "const" "end count" "temp"(285045 'move' _coforallCount[284966](285042 call _endCountAlloc 0)) unknown numTasks[284967] "temp"(285029 'move' numTasks[284967](285025 call . tmpIter[284722] c"size"))(285020 call _upEndCount _coforallCount[284966] 0 numTasks[284967]) unknown _indexOfInterest[284973] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284974] "expr temp" "temp"(284983 'move' _iterator[284974](284981 call _getIteratorZip tmpIter[284722]))
              Defer
              {
                {(285013 call _freeIterator _iterator[284974])
                }
              }
              { scopeless type(284988 'move' _indexOfInterest[284973](284985 call iteratorIndex _iterator[284974]))
              }
              ForLoop[284975]
              {(284993 call _check_tuple_var_decl _indexOfInterest[284973] 2) unknown loc[284999] "coforall index var" "index var" "insert auto destroy"(285001 'move' loc[284999](284997 call _indexOfInterest[284973] 0)) unknown tid[285006] "coforall index var" "index var" "insert auto destroy"(285008 'move' tid[285006](285004 call _indexOfInterest[284973] 1)) const tmp[284731] "const" "temp"(284733 'move' tmp[284731](284735 'deref'(284736 '_wide_get_locale' loc[284999])))
                {
                  { const localDomain[284744] "const"(284750 call(284749 call(284746 call . A[284063] c"localSubdomain"))(284752 call chpl_build_bounded_range(284754 call . task[284297] c"start") taskEnd[284323]))(284759 'end of statement') unknown localSrc[284761] "ref var"(284766 call(284763 call . A[284063] c"localSlice") localDomain[284744])(284769 'end of statement') unknown localDst[284771] "ref var"(284776 call(284773 call . Scratch[284069] c"localSlice") localDomain[284744])(284779 'end of statement')(284781 call bucketize(284783 call . localDomain[284744] c"alignedLow")(284787 call . localDomain[284744] c"alignedHigh") localDst[284771] localSrc[284761](284793 call .(284798 call(284795 call . state[284073] c"perLocale") tid[285006]) c"compat") criterion[284076](284803 call . task[284297] c"startbit")) unknown localCounts[284807] "ref var"(284809 call .(284811 call .(284816 call(284813 call . state[284073] c"perLocale") tid[285006]) c"compat") c"counts")(284821 'end of statement')
                    if(284823 call _cond_test debug[279219])
                    { unknown total[284827] 0(284830 'end of statement')
                      { unknown _indexOfInterest[284832] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284834] "expr temp" "temp"(284836 'move' _iterator[284834](284839 call _getIterator(284841 call chpl_direct_counted_range_iter 0 nBuckets[284378])))
                        Defer
                        {
                          {(284846 call _freeIterator _iterator[284834])
                          }
                        }
                        { scopeless type(284850 'move' _indexOfInterest[284832](284853 call iteratorIndex _iterator[284834]))
                        }
                        ForLoop[284855]
                        { unknown bin[284858] "index var" "insert auto destroy"(284860 'move' bin[284858] _indexOfInterest[284832])
                          {
                            if(284865 call _cond_test(284867 call >(284869 call localCounts[284807] bin[284858]) 0))
                            {(284874 call writeln "localCounts[" bin[284858] "]="(284879 call localCounts[284807] bin[284858]))(284882 call += total[284827](284885 call localCounts[284807] bin[284858]))
                            }
                          } label _continueLabel[284888] _indexOfInterest[284832] _iterator[284834]
                        } label _breakLabel[284890]
                      }(284893 call assert(284895 call == total[284827](284898 call . localDomain[284744] c"size")))
                    }
                    { unknown _indexOfInterest[284903] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284905] "expr temp" "temp"(284907 'move' _iterator[284905](284910 call _getIterator(284912 call vectorizeOnly(284914 call #(284916 call chpl_build_low_bounded_range 0) nBuckets[284378]))))
                      Defer
                      {
                        {(284921 call _freeIterator _iterator[284905])
                        }
                      }
                      { scopeless type(284925 'move' _indexOfInterest[284903](284928 call iteratorIndex _iterator[284905]))
                      }
                      ForLoop[284930]
                      { unknown bin[284933] "index var" "insert auto destroy"(284935 'move' bin[284933] _indexOfInterest[284903])
                        {(284940 call =(284950 call(284942 call .(284947 call(284944 call . state[284073] c"perLocale") 0) c"globalCounts")(284952 call +(284954 call * bin[284933] nTasks[284386]) tid[285006]))(284959 call localCounts[284807] bin[284933]))
                        } label _continueLabel[284961] _indexOfInterest[284903] _iterator[284905]
                      } label _breakLabel[284963]
                    }
                  }(284968 call _downEndCount _coforallCount[284966] nil[44])(284739 'coforall on block' 0 tmp[284731])(284727 'actuals list' tiMarkRef[294] state[284073])
                } label _continueLabel[284978] _indexOfInterest[284973] _iterator[284974]
              } label _breakLabel[284979]
              Defer
              {
                {(285032 call _endCountFree _coforallCount[284966])
                }
              }(285037 call _waitEndCount _coforallCount[284966] 0 numTasks[284967])
            }
            { const _coforallCount[285049] "const" "end count" "temp"(285119 'move' _coforallCount[285049](285116 call _endCountAlloc 0)) unknown _indexOfInterest[285056] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[285057] "expr temp" "temp"(285066 'move' _iterator[285057](285064 call _getIteratorZip tmpIter[284722]))
              Defer
              {
                {(285096 call _freeIterator _iterator[285057])
                }
              }
              { scopeless type(285071 'move' _indexOfInterest[285056](285068 call iteratorIndex _iterator[285057]))
              }
              ForLoop[285058]
              {(285076 call _check_tuple_var_decl _indexOfInterest[285056] 2) unknown loc[285082] "coforall index var" "index var" "insert auto destroy"(285084 'move' loc[285082](285080 call _indexOfInterest[285056] 0)) unknown tid[285089] "coforall index var" "index var" "insert auto destroy"(285091 'move' tid[285089](285087 call _indexOfInterest[285056] 1))(285103 call _upEndCount _coforallCount[285049] 0) const tmp[284712] "const" "temp"(284714 'move' tmp[284712](284710 'deref'(284709 '_wide_get_locale' loc[285082])))
                {
                  { const localDomain[284432] "const"(284431 call(284422 call(284418 call . A[284063] c"localSubdomain"))(284428 call chpl_build_bounded_range(284424 call . task[284297] c"start") taskEnd[284323]))(284435 'end of statement') unknown localSrc[284444] "ref var"(284443 call(284438 call . A[284063] c"localSlice") localDomain[284432])(284447 'end of statement') unknown localDst[284455] "ref var"(284454 call(284449 call . Scratch[284069] c"localSlice") localDomain[284432])(284458 'end of statement')(284486 call bucketize(284461 call . localDomain[284432] c"alignedLow")(284466 call . localDomain[284432] c"alignedHigh") localDst[284455] localSrc[284444](284478 call .(284477 call(284472 call . state[284073] c"perLocale") tid[285089]) c"compat") criterion[284076](284483 call . task[284297] c"startbit")) unknown localCounts[284501] "ref var"(284498 call .(284495 call .(284494 call(284489 call . state[284073] c"perLocale") tid[285089]) c"compat") c"counts")(284504 'end of statement')
                    if(284634 call _cond_test debug[279219])
                    { unknown total[284507] 0(284510 'end of statement')
                      { unknown _indexOfInterest[284583] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284584] "expr temp" "temp"(284593 'move' _iterator[284584](284591 call _getIterator(284600 call chpl_direct_counted_range_iter 0 nBuckets[284378])))
                        Defer
                        {
                          {(284616 call _freeIterator _iterator[284584])
                          }
                        }
                        { scopeless type(284605 'move' _indexOfInterest[284583](284602 call iteratorIndex _iterator[284584]))
                        }
                        ForLoop[284585]
                        { unknown bin[284609] "index var" "insert auto destroy"(284611 'move' bin[284609] _indexOfInterest[284583])
                          {
                            if(284578 call _cond_test(284524 call >(284522 call localCounts[284501] bin[284609]) 0))
                            {(284567 call writeln "localCounts[" bin[284609] "]="(284566 call localCounts[284501] bin[284609]))(284575 call += total[284507](284574 call localCounts[284501] bin[284609]))
                            }
                          } label _continueLabel[284588] _indexOfInterest[284583] _iterator[284584]
                        } label _breakLabel[284589]
                      }(284632 call assert(284629 call == total[284507](284626 call . localDomain[284432] c"size")))
                    }
                    { unknown _indexOfInterest[284675] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284676] "expr temp" "temp"(284685 'move' _iterator[284676](284683 call _getIterator(284647 call vectorizeOnly(284644 call #(284641 call chpl_build_low_bounded_range 0) nBuckets[284378]))))
                      Defer
                      {
                        {(284702 call _freeIterator _iterator[284676])
                        }
                      }
                      { scopeless type(284691 'move' _indexOfInterest[284675](284688 call iteratorIndex _iterator[284676]))
                      }
                      ForLoop[284677]
                      { unknown bin[284695] "index var" "insert auto destroy"(284697 'move' bin[284695] _indexOfInterest[284675])
                        {(284671 call =(284666 call(284655 call .(284654 call(284649 call . state[284073] c"perLocale") 0) c"globalCounts")(284663 call +(284660 call * bin[284695] nTasks[284386]) tid[285089]))(284670 call localCounts[284501] bin[284695]))
                        } label _continueLabel[284680] _indexOfInterest[284675] _iterator[284676]
                      } label _breakLabel[284681]
                    }
                  }(285051 call _downEndCount _coforallCount[285049] nil[44])(284717 'coforall on block' 0 tmp[284712])(284413 'actuals list' tiMarkRef[294] state[284073])
                } label _continueLabel[285061] _indexOfInterest[285056] _iterator[285057]
              } label _breakLabel[285062]
              Defer
              {
                {(285107 call _endCountFree _coforallCount[285049])
                }
              }(285112 call _waitEndCount _coforallCount[285049] 0)
            }
          }
          if(285174 call _cond_test debug[279219])
          {(285171 call writef "after bucketize local portions, Scratch is %xt\n"(285170 call Scratch[284069](285167 call chpl_build_bounded_range(285163 call . task[284297] c"start") taskEnd[284323])))
          } function chpl__scan6[285199](arg chpl_toScan[285201]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
          { unknown chpl_eltType[285203] "maybe type" "temp"
            { scopeless type(285207 'move' chpl_eltType[285203](285209 'typeof'(285211 call chpl__initCopy(285213 call iteratorIndex(285215 call _getIterator chpl_toScan[285201])))))
            } const tmp[285204] "const" "temp"(285224 'move' tmp[285204](285223 'new'(285222 call SumReduceScanOp[376372](?)(eltType = chpl_eltType[285203])(_chpl_manager = unmanaged[220](?)))))(285226 return(285228 call chpl__scanIterator tmp[285204] chpl_toScan[285201]))
          }(285239 call =(285185 call .(285184 call(285179 call . state[284073] c"perLocale") 0) c"globalEnds")(285237 call +(285232 call chpl__scan6(285196 call .(285195 call(285190 call . state[284073] c"perLocale") 0) c"globalCounts"))(285234 call . task[284297] c"start")))
          Forall {
            induction variables:
              unknown loc[285321] "index var" "insert auto destroy"
              unknown tid[285323] "index var" "insert auto destroy"
            iterated expressions:
              (285252 call(285248 call . A[284063] c"targetLocales"))
              (285255 call chpl_build_low_bounded_range 0)
            shadow variables:
              state[285259] 'ref' intent outer var state[284073]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              if(285315 call _cond_test(285266 call != tid[285323] 0))
              {(285288 call =(285275 call .(285274 call(285269 call . state[285259] c"perLocale") tid[285323]) c"globalCounts")(285285 call .(285284 call(285279 call . state[285259] c"perLocale") 0) c"globalCounts"))(285312 call =(285299 call .(285298 call(285293 call . state[285259] c"perLocale") tid[285323]) c"globalEnds")(285309 call .(285308 call(285303 call . state[285259] c"perLocale") 0) c"globalEnds"))
              }
            }
          }
          if(285508 call _cond_test debug[279219])
          { unknown total[285328] 0(285331 'end of statement')
            { unknown _indexOfInterest[285454] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[285455] "expr temp" "temp"(285464 'move' _iterator[285455](285462 call _getIterator(285474 call chpl_direct_counted_range_iter 0(285470 call . state[284073] c"countsSize"))))
              Defer
              {
                {(285490 call _freeIterator _iterator[285455])
                }
              }
              { scopeless type(285479 'move' _indexOfInterest[285454](285476 call iteratorIndex _iterator[285455]))
              }
              ForLoop[285456]
              { unknown i[285483] "index var" "insert auto destroy"(285485 'move' i[285483] _indexOfInterest[285454])
                {
                  if(285449 call _cond_test(285357 call !=(285355 call(285350 call .(285349 call(285344 call . state[284073] c"perLocale") 0) c"globalCounts") i[285483]) 0))
                  {(285373 call += total[285328](285372 call(285367 call .(285366 call(285361 call . state[284073] c"perLocale") 0) c"globalCounts") i[285483]))(285411 call writeln "state.globalCounts[" i[285483] "]="(285410 call(285405 call .(285404 call(285399 call . state[284073] c"perLocale") 0) c"globalCounts") i[285483]))(285447 call writeln "state.globalEnds[" i[285483] "]="(285446 call(285441 call .(285440 call(285435 call . state[284073] c"perLocale") 0) c"globalEnds") i[285483]))
                  }
                } label _continueLabel[285459] _indexOfInterest[285454] _iterator[285455]
              } label _breakLabel[285460]
            }(285506 call assert(285503 call == total[285328](285500 call . task[284297] c"size")))
          }
          { unknown tmpIter[285986] "expr temp" "maybe ref" "no copy" "temp"(285989 'move' tmpIter[285986](285527 call _build_tuple(285522 call(285518 call . A[284063] c"targetLocales"))(285525 call chpl_build_low_bounded_range 0))) unknown isRngDomArr[286477] "maybe param" "temp"(286492 'move' isRngDomArr[286477](286490 call ||(286479 call isBoundedRange tmpIter[285986])(286488 call ||(286482 call isDomain tmpIter[285986])(286485 call isArray tmpIter[285986]))))
            if isRngDomArr[286477]
            { const _coforallCount[286321] "const" "end count" "temp"(286400 'move' _coforallCount[286321](286397 call _endCountAlloc 0)) unknown numTasks[286322] "temp"(286384 'move' numTasks[286322](286380 call . tmpIter[285986] c"size"))(286375 call _upEndCount _coforallCount[286321] 0 numTasks[286322]) unknown _indexOfInterest[286328] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286329] "expr temp" "temp"(286338 'move' _iterator[286329](286336 call _getIteratorZip tmpIter[285986]))
              Defer
              {
                {(286368 call _freeIterator _iterator[286329])
                }
              }
              { scopeless type(286343 'move' _indexOfInterest[286328](286340 call iteratorIndex _iterator[286329]))
              }
              ForLoop[286330]
              {(286348 call _check_tuple_var_decl _indexOfInterest[286328] 2) unknown loc[286354] "coforall index var" "index var" "insert auto destroy"(286356 'move' loc[286354](286352 call _indexOfInterest[286328] 0)) unknown tid[286361] "coforall index var" "index var" "insert auto destroy"(286363 'move' tid[286361](286359 call _indexOfInterest[286328] 1)) const tmp[285995] "const" "temp"(285997 'move' tmp[285995](285999 'deref'(286000 '_wide_get_locale' loc[286354])))
                {
                  { const globalCounts[286008] "const" "ref var"(286010 call .(286015 call(286012 call . state[284073] c"perLocale") tid[286361]) c"globalCounts")(286019 'end of statement') const globalEnds[286021] "const" "ref var"(286023 call .(286028 call(286025 call . state[284073] c"perLocale") tid[286361]) c"globalEnds")(286032 'end of statement') const localSubdomain[286034] "const"(286040 call(286039 call(286036 call . A[284063] c"localSubdomain"))(286042 call chpl_build_bounded_range(286044 call . task[284297] c"start") taskEnd[284323]))(286049 'end of statement') unknown localOffsets[286051] "ref var"(286053 call .(286055 call .(286060 call(286057 call . state[284073] c"perLocale") tid[286361]) c"compat") c"counts")(286065 'end of statement')
                    { unknown offset[286068](286070 call . localSubdomain[286034] c"low")(286074 'end of statement')
                      { unknown _indexOfInterest[286076] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286078] "expr temp" "temp"(286080 'move' _iterator[286078](286083 call _getIterator(286085 call chpl_direct_counted_range_iter 0 nBuckets[284378])))
                        Defer
                        {
                          {(286090 call _freeIterator _iterator[286078])
                          }
                        }
                        { scopeless type(286094 'move' _indexOfInterest[286076](286097 call iteratorIndex _iterator[286078]))
                        }
                        ForLoop[286099]
                        { unknown bin[286102] "index var" "insert auto destroy"(286104 'move' bin[286102] _indexOfInterest[286076])
                          {(286109 call =(286111 call localOffsets[286051] bin[286102]) offset[286068])(286115 call += offset[286068](286118 call globalCounts[286008](286120 call +(286122 call * bin[286102] nTasks[284386]) tid[286361])))
                          } label _continueLabel[286126] _indexOfInterest[286076] _iterator[286078]
                        } label _breakLabel[286128]
                      }
                    }
                    Forall {
                      induction variables:
                        unknown bin[286312] "index var" "insert auto destroy"
                      iterated expressions:
                        (286315 call #(286317 call chpl_build_low_bounded_range 0) nBuckets[284378])
                      shadow variables:
                      other variables
                        forall body
                      { unknown size[286132](286134 call globalCounts[286008](286136 call +(286138 call * bin[286312] nTasks[284386]) tid[286361]))(286143 'end of statement')
                        if(286145 call _cond_test(286147 call > size[286132] 0))
                        { unknown localStart[286152](286154 call localOffsets[286051] bin[286312])(286157 'end of statement') unknown localEnd[286159](286161 call -(286163 call + localStart[286152] size[286132]) 1)(286168 'end of statement') unknown globalStart[286170](286196 IfExpr (286172 call >(286174 call +(286176 call * bin[286312] nTasks[284386]) tid[286361]) 0) then
                          { scopeless(286183 call globalEnds[286021](286185 call -(286187 call +(286189 call * bin[286312] nTasks[284386]) tid[286361]) 1))
                          } else
                          { scopeless taskStart[284306]
                          } )(286198 'end of statement') unknown globalEnd[286200](286202 call -(286204 call globalEnds[286021](286206 call +(286208 call * bin[286312] nTasks[284386]) tid[286361])) 1)(286214 'end of statement')
                          if(286216 call _cond_test debug[279219])
                          {(286220 call writeln "bin " bin[286312] " tid " tid[286361] " range "(286227 call chpl_build_bounded_range taskStart[284306] taskEnd[284323]) " A[" globalStart[286170] ".." globalEnd[286200] "] = Scratch[" localStart[286152] ".." localEnd[286159] "]")(286240 call assert(286242 call ==(286244 call globalCounts[286008](286246 call +(286248 call * bin[286312] nTasks[284386]) tid[286361]))(286261 call(286253 call .(286258 call(286255 call . state[284073] c"perLocale") 0) c"globalCounts")(286263 call +(286265 call * bin[286312] nTasks[284386]) tid[286361]))))(286270 call assert(286272 call ==(286274 call globalEnds[286021](286276 call +(286278 call * bin[286312] nTasks[284386]) tid[286361]))(286291 call(286283 call .(286288 call(286285 call . state[284073] c"perLocale") 0) c"globalEnds")(286293 call +(286295 call * bin[286312] nTasks[284386]) tid[286361]))))
                          }(286304 call shallowCopy module=[255] ShallowCopy[277381] A[284063] globalStart[286170] Scratch[284069] localStart[286152] size[286132])(364618 'referenced modules list' ShallowCopy[277381])
                        }
                      }
                    }
                  }(286323 call _downEndCount _coforallCount[286321] nil[44])(286003 'coforall on block' 0 tmp[285995])(285991 'actuals list' tiMarkRef[294] state[284073])
                } label _continueLabel[286333] _indexOfInterest[286328] _iterator[286329]
              } label _breakLabel[286334]
              Defer
              {
                {(286387 call _endCountFree _coforallCount[286321])
                }
              }(286392 call _waitEndCount _coforallCount[286321] 0 numTasks[286322])
            }
            { const _coforallCount[286404] "const" "end count" "temp"(286474 'move' _coforallCount[286404](286471 call _endCountAlloc 0)) unknown _indexOfInterest[286411] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286412] "expr temp" "temp"(286421 'move' _iterator[286412](286419 call _getIteratorZip tmpIter[285986]))
              Defer
              {
                {(286451 call _freeIterator _iterator[286412])
                }
              }
              { scopeless type(286426 'move' _indexOfInterest[286411](286423 call iteratorIndex _iterator[286412]))
              }
              ForLoop[286413]
              {(286431 call _check_tuple_var_decl _indexOfInterest[286411] 2) unknown loc[286437] "coforall index var" "index var" "insert auto destroy"(286439 'move' loc[286437](286435 call _indexOfInterest[286411] 0)) unknown tid[286444] "coforall index var" "index var" "insert auto destroy"(286446 'move' tid[286444](286442 call _indexOfInterest[286411] 1))(286458 call _upEndCount _coforallCount[286404] 0) const tmp[285976] "const" "temp"(285978 'move' tmp[285976](285974 'deref'(285973 '_wide_get_locale' loc[286437])))
                {
                  { const globalCounts[285547] "const" "ref var"(285544 call .(285543 call(285538 call . state[284073] c"perLocale") tid[286444]) c"globalCounts")(285550 'end of statement') const globalEnds[285562] "const" "ref var"(285559 call .(285558 call(285553 call . state[284073] c"perLocale") tid[286444]) c"globalEnds")(285565 'end of statement') const localSubdomain[285581] "const"(285580 call(285571 call(285567 call . A[284063] c"localSubdomain"))(285577 call chpl_build_bounded_range(285573 call . task[284297] c"start") taskEnd[284323]))(285584 'end of statement') unknown localOffsets[285598] "ref var"(285595 call .(285592 call .(285591 call(285586 call . state[284073] c"perLocale") tid[286444]) c"compat") c"counts")(285601 'end of statement')
                    { unknown offset[285606](285603 call . localSubdomain[285581] c"low")(285609 'end of statement')
                      { unknown _indexOfInterest[285641] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[285642] "expr temp" "temp"(285651 'move' _iterator[285642](285649 call _getIterator(285658 call chpl_direct_counted_range_iter 0 nBuckets[284378])))
                        Defer
                        {
                          {(285674 call _freeIterator _iterator[285642])
                          }
                        }
                        { scopeless type(285663 'move' _indexOfInterest[285641](285660 call iteratorIndex _iterator[285642]))
                        }
                        ForLoop[285643]
                        { unknown bin[285667] "index var" "insert auto destroy"(285669 'move' bin[285667] _indexOfInterest[285641])
                          {(285623 call =(285621 call localOffsets[285598] bin[285667]) offset[285606])(285638 call += offset[285606](285637 call globalCounts[285547](285634 call +(285631 call * bin[285667] nTasks[284386]) tid[286444])))
                          } label _continueLabel[285646] _indexOfInterest[285641] _iterator[285642]
                        } label _breakLabel[285647]
                      }
                    }
                    Forall {
                      induction variables:
                        unknown bin[285970] "index var" "insert auto destroy"
                      iterated expressions:
                        (285686 call #(285683 call chpl_build_low_bounded_range 0) nBuckets[284378])
                      shadow variables:
                      other variables
                        forall body
                      { unknown size[285698](285697 call globalCounts[285547](285694 call +(285691 call * bin[285970] nTasks[284386]) tid[286444]))(285701 'end of statement')
                        if(285965 call _cond_test(285705 call > size[285698] 0))
                        { unknown localStart[285711](285710 call localOffsets[285598] bin[285970])(285714 'end of statement') unknown localEnd[285723](285721 call -(285718 call + localStart[285711] size[285698]) 1)(285726 'end of statement') unknown globalStart[285754](285751 IfExpr (285735 call >(285732 call +(285729 call * bin[285970] nTasks[284386]) tid[286444]) 0) then
                          { scopeless(285749 call globalEnds[285562](285746 call -(285743 call +(285740 call * bin[285970] nTasks[284386]) tid[286444]) 1))
                          } else
                          { scopeless taskStart[284306]
                          } )(285757 'end of statement') unknown globalEnd[285771](285769 call -(285767 call globalEnds[285562](285764 call +(285761 call * bin[285970] nTasks[284386]) tid[286444])) 1)(285774 'end of statement')
                          if(285949 call _cond_test debug[279219])
                          {(285876 call writeln "bin " bin[285970] " tid " tid[286444] " range "(285833 call chpl_build_bounded_range taskStart[284306] taskEnd[284323]) " A[" globalStart[285754] ".." globalEnd[285771] "] = Scratch[" localStart[285711] ".." localEnd[285723] "]")(285912 call assert(285909 call ==(285889 call globalCounts[285547](285886 call +(285883 call * bin[285970] nTasks[284386]) tid[286444]))(285908 call(285897 call .(285896 call(285891 call . state[284073] c"perLocale") 0) c"globalCounts")(285905 call +(285902 call * bin[285970] nTasks[284386]) tid[286444]))))(285947 call assert(285944 call ==(285924 call globalEnds[285562](285921 call +(285918 call * bin[285970] nTasks[284386]) tid[286444]))(285943 call(285932 call .(285931 call(285926 call . state[284073] c"perLocale") 0) c"globalEnds")(285940 call +(285937 call * bin[285970] nTasks[284386]) tid[286444]))))
                          }(285963 call shallowCopy module=[255] ShallowCopy[277381] A[284063] globalStart[285754] Scratch[284069] localStart[285711] size[285698])(364604 'referenced modules list' ShallowCopy[277381])
                        }
                      }
                    }
                  }(286406 call _downEndCount _coforallCount[286404] nil[44])(285981 'coforall on block' 0 tmp[285976])(285533 'actuals list' tiMarkRef[294] state[284073])
                } label _continueLabel[286416] _indexOfInterest[286411] _iterator[286412]
              } label _breakLabel[286417]
              Defer
              {
                {(286462 call _endCountFree _coforallCount[286404])
                }
              }(286467 call _waitEndCount _coforallCount[286404] 0)
            }
          }
          if(286529 call _cond_test debug[279219])
          {(286526 call writef "after distribute, A is %xt\n"(286525 call A[284063](286522 call chpl_build_bounded_range(286518 call . task[284297] c"start") taskEnd[284323])))
          }
          { unknown _indexOfInterest[286865] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286866] "expr temp" "temp"(286875 'move' _iterator[286866](286873 call _getIterator(286551 call(286547 call .(286544 call .(286541 call .(286540 call(286535 call . state[284073] c"perLocale") 0) c"compat") c"bucketizer") c"getBinsToRecursivelySort"))))
            Defer
            {
              {(286892 call _freeIterator _iterator[286866])
              }
            }
            { scopeless type(286881 'move' _indexOfInterest[286865](286878 call iteratorIndex _iterator[286866]))
            }
            ForLoop[286867]
            { unknown bin[286885] "index var" "insert auto destroy"(286887 'move' bin[286885] _indexOfInterest[286865])
              { const binStart[286585] "const"(286582 IfExpr (286557 call >(286554 call * bin[286885] nTasks[284386]) 0) then
                { scopeless(286577 call(286566 call .(286565 call(286560 call . state[284073] c"perLocale") 0) c"globalEnds")(286574 call -(286571 call * bin[286885] nTasks[284386]) 1))
                } else
                { scopeless(286579 call . task[284297] c"start")
                } )(286588 'end of statement') const binEnd[286615] "const"(286613 call -(286611 call(286597 call .(286596 call(286591 call . state[284073] c"perLocale") 0) c"globalEnds")(286608 call -(286605 call +(286602 call * bin[286885] nTasks[284386]) nTasks[284386]) 1)) 1)(286618 'end of statement') const binSize[286626] "const"(286624 call +(286621 call - binEnd[286615] binStart[286585]) 1)(286629 'end of statement') const binStartBit[286652] "const"(286651 call(286643 call .(286640 call .(286637 call .(286636 call(286631 call . state[284073] c"perLocale") 0) c"compat") c"bucketizer") c"getNextStartBit")(286647 call . task[284297] c"startbit"))(286655 'end of statement')
                if(286861 call _cond_test(286658 call > binSize[286626] 1))
                { unknown isOnOneLocale[286661] 0(286664 'end of statement') unknown theLocaleId[286669](286667 call - 1)(286672 'end of statement')
                  { unknown _indexOfInterest[286748] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286749] "expr temp" "temp"(286771 'move' _iterator[286749](286688 call _build_tuple(286762 call _getIterator(286761 call(286758 call . A[284063] c"targetLocales")))(286768 call _getIterator(286766 call chpl_build_low_bounded_range 0))))
                    Defer
                    {
                      {(286801 call _freeIterator _iterator[286749])
                      }
                    }
                    { scopeless type(286776 'move' _indexOfInterest[286748](286773 call iteratorIndex _iterator[286749]))
                    }
                    ForLoop[286750]
                    {(286781 call _check_tuple_var_decl _indexOfInterest[286748] 2) unknown loc[286787] "index var" "insert auto destroy"(286789 'move' loc[286787](286785 call _indexOfInterest[286748] 0)) unknown tid[286794] "index var" "insert auto destroy"(286796 'move' tid[286794](286792 call _indexOfInterest[286748] 1))
                      { const localSubdomain[286705] "const"(286704 call(286695 call(286690 call . A[284063] c"localSubdomain") loc[286787])(286701 call chpl_build_bounded_range(286697 call . task[284297] c"start") taskEnd[284323]))(286708 'end of statement') const curDomain[286717] "const"(286715 call chpl__buildDomainExpr(286712 call chpl_build_bounded_range binStart[286585] binEnd[286615]))(286720 'end of statement') const intersect[286725] "const"(286724 call curDomain[286717] localSubdomain[286705])(286728 'end of statement')
                        if(286744 call _cond_test(286731 call == curDomain[286717] intersect[286725]))
                        {(286735 call = isOnOneLocale[286661] 1)(286741 call = theLocaleId[286669] tid[286794])
                        }
                      } label _continueLabel[286753] _indexOfInterest[286748] _iterator[286749]
                    } label _breakLabel[286754]
                  }
                  if(286857 call _cond_test isOnOneLocale[286661])
                  {(286834 call(286821 call .(286818 call .(286817 call(286812 call . state[284073] c"localTasks") theLocaleId[286669]) c"localTasks") c"append")(286824 'new'(286832 call TwoArraySortTask[279339] binStart[286585] binSize[286626] binStartBit[286652] 1 1)))
                  }
                  {(286854 call(286841 call .(286838 call . state[284073] c"distTasks") c"append")(286844 'new'(286852 call TwoArraySortTask[279339] binStart[286585] binSize[286626] binStartBit[286652] 1 1)))
                  }
                }
              } label _continueLabel[286870] _indexOfInterest[286865] _iterator[286866]
            } label _breakLabel[286871]
          }
        } label _continueLabel[286902](286919 'move' tmp[286899](286908 call _cond_test(286910 call !(286918 call(286912 call .(286914 call . state[284073] c"distTasks") c"isEmpty"))))) tmp[286899]
      } label _breakLabel[286903]
    }
    { unknown tmpIter[287198] "expr temp" "maybe ref" "no copy" "temp"(287201 'move' tmpIter[287198](286953 call _build_tuple(286948 call(286944 call . A[284063] c"targetLocales"))(286951 call chpl_build_low_bounded_range 0))) unknown isRngDomArr[287560] "maybe param" "temp"(287575 'move' isRngDomArr[287560](287573 call ||(287562 call isBoundedRange tmpIter[287198])(287571 call ||(287565 call isDomain tmpIter[287198])(287568 call isArray tmpIter[287198]))))
      if isRngDomArr[287560]
      { const _coforallCount[287404] "const" "end count" "temp"(287483 'move' _coforallCount[287404](287480 call _endCountAlloc 0)) unknown numTasks[287405] "temp"(287467 'move' numTasks[287405](287463 call . tmpIter[287198] c"size"))(287458 call _upEndCount _coforallCount[287404] 0 numTasks[287405]) unknown _indexOfInterest[287411] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[287412] "expr temp" "temp"(287421 'move' _iterator[287412](287419 call _getIteratorZip tmpIter[287198]))
        Defer
        {
          {(287451 call _freeIterator _iterator[287412])
          }
        }
        { scopeless type(287426 'move' _indexOfInterest[287411](287423 call iteratorIndex _iterator[287412]))
        }
        ForLoop[287413]
        {(287431 call _check_tuple_var_decl _indexOfInterest[287411] 2) unknown loc[287437] "coforall index var" "index var" "insert auto destroy"(287439 'move' loc[287437](287435 call _indexOfInterest[287411] 0)) unknown tid[287444] "coforall index var" "index var" "insert auto destroy"(287446 'move' tid[287444](287442 call _indexOfInterest[287411] 1)) const tmp[287207] "const" "temp"(287209 'move' tmp[287207](287211 'deref'(287212 '_wide_get_locale' loc[287437])))
          {
            { unknown myTasks[287220](287222 call .(287227 call(287224 call . state[284073] c"localTasks") tid[287444]) c"localTasks")(287231 'end of statement') unknown baseCaseSize[287233](287235 call . state[284073] c"baseCaseSize")(287239 'end of statement') unknown compat[287241] "ref var"(287243 call .(287248 call(287245 call . state[284073] c"perLocale") tid[287444]) c"compat")(287252 'end of statement')
              { unknown _indexOfInterest[287254] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[287256] "expr temp" "temp"(287258 'move' _iterator[287256](287261 call _getIterator myTasks[287220]))
                Defer
                {
                  {(287265 call _freeIterator _iterator[287256])
                  }
                }
                { scopeless type(287269 'move' _indexOfInterest[287254](287272 call iteratorIndex _iterator[287256]))
                }
                ForLoop[287274]
                { unknown task[287277] "index var" "insert auto destroy"(287279 'move' task[287277] _indexOfInterest[287254])
                  { const taskEnd[287284] "const"(287286 call -(287288 call +(287290 call . task[287277] c"start")(287294 call . task[287277] c"size")) 1)(287299 'end of statement') const curDomain[287301] "const"(287303 call chpl__buildDomainExpr(287305 call chpl_build_bounded_range(287307 call . task[287277] c"start") taskEnd[287284]))(287312 'end of statement')
                    if(287314 call _cond_test(287316 call > n[284238] baseCaseSize[287233]))
                    {(287327 call(287321 call .(287323 call . compat[287241] c"bigTasks") c"clear"))(287335 call(287329 call .(287331 call . compat[287241] c"smallTasks") c"clear"))(287337 call partitioningSortWithScratchSpace(287339 call . task[287277] c"start") taskEnd[287284](287347 call(287344 call . A[284063] c"localSlice") curDomain[287301])(287353 call(287350 call . Scratch[284069] c"localSlice") curDomain[287301]) compat[287241] criterion[284076](287358 call . task[287277] c"startbit"))
                    }
                    {(287366 call shellSort module=[255] ShellSort[273520](287371 call(287368 call . A[284063] c"localSlice") curDomain[287301]) criterion[284076](start =(287375 call . task[287277] c"start"))(end = taskEnd[287284]))(364672 'referenced modules list' ShellSort[273520])
                    }
                    if(287383 call _cond_test debug[279219])
                    {(287387 call writef "after recursive sorts, dst is %xt\n"(287390 call A[284063](287392 call chpl_build_bounded_range(287394 call . task[287277] c"start") taskEnd[287284])))
                    }
                  } label _continueLabel[287399] _indexOfInterest[287254] _iterator[287256]
                } label _breakLabel[287401]
              }
            }(287406 call _downEndCount _coforallCount[287404] nil[44])(287215 'coforall on block' 0 tmp[287207])(287203 'actuals list' tiMarkRef[294] state[284073])
          } label _continueLabel[287416] _indexOfInterest[287411] _iterator[287412]
        } label _breakLabel[287417]
        Defer
        {
          {(287470 call _endCountFree _coforallCount[287404])
          }
        }(287475 call _waitEndCount _coforallCount[287404] 0 numTasks[287405])
      }
      { const _coforallCount[287487] "const" "end count" "temp"(287557 'move' _coforallCount[287487](287554 call _endCountAlloc 0)) unknown _indexOfInterest[287494] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[287495] "expr temp" "temp"(287504 'move' _iterator[287495](287502 call _getIteratorZip tmpIter[287198]))
        Defer
        {
          {(287534 call _freeIterator _iterator[287495])
          }
        }
        { scopeless type(287509 'move' _indexOfInterest[287494](287506 call iteratorIndex _iterator[287495]))
        }
        ForLoop[287496]
        {(287514 call _check_tuple_var_decl _indexOfInterest[287494] 2) unknown loc[287520] "coforall index var" "index var" "insert auto destroy"(287522 'move' loc[287520](287518 call _indexOfInterest[287494] 0)) unknown tid[287527] "coforall index var" "index var" "insert auto destroy"(287529 'move' tid[287527](287525 call _indexOfInterest[287494] 1))(287541 call _upEndCount _coforallCount[287487] 0) const tmp[287188] "const" "temp"(287190 'move' tmp[287188](287186 'deref'(287185 '_wide_get_locale' loc[287520])))
          {
            { unknown myTasks[286973](286970 call .(286969 call(286964 call . state[284073] c"localTasks") tid[287527]) c"localTasks")(286976 'end of statement') unknown baseCaseSize[286982](286979 call . state[284073] c"baseCaseSize")(286985 'end of statement') unknown compat[286996] "ref var"(286993 call .(286992 call(286987 call . state[284073] c"perLocale") tid[287527]) c"compat")(286999 'end of statement')
              { unknown _indexOfInterest[287152] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[287153] "expr temp" "temp"(287162 'move' _iterator[287153](287160 call _getIterator myTasks[286973]))
                Defer
                {
                  {(287178 call _freeIterator _iterator[287153])
                  }
                }
                { scopeless type(287167 'move' _indexOfInterest[287152](287164 call iteratorIndex _iterator[287153]))
                }
                ForLoop[287154]
                { unknown task[287171] "index var" "insert auto destroy"(287173 'move' task[287171] _indexOfInterest[287152])
                  { const taskEnd[287015] "const"(287013 call -(287010 call +(287003 call . task[287171] c"start")(287007 call . task[287171] c"size")) 1)(287018 'end of statement') const curDomain[287030] "const"(287028 call chpl__buildDomainExpr(287025 call chpl_build_bounded_range(287021 call . task[287171] c"start") taskEnd[287015]))(287033 'end of statement')
                    if(287111 call _cond_test(287036 call > n[284238] baseCaseSize[286982]))
                    {(287046 call(287042 call .(287039 call . compat[286996] c"bigTasks") c"clear"))(287057 call(287053 call .(287050 call . compat[286996] c"smallTasks") c"clear"))(287086 call partitioningSortWithScratchSpace(287061 call . task[287171] c"start") taskEnd[287015](287072 call(287067 call . A[284063] c"localSlice") curDomain[287030])(287079 call(287074 call . Scratch[284069] c"localSlice") curDomain[287030]) compat[286996] criterion[284076](287083 call . task[287171] c"startbit"))
                    }
                    {(287108 call shellSort module=[255] ShellSort[273520](287098 call(287093 call . A[284063] c"localSlice") curDomain[287030]) criterion[284076](start =(287102 call . task[287171] c"start"))(end = taskEnd[287015]))(364651 'referenced modules list' ShellSort[273520])
                    }
                    if(287148 call _cond_test debug[279219])
                    {(287145 call writef "after recursive sorts, dst is %xt\n"(287144 call A[284063](287141 call chpl_build_bounded_range(287137 call . task[287171] c"start") taskEnd[287015])))
                    }
                  } label _continueLabel[287157] _indexOfInterest[287152] _iterator[287153]
                } label _breakLabel[287158]
              }
            }(287489 call _downEndCount _coforallCount[287487] nil[44])(287193 'coforall on block' 0 tmp[287188])(286959 'actuals list' tiMarkRef[294] state[284073])
          } label _continueLabel[287499] _indexOfInterest[287494] _iterator[287495]
        } label _breakLabel[287500]
        Defer
        {
          {(287545 call _endCountFree _coforallCount[287487])
          }
        }(287550 call _waitEndCount _coforallCount[287487] 0)
      }
    }
  }
  { scopeless type void[4]
  }(355380 'used modules list'(353044 'use' ChapelStandard[20264])(279196 'use' BlockDist[331306])(279205 'use' MSBRadixSort[287989])(279209 'use' List[298216] 'only' list)(279216 'import' Sort[267968].{ShellSort, RadixSortHelp, SampleSortHelp, ShallowCopy}))
}