AST dump for TwoArrayPartitioning after pass scopeResolve.
Module use list: ChapelStandard BlockDist MSBRadixSort List Sort ShallowCopy SampleSortHelp RadixSortHelp ShellSort 

{ unknown debug[279240] "param" "private" 0(279243 'end of statement') unknown maxBuckets[279247] "param" 512(279250 'end of statement') function TwoArraySortTask[279360].init[279279](arg _mt[279364]:_MT[238], arg this[279362]:TwoArraySortTask[279360]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  } function TwoArraySortTask[279360].init[279290](arg _mt[279368]:_MT[238], arg this[279366]:TwoArraySortTask[279360], arg start[279287] : int(64)[13], arg size[279293] : int(64)[13], arg startbit[279297] : int(64)[13], arg inA[279301] : bool[10], arg doSort[279305] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(279315 call =(279311 call . this[279366] c"start") start[279287])(279324 call =(279320 call . this[279366] c"size") size[279293])(279334 call =(279330 call . this[279366] c"startbit") startbit[279297])(279344 call =(279340 call . this[279366] c"inA") inA[279301])(279354 call =(279350 call . this[279366] c"doSort") doSort[279305])
  } type TwoArraySortTask[279360] unknown start[279253] int(64)[13] unknown size[279258] int(64)[13] unknown startbit[279263] int(64)[13] unknown inA[279268] bool[10] unknown doSort[279273] bool[10] type TwoArrayBucketizerPerTaskState[279389] unknown localCounts[279384](279382 call chpl__buildArrayRuntimeType(279380 call chpl__ensureDomainExpr(279376 call #(279373 call chpl_build_low_bounded_range 0) maxBuckets[279247])) int(64)[13]) type TwoArrayBucketizerSharedState[279559](?) unknown nTasks[279406](279403 IfExpr (279396 call > dataParTasksPerLocale[93284] 0) then
  { scopeless dataParTasksPerLocale[93284]
  } else
  { scopeless(279400 call .(364364 call here[90438]) c"maxTaskPar")
  } ) int(64)[13] unknown countsSize[279415](279413 call * nTasks[279406] maxBuckets[279247]) int(64)[13] unknown bucketizer[279419] unknown globalCounts[279435](279433 call chpl__buildArrayRuntimeType(279431 call chpl__ensureDomainExpr(279427 call #(279424 call chpl_build_low_bounded_range 0) countsSize[279415])) int(64)[13]) unknown globalEnds[279451](279449 call chpl__buildArrayRuntimeType(279447 call chpl__ensureDomainExpr(279443 call #(279440 call chpl_build_low_bounded_range 0) countsSize[279415])) int(64)[13]) unknown localState[279467](279465 call chpl__buildArrayRuntimeType(279463 call chpl__ensureDomainExpr(279459 call #(279456 call chpl_build_low_bounded_range 0) nTasks[279406])) TwoArrayBucketizerPerTaskState[279389]) unknown counts[279483](279481 call chpl__buildArrayRuntimeType(279479 call chpl__ensureDomainExpr(279475 call #(279472 call chpl_build_low_bounded_range 0) maxBuckets[279247])) int(64)[13]) unknown ends[279499](279497 call chpl__buildArrayRuntimeType(279495 call chpl__ensureDomainExpr(279491 call #(279488 call chpl_build_low_bounded_range 0) maxBuckets[279247])) int(64)[13]) unknown outputInA[279515](279513 call chpl__buildArrayRuntimeType(279511 call chpl__ensureDomainExpr(279507 call #(279504 call chpl_build_low_bounded_range 0) maxBuckets[279247])) bool[10]) unknown bigTasks[279523](279522 call list[304220](?) TwoArraySortTask[279360]) unknown smallTasks[279531](279530 call list[304220](?) TwoArraySortTask[279360]) unknown baseCaseSize[279537] 16 int(64)[13] unknown sequentialSizePerTask[279545] 4096 int(64)[13] unknown endbit[279554](279553 call max int(64)[13]) int(64)[13] type TwoArrayDistributedBucketizerStatePerLocale[279616](?) unknown bucketizerType[279563] "type variable" unknown compat[279570](279569 call TwoArrayBucketizerSharedState[279559](?) bucketizerType[279563]) unknown countsSize[279579](279577 call * numLocales[209892] maxBuckets[279247]) int(64)[13] unknown globalCounts[279595](279593 call chpl__buildArrayRuntimeType(279591 call chpl__ensureDomainExpr(279587 call #(279584 call chpl_build_low_bounded_range 0) countsSize[279579])) int(64)[13]) unknown globalEnds[279611](279609 call chpl__buildArrayRuntimeType(279607 call chpl__ensureDomainExpr(279603 call #(279600 call chpl_build_low_bounded_range 0) countsSize[279579])) int(64)[13]) type TasksForLocale[279629] unknown localTasks[279624](279623 call list[304220](?) TwoArraySortTask[279360]) function TwoArrayDistributedBucketizerSharedState[279841](?).postinit[279739](arg _mt[279845]:_MT[238], arg this[279843]:TwoArrayDistributedBucketizerSharedState[279841](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[279804] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[279805] "expr temp" "temp"(279814 'move' _iterator[279805](279812 call _getIterator(402909 call . this[279843] c"perLocale")))
      Defer
      {
        {(279830 call _freeIterator _iterator[279805])
        }
      }
      { scopeless type(279819 'move' _indexOfInterest[279804](279816 call iteratorIndex _iterator[279805]))
      }
      ForLoop[279806]
      { unknown p[279823] "index var" "insert auto destroy"(279825 'move' p[279823] _indexOfInterest[279804])
        {(279755 call =(279751 call .(279746 call . p[279823] c"compat") c"baseCaseSize")(402914 call . this[279843] c"baseCaseSize"))(279769 call =(279765 call .(279760 call . p[279823] c"compat") c"endbit")(402919 call . this[279843] c"endbit"))(279786 call assert(279783 call >(279779 call .(279774 call . p[279823] c"compat") c"nTasks") 0))(279802 call assert(279799 call >(279795 call .(279790 call . p[279823] c"compat") c"countsSize") 0))
        } label _continueLabel[279809] _indexOfInterest[279804] _iterator[279805]
      } label _breakLabel[279810]
    }
  } type TwoArrayDistributedBucketizerSharedState[279841](?) unknown bucketizerType[279633] "type variable" unknown numLocales[279637] int(64)[13] unknown perLocale[279654](279653 call newBlockArr(279646 call #(279643 call chpl_build_low_bounded_range 0) numLocales[279637])(279652 call TwoArrayDistributedBucketizerStatePerLocale[279616](?) bucketizerType[279633])) const baseCaseSize[279659] "const" int(64)[13] const endbit[279668] "const"(279667 call max int(64)[13]) int(64)[13] const countsSize[279677] "const"(279675 call * numLocales[279637] maxBuckets[279247]) int(64)[13] unknown globalCounts[279693](279691 call chpl__buildArrayRuntimeType(279689 call chpl__ensureDomainExpr(279685 call #(279682 call chpl_build_low_bounded_range 0) countsSize[279677])) int(64)[13]) unknown globalEnds[279709](279707 call chpl__buildArrayRuntimeType(279705 call chpl__ensureDomainExpr(279701 call #(279698 call chpl_build_low_bounded_range 0) countsSize[279677])) int(64)[13]) unknown distTasks[279717](279716 call list[304220](?) TwoArraySortTask[279360]) unknown localTasks[279733](279731 call chpl__buildArrayRuntimeType(279729 call chpl__ensureDomainExpr(279725 call #(279722 call chpl_build_low_bounded_range 0) numLocales[279637])) TasksForLocale[279629]) function bucketize[279854](arg start_n[279851] : int(64)[13], arg end_n[279857] : int(64)[13], arg dst[279863] :(279860 call chpl__buildArrayRuntimeType nil[44]), arg src[279869] :(279866 call chpl__buildArrayRuntimeType nil[44]), ref arg state[279873] : TwoArrayBucketizerSharedState[279559](?), arg criterion[279876]:_any[178](?), arg startbit[279879] : int(64)[13]) : _unknown[51] "no return value for void"
  {
    if(279926 call _cond_test debug[279240])
    {(279924 call writeln "bucketize "(279904 call chpl_build_bounded_range start_n[279851] end_n[279857]) " startbit=" startbit[279879])
    } const nBuckets[279943] "const"(279942 call(279938 call .(279935 call . state[279873] c"bucketizer") c"getNumBuckets"))(279946 'end of statement') const n[279954] "const"(279952 call +(279949 call - end_n[279857] start_n[279851]) 1)(279957 'end of statement') const nTasks[279973] "const"(279970 IfExpr (279963 call >= n[279954](279960 call . state[279873] c"nTasks")) then
    { scopeless(279966 call . state[279873] c"nTasks")
    } else
    { scopeless 1
    } )(279976 'end of statement')(279983 call assert(279980 call > nTasks[279973] 0))
    if(280002 call _cond_test(279987 call == n[279954] 0))
    {(279996 call =(279992 call . state[279873] c"counts") 0)(280000 return _void[55])
    } const countsSize[280010] "const"(280008 call * nTasks[279973] nBuckets[279943])(280013 'end of statement') const blockSize[280019] "const"(280018 call divceil n[279954] nTasks[279973])(280022 'end of statement') const nBlocks[280028] "const"(280027 call divceil n[279954] blockSize[280019])(280031 'end of statement')
    { unknown tmpIter[280350] "expr temp" "maybe ref" "no copy" "temp"(280353 'move' tmpIter[280350](280037 call #(280034 call chpl_build_low_bounded_range 0) nTasks[279973])) unknown isRngDomArr[280721] "maybe param" "temp"(280736 'move' isRngDomArr[280721](280734 call ||(280723 call isBoundedRange tmpIter[280350])(280732 call ||(280726 call isDomain tmpIter[280350])(280729 call isArray tmpIter[280350]))))
      if isRngDomArr[280721]
      { const _coforallCount[280588] "const" "end count" "temp"(280657 'move' _coforallCount[280588](280654 call _endCountAlloc 1)) unknown numTasks[280589] "temp"(280641 'move' numTasks[280589](280637 call . tmpIter[280350] c"size"))(280632 call _upEndCount _coforallCount[280588] 1 numTasks[280589])(280629 call chpl_resetTaskSpawn numTasks[280589]) unknown _indexOfInterest[280596] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280597] "expr temp" "temp"(280606 'move' _iterator[280597](280604 call _getIterator tmpIter[280350]))
        Defer
        {
          {(280622 call _freeIterator _iterator[280597])
          }
        }
        { scopeless type(280611 'move' _indexOfInterest[280596](280608 call iteratorIndex _iterator[280597]))
        }
        ForLoop[280598]
        { unknown tid[280615] "coforall index var" "index var" "insert auto destroy"(280617 'move' tid[280615] _indexOfInterest[280596])
          {
            { unknown start[280360](280362 call + start_n[279851](280365 call * tid[280615] blockSize[280019]))(280369 'end of statement') unknown end[280371](280373 call -(280375 call + start[280360] blockSize[280019]) 1)(280380 'end of statement')
              if(280382 call _cond_test(280384 call > end[280371] end_n[279857]))
              {(280389 call = end[280371] end_n[279857])
              }
              if(280394 call _cond_test debug[279240])
              {(280399 call writeln "tid " tid[280615] " considering "(280404 call chpl_build_bounded_range start[280360] end[280371]))
              } unknown counts[280409] "ref var"(280411 call .(280416 call(280413 call . state[279873] c"localState") tid[280615]) c"localCounts")(280420 'end of statement')
              { unknown _indexOfInterest[280422] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280424] "expr temp" "temp"(280426 'move' _iterator[280424](280429 call _getIterator(280431 call chpl_direct_counted_range_iter 0 nBuckets[279943])))
                Defer
                {
                  {(280436 call _freeIterator _iterator[280424])
                  }
                }
                { scopeless type(280440 'move' _indexOfInterest[280422](280443 call iteratorIndex _iterator[280424]))
                }
                ForLoop[280445]
                { unknown bin[280448] "index var" "insert auto destroy"(280450 'move' bin[280448] _indexOfInterest[280422])
                  {(280455 call =(280457 call counts[280409] bin[280448]) 0)
                  } label _continueLabel[280460] _indexOfInterest[280422] _iterator[280424]
                } label _breakLabel[280462]
              }
              { unknown _indexOfInterest[280465] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280467] "expr temp" "temp"(280469 'move' _iterator[280467](280472 call _getIterator(280480 call(280474 call .(280476 call . state[279873] c"bucketizer") c"classify") src[279869] start[280360] end[280371] criterion[279876] startbit[279879])))
                Defer
                {
                  {(280488 call _freeIterator _iterator[280467])
                  }
                }
                { scopeless type(280492 'move' _indexOfInterest[280465](280495 call iteratorIndex _iterator[280467]))
                }
                ForLoop[280497]
                {(280501 call _check_tuple_var_decl _indexOfInterest[280465] 2) unknown i[280504] "index var" "insert auto destroy"(280506 'move' i[280504](280509 call _indexOfInterest[280465] 0)) unknown bin[280511] "index var" "insert auto destroy"(280513 'move' bin[280511](280516 call _indexOfInterest[280465] 1))
                  {(280520 call +=(280522 call counts[280409] bin[280511]) 1)
                  } label _continueLabel[280525] _indexOfInterest[280465] _iterator[280467]
                } label _breakLabel[280527]
              }
              { unknown _indexOfInterest[280530] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280532] "expr temp" "temp"(280534 'move' _iterator[280532](280537 call _getIterator(280539 call vectorizeOnly(280541 call #(280543 call chpl_build_low_bounded_range 0) nBuckets[279943]))))
                Defer
                {
                  {(280548 call _freeIterator _iterator[280532])
                  }
                }
                { scopeless type(280552 'move' _indexOfInterest[280530](280555 call iteratorIndex _iterator[280532]))
                }
                ForLoop[280557]
                { unknown bin[280560] "index var" "insert auto destroy"(280562 'move' bin[280560] _indexOfInterest[280530])
                  {(280567 call =(280572 call(280569 call . state[279873] c"globalCounts")(280574 call +(280576 call * bin[280560] nTasks[279973]) tid[280615]))(280581 call counts[280409] bin[280560]))
                  } label _continueLabel[280583] _indexOfInterest[280530] _iterator[280532]
                } label _breakLabel[280585]
              }
            }(280591 call _downEndCount _coforallCount[280588] nil[44])(280590 'coforall loop')(280355 'actuals list' tiMarkRef[294] state[279873])
          } label _continueLabel[280601] _indexOfInterest[280596] _iterator[280597]
        } label _breakLabel[280602]
        Defer
        {
          {(280644 call _endCountFree _coforallCount[280588])
          }
        }(280649 call _waitEndCount _coforallCount[280588] 1 numTasks[280589])
      }
      { const _coforallCount[280661] "const" "end count" "temp"(280718 'move' _coforallCount[280661](280715 call _endCountAlloc 1)) unknown _indexOfInterest[280669] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280670] "expr temp" "temp"(280679 'move' _iterator[280670](280677 call _getIterator tmpIter[280350]))
        Defer
        {
          {(280695 call _freeIterator _iterator[280670])
          }
        }
        { scopeless type(280684 'move' _indexOfInterest[280669](280681 call iteratorIndex _iterator[280670]))
        }
        ForLoop[280671]
        { unknown tid[280688] "coforall index var" "index var" "insert auto destroy"(280690 'move' tid[280688] _indexOfInterest[280669])(280702 call _upEndCount _coforallCount[280661] 1)
          {
            { unknown start[280054](280052 call + start_n[279851](280050 call * tid[280688] blockSize[280019]))(280057 'end of statement') unknown end[280066](280064 call -(280061 call + start[280054] blockSize[280019]) 1)(280069 'end of statement')
              if(280080 call _cond_test(280072 call > end[280066] end_n[279857]))
              {(280076 call = end[280066] end_n[279857])
              }
              if(280128 call _cond_test debug[279240])
              {(280126 call writeln "tid " tid[280688] " considering "(280124 call chpl_build_bounded_range start[280054] end[280066]))
              } unknown counts[280147] "ref var"(280144 call .(280141 call(280136 call . state[279873] c"localState") tid[280688]) c"localCounts")(280150 'end of statement')
              { unknown _indexOfInterest[280167] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280168] "expr temp" "temp"(280177 'move' _iterator[280168](280175 call _getIterator(280184 call chpl_direct_counted_range_iter 0 nBuckets[279943])))
                Defer
                {
                  {(280200 call _freeIterator _iterator[280168])
                  }
                }
                { scopeless type(280189 'move' _indexOfInterest[280167](280186 call iteratorIndex _iterator[280168]))
                }
                ForLoop[280169]
                { unknown bin[280193] "index var" "insert auto destroy"(280195 'move' bin[280193] _indexOfInterest[280167])
                  {(280163 call =(280161 call counts[280147] bin[280193]) 0)
                  } label _continueLabel[280172] _indexOfInterest[280167] _iterator[280168]
                } label _breakLabel[280173]
              }
              { unknown _indexOfInterest[280235] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280236] "expr temp" "temp"(280245 'move' _iterator[280236](280243 call _getIterator(280225 call(280216 call .(280213 call . state[279873] c"bucketizer") c"classify") src[279869] start[280054] end[280066] criterion[279876] startbit[279879])))
                Defer
                {
                  {(280276 call _freeIterator _iterator[280236])
                  }
                }
                { scopeless type(280251 'move' _indexOfInterest[280235](280248 call iteratorIndex _iterator[280236]))
                }
                ForLoop[280237]
                {(280256 call _check_tuple_var_decl _indexOfInterest[280235] 2) unknown i[280262] "index var" "insert auto destroy"(280264 'move' i[280262](280260 call _indexOfInterest[280235] 0)) unknown bin[280269] "index var" "insert auto destroy"(280271 'move' bin[280269](280267 call _indexOfInterest[280235] 1))
                  {(280231 call +=(280229 call counts[280147] bin[280269]) 1)
                  } label _continueLabel[280240] _indexOfInterest[280235] _iterator[280236]
                } label _breakLabel[280241]
              }
              { unknown _indexOfInterest[280316] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280317] "expr temp" "temp"(280326 'move' _iterator[280317](280324 call _getIterator(280292 call vectorizeOnly(280289 call #(280286 call chpl_build_low_bounded_range 0) nBuckets[279943]))))
                Defer
                {
                  {(280343 call _freeIterator _iterator[280317])
                  }
                }
                { scopeless type(280332 'move' _indexOfInterest[280316](280329 call iteratorIndex _iterator[280317]))
                }
                ForLoop[280318]
                { unknown bin[280336] "index var" "insert auto destroy"(280338 'move' bin[280336] _indexOfInterest[280316])
                  {(280312 call =(280307 call(280296 call . state[279873] c"globalCounts")(280304 call +(280301 call * bin[280336] nTasks[279973]) tid[280688]))(280311 call counts[280147] bin[280336]))
                  } label _continueLabel[280321] _indexOfInterest[280316] _iterator[280317]
                } label _breakLabel[280322]
              }
            }(280664 call _downEndCount _coforallCount[280661] nil[44])(280663 'coforall loop')(280044 'actuals list' tiMarkRef[294] state[279873])
          } label _continueLabel[280674] _indexOfInterest[280669] _iterator[280670]
        } label _breakLabel[280675]
        Defer
        {
          {(280706 call _endCountFree _coforallCount[280661])
          }
        }(280711 call _waitEndCount _coforallCount[280661] 1)
      }
    } function chpl__scan2[280751](arg chpl_toScan[280753]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
    { unknown chpl_eltType[280755] "maybe type" "temp"
      { scopeless type(280759 'move' chpl_eltType[280755](280761 'typeof'(280763 call chpl__initCopy(280765 call iteratorIndex(280767 call _getIterator chpl_toScan[280753])))))
      } const tmp[280756] "const" "temp"(280776 'move' tmp[280756](280775 'new'(280774 call SumReduceScanOp[376412](?)(eltType = chpl_eltType[280755])(_chpl_manager = unmanaged[220](?)))))(280778 return(280780 call chpl__scanIterator tmp[280756] chpl_toScan[280753]))
    }(280788 call =(280743 call . state[279873] c"globalEnds")(280786 call +(280784 call chpl__scan2(280748 call . state[279873] c"globalCounts")) start_n[279851]))
    if(280990 call _cond_test debug[279240])
    {
      { unknown _indexOfInterest[280949] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280950] "expr temp" "temp"(280959 'move' _iterator[280950](280957 call _getIterator(280966 call chpl_direct_counted_range_iter 0 nBuckets[279943])))
        Defer
        {
          {(280982 call _freeIterator _iterator[280950])
          }
        }
        { scopeless type(280971 'move' _indexOfInterest[280949](280968 call iteratorIndex _iterator[280950]))
        }
        ForLoop[280951]
        { unknown bin[280975] "index var" "insert auto destroy"(280977 'move' bin[280975] _indexOfInterest[280949])
          {
            { unknown _indexOfInterest[280908] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280909] "expr temp" "temp"(280918 'move' _iterator[280909](280916 call _getIterator(280925 call chpl_direct_counted_range_iter 0 nTasks[279973])))
              Defer
              {
                {(280941 call _freeIterator _iterator[280909])
                }
              }
              { scopeless type(280930 'move' _indexOfInterest[280908](280927 call iteratorIndex _iterator[280909]))
              }
              ForLoop[280910]
              { unknown tid[280934] "index var" "insert auto destroy"(280936 'move' tid[280934] _indexOfInterest[280908])
                { unknown gb[280813](280811 call +(280808 call * bin[280975] nTasks[279973]) tid[280934])(280816 'end of statement')
                  if(280904 call _cond_test(280826 call !=(280824 call(280819 call . state[279873] c"globalCounts") gb[280813]) 0))
                  {(280901 call writeln "tid " tid[280934] " count[" bin[280975] "] = "(280873 call(280868 call . state[279873] c"globalCounts") gb[280813]) " end = "(280899 call -(280897 call(280892 call . state[279873] c"globalEnds") gb[280813]) 1))
                  }
                } label _continueLabel[280913] _indexOfInterest[280908] _iterator[280909]
              } label _breakLabel[280914]
            }
          } label _continueLabel[280954] _indexOfInterest[280949] _iterator[280950]
        } label _breakLabel[280955]
      }
    }
    { unknown tmpIter[281353] "expr temp" "maybe ref" "no copy" "temp"(281356 'move' tmpIter[281353](280999 call #(280996 call chpl_build_low_bounded_range 0) nTasks[279973])) unknown isRngDomArr[281736] "maybe param" "temp"(281751 'move' isRngDomArr[281736](281749 call ||(281738 call isBoundedRange tmpIter[281353])(281747 call ||(281741 call isDomain tmpIter[281353])(281744 call isArray tmpIter[281353]))))
      if isRngDomArr[281736]
      { const _coforallCount[281603] "const" "end count" "temp"(281672 'move' _coforallCount[281603](281669 call _endCountAlloc 1)) unknown numTasks[281604] "temp"(281656 'move' numTasks[281604](281652 call . tmpIter[281353] c"size"))(281647 call _upEndCount _coforallCount[281603] 1 numTasks[281604])(281644 call chpl_resetTaskSpawn numTasks[281604]) unknown _indexOfInterest[281611] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281612] "expr temp" "temp"(281621 'move' _iterator[281612](281619 call _getIterator tmpIter[281353]))
        Defer
        {
          {(281637 call _freeIterator _iterator[281612])
          }
        }
        { scopeless type(281626 'move' _indexOfInterest[281611](281623 call iteratorIndex _iterator[281612]))
        }
        ForLoop[281613]
        { unknown tid[281630] "coforall index var" "index var" "insert auto destroy"(281632 'move' tid[281630] _indexOfInterest[281611])
          {
            { unknown start[281363](281365 call + start_n[279851](281368 call * tid[281630] blockSize[280019]))(281372 'end of statement') unknown end[281374](281376 call -(281378 call + start[281363] blockSize[280019]) 1)(281383 'end of statement')
              if(281385 call _cond_test(281387 call > end[281374] end_n[279857]))
              {(281392 call = end[281374] end_n[279857])
              } unknown nextOffsets[281397] "ref var"(281399 call .(281404 call(281401 call . state[279873] c"localState") tid[281630]) c"localCounts")(281408 'end of statement')
              { unknown _indexOfInterest[281410] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281412] "expr temp" "temp"(281414 'move' _iterator[281412](281417 call _getIterator(281419 call chpl_direct_counted_range_iter 0 nBuckets[279943])))
                Defer
                {
                  {(281424 call _freeIterator _iterator[281412])
                  }
                }
                { scopeless type(281428 'move' _indexOfInterest[281410](281431 call iteratorIndex _iterator[281412]))
                }
                ForLoop[281433]
                { unknown bin[281436] "index var" "insert auto destroy"(281438 'move' bin[281436] _indexOfInterest[281410])
                  { unknown globalBin[281443](281445 call +(281447 call * bin[281436] nTasks[279973]) tid[281630])(281452 'end of statement')(281454 call =(281456 call nextOffsets[281397] bin[281436])(281474 IfExpr (281459 call > globalBin[281443] 0) then
                    { scopeless(281467 call(281464 call . state[279873] c"globalEnds")(281469 call - globalBin[281443] 1))
                    } else
                    { scopeless start_n[279851]
                    } ))
                    if(281476 call _cond_test debug[279240])
                    {
                      if(281480 call _cond_test(281482 call !=(281487 call(281484 call . state[279873] c"globalCounts") globalBin[281443]) 0))
                      {(281492 call writeln "tid " tid[281630] " nextOffsets[" bin[281436] "] = "(281499 call nextOffsets[281397] bin[281436]))
                      }
                    }
                  } label _continueLabel[281503] _indexOfInterest[281410] _iterator[281412]
                } label _breakLabel[281505]
              }
              { unknown _indexOfInterest[281508] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281510] "expr temp" "temp"(281512 'move' _iterator[281510](281515 call _getIterator(281523 call(281517 call .(281519 call . state[279873] c"bucketizer") c"classify") src[279869] start[281363] end[281374] criterion[279876] startbit[279879])))
                Defer
                {
                  {(281531 call _freeIterator _iterator[281510])
                  }
                }
                { scopeless type(281535 'move' _indexOfInterest[281508](281538 call iteratorIndex _iterator[281510]))
                }
                ForLoop[281540]
                {(281544 call _check_tuple_var_decl _indexOfInterest[281508] 2) unknown i[281547] "index var" "insert auto destroy"(281549 'move' i[281547](281552 call _indexOfInterest[281508] 0)) unknown bin[281554] "index var" "insert auto destroy"(281556 'move' bin[281554](281559 call _indexOfInterest[281508] 1))
                  { unknown next[281563] "ref var"(281565 call nextOffsets[281397] bin[281554])(281568 'end of statement')
                    if(281570 call _cond_test debug[279240])
                    {(281574 call writeln "tid " tid[281630] " dst[" next[281563] "] = src[" i[281547] "] bin " bin[281554])
                    }(281588 call shallowCopy module=[255] ShallowCopy[277402] dst[279863] next[281563] src[279869] i[281547] 1)(281595 call += next[281563] 1)(364400 'referenced modules list' ShallowCopy[277402])
                  } label _continueLabel[281598] _indexOfInterest[281508] _iterator[281510]
                } label _breakLabel[281600]
              }
            }(281606 call _downEndCount _coforallCount[281603] nil[44])(281605 'coforall loop')(281358 'actuals list' tiMarkRef[294] state[279873])
          } label _continueLabel[281616] _indexOfInterest[281611] _iterator[281612]
        } label _breakLabel[281617]
        Defer
        {
          {(281659 call _endCountFree _coforallCount[281603])
          }
        }(281664 call _waitEndCount _coforallCount[281603] 1 numTasks[281604])
      }
      { const _coforallCount[281676] "const" "end count" "temp"(281733 'move' _coforallCount[281676](281730 call _endCountAlloc 1)) unknown _indexOfInterest[281684] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281685] "expr temp" "temp"(281694 'move' _iterator[281685](281692 call _getIterator tmpIter[281353]))
        Defer
        {
          {(281710 call _freeIterator _iterator[281685])
          }
        }
        { scopeless type(281699 'move' _indexOfInterest[281684](281696 call iteratorIndex _iterator[281685]))
        }
        ForLoop[281686]
        { unknown tid[281703] "coforall index var" "index var" "insert auto destroy"(281705 'move' tid[281703] _indexOfInterest[281684])(281717 call _upEndCount _coforallCount[281676] 1)
          {
            { unknown start[281016](281014 call + start_n[279851](281012 call * tid[281703] blockSize[280019]))(281019 'end of statement') unknown end[281028](281026 call -(281023 call + start[281016] blockSize[280019]) 1)(281031 'end of statement')
              if(281042 call _cond_test(281034 call > end[281028] end_n[279857]))
              {(281038 call = end[281028] end_n[279857])
              } unknown nextOffsets[281056] "ref var"(281053 call .(281052 call(281047 call . state[279873] c"localState") tid[281703]) c"localCounts")(281059 'end of statement')
              { unknown _indexOfInterest[281154] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281155] "expr temp" "temp"(281164 'move' _iterator[281155](281162 call _getIterator(281171 call chpl_direct_counted_range_iter 0 nBuckets[279943])))
                Defer
                {
                  {(281187 call _freeIterator _iterator[281155])
                  }
                }
                { scopeless type(281176 'move' _indexOfInterest[281154](281173 call iteratorIndex _iterator[281155]))
                }
                ForLoop[281156]
                { unknown bin[281180] "index var" "insert auto destroy"(281182 'move' bin[281180] _indexOfInterest[281154])
                  { unknown globalBin[281074](281072 call +(281069 call * bin[281180] nTasks[279973]) tid[281703])(281077 'end of statement')(281101 call =(281082 call nextOffsets[281056] bin[281180])(281098 IfExpr (281085 call > globalBin[281074] 0) then
                    { scopeless(281096 call(281088 call . state[279873] c"globalEnds")(281093 call - globalBin[281074] 1))
                    } else
                    { scopeless start_n[279851]
                    } ))
                    if(281150 call _cond_test debug[279240])
                    {
                      if(281145 call _cond_test(281113 call !=(281111 call(281106 call . state[279873] c"globalCounts") globalBin[281074]) 0))
                      {(281142 call writeln "tid " tid[281703] " nextOffsets[" bin[281180] "] = "(281141 call nextOffsets[281056] bin[281180]))
                      }
                    }
                  } label _continueLabel[281159] _indexOfInterest[281154] _iterator[281155]
                } label _breakLabel[281160]
              }
              { unknown _indexOfInterest[281305] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281306] "expr temp" "temp"(281315 'move' _iterator[281306](281313 call _getIterator(281212 call(281203 call .(281200 call . state[279873] c"bucketizer") c"classify") src[279869] start[281016] end[281028] criterion[279876] startbit[279879])))
                Defer
                {
                  {(281346 call _freeIterator _iterator[281306])
                  }
                }
                { scopeless type(281321 'move' _indexOfInterest[281305](281318 call iteratorIndex _iterator[281306]))
                }
                ForLoop[281307]
                {(281326 call _check_tuple_var_decl _indexOfInterest[281305] 2) unknown i[281332] "index var" "insert auto destroy"(281334 'move' i[281332](281330 call _indexOfInterest[281305] 0)) unknown bin[281339] "index var" "insert auto destroy"(281341 'move' bin[281339](281337 call _indexOfInterest[281305] 1))
                  { unknown next[281217] "ref var"(281216 call nextOffsets[281056] bin[281339])(281220 'end of statement')
                    if(281284 call _cond_test debug[279240])
                    {(281281 call writeln "tid " tid[281703] " dst[" next[281217] "] = src[" i[281332] "] bin " bin[281339])
                    }(281298 call shallowCopy module=[255] ShallowCopy[277402] dst[279863] next[281217] src[279869] i[281332] 1)(281302 call += next[281217] 1)(364390 'referenced modules list' ShallowCopy[277402])
                  } label _continueLabel[281310] _indexOfInterest[281305] _iterator[281306]
                } label _breakLabel[281311]
              }
            }(281679 call _downEndCount _coforallCount[281676] nil[44])(281678 'coforall loop')(281006 'actuals list' tiMarkRef[294] state[279873])
          } label _continueLabel[281689] _indexOfInterest[281684] _iterator[281685]
        } label _breakLabel[281690]
        Defer
        {
          {(281721 call _endCountFree _coforallCount[281676])
          }
        }(281726 call _waitEndCount _coforallCount[281676] 1)
      }
    } unknown counts[281759] "ref var"(281756 call . state[279873] c"counts")(281762 'end of statement')
    Forall {
      induction variables:
        unknown bin[281850] "index var" "insert auto destroy"
      iterated expressions:
        (281768 call #(281765 call chpl_build_low_bounded_range 0) nBuckets[279943])
      shadow variables:
      other variables
        forall body
      { unknown total[281771] 0(281774 'end of statement')
        { unknown _indexOfInterest[281801] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281802] "expr temp" "temp"(281811 'move' _iterator[281802](281809 call _getIterator(281818 call chpl_direct_counted_range_iter 0 nTasks[279973])))
          Defer
          {
            {(281834 call _freeIterator _iterator[281802])
            }
          }
          { scopeless type(281823 'move' _indexOfInterest[281801](281820 call iteratorIndex _iterator[281802]))
          }
          ForLoop[281803]
          { unknown tid[281827] "index var" "insert auto destroy"(281829 'move' tid[281827] _indexOfInterest[281801])
            {(281797 call += total[281771](281796 call(281785 call . state[279873] c"globalCounts")(281793 call +(281790 call * bin[281850] nTasks[279973]) tid[281827])))
            } label _continueLabel[281806] _indexOfInterest[281801] _iterator[281802]
          } label _breakLabel[281807]
        }(281846 call =(281844 call counts[281759] bin[281850]) total[281771])
      }
    }
  } function testBucketize[281862](arg start_n[281859] : int(64)[13], arg end_n[281865] : int(64)[13], arg dst[281871] :(281868 call chpl__buildArrayRuntimeType nil[44]), arg src[281877] :(281874 call chpl__buildArrayRuntimeType nil[44]), arg bucketizer[281880]:_any[178](?), arg criterion[281882]:_any[178](?), arg startbit[281885] : int(64)[13]) : _unknown[51]
  { unknown state[281894](281888 'new'(281893 call TwoArrayBucketizerSharedState[279559](?)(bucketizer = bucketizer[281880])))(281897 'end of statement')(281908 call bucketize start_n[281859] end_n[281865] dst[281871] src[281877] state[281894] criterion[281882] startbit[281885])(281914 return(281911 call . state[281894] c"counts"))
  } function partitioningSortWithScratchSpaceHandleSampling[281924](arg start_n[281921] : int(64)[13], arg end_n[281927] : int(64)[13], arg A[281933] :(281930 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[281939] :(281936 call chpl__buildArrayRuntimeType nil[44]), ref arg state[281943] : TwoArrayBucketizerSharedState[279559](?), arg criterion[281946]:_any[178](?), arg startbit[281949] : int(64)[13]) : _unknown[51] "private" "no return value for void"
  {
    if(282268 call _cond_test(354932 'is_subtype' SampleBucketizer[275547](?)(281958 'typeof'(281955 call . state[281943] c"bucketizer"))))
    { unknown n[281974](281972 call -(281969 call + 1 end_n[281927]) start_n[281921])(281977 'end of statement') unknown logNumBuckets[281988](281987 call computeLogBucketSize module=[255] SampleSortHelp[273917] n[281974])(281991 'end of statement') unknown numBuckets[281996](281994 call << 1 logNumBuckets[281988])(281999 'end of statement') unknown sampleStep[282010](282009 call chooseSampleStep module=[255] SampleSortHelp[273917] n[281974] logNumBuckets[281988])(282013 'end of statement') unknown sampleSize[282021](282019 call -(282016 call * sampleStep[282010] numBuckets[281996]) 1)(282024 'end of statement')
      if(282069 call _cond_test(282027 call >= sampleSize[282021] n[281974]))
      {
        if(282051 call _cond_test debug[279240])
        {(282049 call writeln "Reducing sample size because it was too big")
        }(282066 call = sampleSize[282021](282065 call max 1(282063 call / n[281974] 2)))
      }(282084 call putRandomSampleAtArrayStart module=[255] SampleSortHelp[273917] start_n[281921] end_n[281927] A[281933] sampleSize[282021])
      if(282108 call _cond_test debug[279240])
      {(282106 call writeln "recursing to sort the sample")
      }
      if(282163 call _cond_test(282118 call <= sampleSize[282021](282116 call * 1024 1024)))
      {(282142 call msbRadixSort start_n[281921](282128 call -(282125 call + start_n[281921] sampleSize[282021]) 1) A[281933] criterion[281946] startbit[281949](282134 call . state[281943] c"endbit")(settings =(282137 'new'(282140 call MSBRadixSortSettings[288067](?)))))
      }
      {(282160 call partitioningSortWithScratchSpace start_n[281921](282153 call -(282150 call + start_n[281921] sampleSize[282021]) 1) A[281933] Scratch[281939] state[281943] criterion[281946] startbit[281949])
      }
      if(282189 call _cond_test debug[279240])
      {(282186 call checkSorted module=[255] RadixSortHelp[276095] start_n[281921](282181 call -(282178 call + start_n[281921] sampleSize[282021]) 1) A[281933] criterion[281946] startbit[281949])(364431 'referenced modules list' RadixSortHelp[276095])
      }(282205 call createSplittersFromSample A[281933](282197 call . state[281943] c"bucketizer") criterion[281946] start_n[281921] sampleSize[282021] sampleStep[282010] numBuckets[281996])
      if(282264 call _cond_test debug[279240])
      {(282231 call writeln "sample bucketizer "(282228 call . state[281943] c"bucketizer"))(282262 call writef "A %i %i A=%xt\n" start_n[281921] end_n[281927](282261 call A[281933](282258 call chpl_build_bounded_range start_n[281921] end_n[281927])))
      }(364414 'referenced modules list' SampleSortHelp[273917] SampleSortHelp[273917] SampleSortHelp[273917])
    }(364410 'referenced modules list' SampleSortHelp[273917])
  }
  { scopeless type void[4]
  } function partitioningSortWithScratchSpace[282282](arg start_n[282279] : int(64)[13], arg end_n[282285] : int(64)[13], arg A[282291] :(282288 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[282297] :(282294 call chpl__buildArrayRuntimeType nil[44]), ref arg state[282301] : TwoArrayBucketizerSharedState[279559](?), arg criterion[282304]:_any[178](?), arg startbit[282307] : int(64)[13]) : _unknown[51] "no return value for void"
  {
    if(282320 call _cond_test(282316 call > startbit[282307](282313 call . state[282301] c"endbit")))
    {(282318 return _void[55])
    }
    if(282354 call _cond_test(282334 call <(282328 call - end_n[282285] start_n[282279])(282331 call . state[282301] c"baseCaseSize")))
    {(282349 call shellSort module=[255] ShellSort[273541] A[282291] criterion[282304](start = start_n[282279])(end = end_n[282285]))(282352 return _void[55])(364441 'referenced modules list' ShellSort[273541])
    }
    if(282399 call _cond_test debug[279240])
    {(282382 call writeln "partitioningSortWithScratchSpace(" start_n[282279] "," end_n[282285] ")")(282397 call writef "A %i %i A=%xt\n" start_n[282279] end_n[282285](282396 call A[282291](282393 call chpl_build_bounded_range start_n[282279] end_n[282285])))
    } const n[282410] "const"(282408 call +(282405 call - end_n[282285] start_n[282279]) 1)(282413 'end of statement') const maxSequentialSize[282436] "const"(282435 call max(282420 call / n[282410](282417 call . state[282301] c"nTasks"))(282433 call *(282424 call . state[282301] c"nTasks")(282430 call . state[282301] c"sequentialSizePerTask")))(282439 'end of statement')(282461 call(282446 call .(282443 call . state[282301] c"bigTasks") c"append")(282449 'new'(282459 call TwoArraySortTask[279360] start_n[282279] n[282410] startbit[282307](inA = 1)(doSort = 1))))(282475 call assert(282472 call ==(282468 call .(282465 call . state[282301] c"bigTasks") c"size") 1))(282491 call assert(282488 call ==(282484 call .(282481 call . state[282301] c"smallTasks") c"size") 0))
    { unknown tmp[283144] "temp"(283180 'move' tmp[283144](283169 call _cond_test(283171 call !(283179 call(283173 call .(283175 call . state[282301] c"bigTasks") c"isEmpty")))))
      WhileDo[283149]
      {
        { const task[282515] "const"(282514 call(282510 call .(282505 call . state[282301] c"bigTasks") c"pop"))(282518 'end of statement') const taskEnd[282533] "const"(282531 call -(282528 call +(282521 call . task[282515] c"start")(282525 call . task[282515] c"size")) 1)(282536 'end of statement')(282543 call assert(282539 call . task[282515] c"doSort"))
          if(282575 call _cond_test debug[279240])
          {(282572 call writeln "doing big task "(282570 call chpl_build_bounded_range(282566 call . task[282515] c"start") taskEnd[282533]))
          }
          if(282737 call _cond_test(282580 call . task[282515] c"inA"))
          {(282598 call partitioningSortWithScratchSpaceHandleSampling(282585 call . task[282515] c"start") taskEnd[282533] A[282291] Scratch[282297] state[282301] criterion[282304](282595 call . task[282515] c"startbit"))(282616 call bucketize(282603 call . task[282515] c"start") taskEnd[282533] Scratch[282297] A[282291] state[282301] criterion[282304](282613 call . task[282515] c"startbit"))
            if(282656 call _cond_test debug[279240])
            {(282653 call writef "pb %i %i Scratch=%xt\n"(282639 call . task[282515] c"start") taskEnd[282533](282652 call Scratch[282297](282649 call chpl_build_bounded_range(282645 call . task[282515] c"start") taskEnd[282533])))
            }
          }
          {(282675 call partitioningSortWithScratchSpaceHandleSampling(282662 call . task[282515] c"start") taskEnd[282533] Scratch[282297] A[282291] state[282301] criterion[282304](282672 call . task[282515] c"startbit"))(282693 call bucketize(282680 call . task[282515] c"start") taskEnd[282533] A[282291] Scratch[282297] state[282301] criterion[282304](282690 call . task[282515] c"startbit"))
            if(282733 call _cond_test debug[279240])
            {(282730 call writef "pb %i %i A=%xt\n"(282716 call . task[282515] c"start") taskEnd[282533](282729 call A[282291](282726 call chpl_build_bounded_range(282722 call . task[282515] c"start") taskEnd[282533])))
            }
          } const nowInA[282747] "const"(282745 call !(282742 call . task[282515] c"inA"))(282750 'end of statement') function chpl__scan3[282762](arg chpl_toScan[282764]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
          { unknown chpl_eltType[282766] "maybe type" "temp"
            { scopeless type(282770 'move' chpl_eltType[282766](282772 'typeof'(282774 call chpl__initCopy(282776 call iteratorIndex(282778 call _getIterator chpl_toScan[282764])))))
            } const tmp[282767] "const" "temp"(282787 'move' tmp[282767](282786 'new'(282785 call SumReduceScanOp[376412](?)(eltType = chpl_eltType[282766])(_chpl_manager = unmanaged[220](?)))))(282789 return(282791 call chpl__scanIterator tmp[282767] chpl_toScan[282764]))
          }(282802 call =(282754 call . state[282301] c"ends")(282800 call +(282795 call chpl__scan3(282759 call . state[282301] c"counts"))(282797 call . task[282515] c"start"))) const nBuckets[282814] "const"(282813 call(282809 call .(282806 call . state[282301] c"bucketizer") c"getNumBuckets"))(282817 'end of statement')
          { unknown _indexOfInterest[283104] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[283105] "expr temp" "temp"(283114 'move' _iterator[283105](283112 call _getIterator(283121 call chpl_direct_counted_range_iter 0 nBuckets[282814])))
            Defer
            {
              {(283137 call _freeIterator _iterator[283105])
              }
            }
            { scopeless type(283126 'move' _indexOfInterest[283104](283123 call iteratorIndex _iterator[283105]))
            }
            ForLoop[283106]
            { unknown bin[283130] "index var" "insert auto destroy"(283132 'move' bin[283130] _indexOfInterest[283104])
              { const binSize[282832] "const"(282831 call(282826 call . state[282301] c"counts") bin[283130])(282835 'end of statement') const binStart[282847] "const"(282845 call -(282843 call(282838 call . state[282301] c"ends") bin[283130]) binSize[282832])(282850 'end of statement') const binEnd[282858] "const"(282856 call -(282853 call + binStart[282847] binSize[282832]) 1)(282861 'end of statement') const binStartBit[282877] "const"(282876 call(282868 call .(282863 call . state[282301] c"bucketizer") c"getNextStartBit")(282872 call . task[282515] c"startbit"))(282880 'end of statement') const sortit[282898] "const"(282897 call(282892 call .(282891 call(282887 call .(282882 call . state[282301] c"bucketizer") c"getBinsToRecursivelySort")) c"contains") bin[283130])(282901 'end of statement')
                if(283099 call _cond_test(282904 call == binSize[282832] 0))
                {
                }
                {
                  if(283094 call _cond_test(282913 call &&(282908 call ! nowInA[282747])(282911 call ! sortit[282898])))
                  {(282932 call(282919 call .(282916 call . state[282301] c"smallTasks") c"append")(282922 'new'(282930 call TwoArraySortTask[279360] binStart[282847] binSize[282832] binStartBit[282877] nowInA[282747] sortit[282898])))
                  }
                  {
                    if(283090 call _cond_test(282952 call ||(282946 call ||(282940 call > binStartBit[282877](282937 call . state[282301] c"endbit"))(282944 call >= binStart[282847] binEnd[282858]))(282950 call <= binSize[282832] maxSequentialSize[282436])))
                    {
                      if(283006 call _cond_test(282959 call && debug[279240](282957 call > binSize[282832] 0)))
                      {(283003 call writeln "handling bin " bin[283130] " "(282984 call chpl_build_bounded_range binStart[282847] binEnd[282858]) " as small")
                      }(283028 call(283015 call .(283012 call . state[282301] c"smallTasks") c"append")(283018 'new'(283026 call TwoArraySortTask[279360] binStart[282847] binSize[282832] binStartBit[282877] nowInA[282747] sortit[282898])))
                    }
                    {
                      if(283066 call _cond_test(283035 call && debug[279240](283033 call > binSize[282832] 0)))
                      {(283063 call writeln "handling bin " bin[283130] " "(283044 call chpl_build_bounded_range binStart[282847] binEnd[282858]) " as big")
                      }(283088 call(283075 call .(283072 call . state[282301] c"bigTasks") c"append")(283078 'new'(283086 call TwoArraySortTask[279360] binStart[282847] binSize[282832] binStartBit[282877] nowInA[282747] sortit[282898])))
                    }
                  }
                }
              } label _continueLabel[283109] _indexOfInterest[283104] _iterator[283105]
            } label _breakLabel[283110]
          }
        } label _continueLabel[283147](283164 'move' tmp[283144](283153 call _cond_test(283155 call !(283163 call(283157 call .(283159 call . state[282301] c"bigTasks") c"isEmpty"))))) tmp[283144]
      } label _breakLabel[283148]
    }
    Forall {
      induction variables:
        unknown task[283327] "index var" "insert auto destroy"
      iterated expressions:
        (283185 call . state[282301] c"smallTasks")
      shadow variables:
      other variables
        forall body
      { const size[283192] "const"(283189 call . task[283327] c"size")(283195 'end of statement') const taskEnd[283207] "const"(283205 call -(283202 call +(283198 call . task[283327] c"start") size[283192]) 1)(283210 'end of statement')
        if(283322 call _cond_test(283213 call > size[283192] 0))
        {
          if(283240 call _cond_test(283219 call !(283216 call . task[283327] c"inA")))
          {(283237 call shallowCopy module=[255] ShallowCopy[277402] A[282291](283228 call . task[283327] c"start") Scratch[282297](283233 call . task[283327] c"start") size[283192])(364491 'referenced modules list' ShallowCopy[277402])
          }
          if(283283 call _cond_test debug[279240])
          {(283280 call writef "doing small task %i %i A=%xt\n"(283266 call . task[283327] c"start") taskEnd[283207](283279 call A[282291](283276 call chpl_build_bounded_range(283272 call . task[283327] c"start") taskEnd[283207])))
          }
          if(283318 call _cond_test(283288 call . task[283327] c"doSort"))
          {(283315 call msbRadixSort(283293 call . task[283327] c"start") taskEnd[283207] A[282291] criterion[282304](283301 call . task[283327] c"startbit")(283305 call . state[282301] c"endbit")(settings =(283308 'new'(283313 call MSBRadixSortSettings[288067](?)(alwaysSerial = 1)))))
          }
        }
      }
    }
    if(283405 call _cond_test debug[279240])
    {(283360 call writef "ps %i %i A=%xt\n" start_n[282279] end_n[282285](283359 call A[282291](283356 call chpl_build_bounded_range start_n[282279] end_n[282285])))(283391 call writef "ps %i %i Scratch=%xt\n" start_n[282279] end_n[282285](283390 call Scratch[282297](283387 call chpl_build_bounded_range start_n[282279] end_n[282285])))(283403 call checkSorted module=[255] RadixSortHelp[276095] start_n[282279] end_n[282285] A[282291] criterion[282304] startbit[282307])(364505 'referenced modules list' RadixSortHelp[276095])
    }
  }
  { scopeless type void[4]
  } function distributedPartitioningSortWithScratchSpaceBaseCase[283418](arg start_n[283415] : int(64)[13], arg end_n[283421] : int(64)[13], arg A[283427] :(283424 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283433] :(283430 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283437] : TwoArrayDistributedBucketizerSharedState[279841](?), arg criterion[283440]:_any[178](?), arg startbit[283443] : int(64)[13]) : _unknown[51] "private" "no return value for void"
  {
    if(283456 call _cond_test(283452 call > startbit[283443](283449 call . state[283437] c"endbit")))
    {(283454 return _void[55])
    } const n[283469] "const"(283467 call +(283464 call - end_n[283421] start_n[283415]) 1)(283472 'end of statement') const localSubdomain[283481] "const"(283480 call(283476 call . A[283427] c"localSubdomain"))(283484 'end of statement') const curDomain[283492] "const"(283490 call chpl__buildDomainExpr(283487 call chpl_build_bounded_range start_n[283415] end_n[283421]))(283495 'end of statement') const intersect[283500] "const"(283499 call curDomain[283492] localSubdomain[283481])(283503 'end of statement')
    if(283664 call _cond_test(283506 call == curDomain[283492] intersect[283500]))
    {
      if(283562 call _cond_test(283513 call > n[283469](283510 call . state[283437] c"baseCaseSize")))
      {(283539 call msbRadixSort start_n[283415] end_n[283421](283527 call(283522 call . A[283427] c"localSlice") curDomain[283492]) criterion[283440] startbit[283443](283531 call . state[283437] c"endbit")(settings =(283534 'new'(283537 call MSBRadixSortSettings[288067](?)))))
      }
      {(283559 call shellSort module=[255] ShellSort[273541](283552 call(283547 call . A[283427] c"localSlice") curDomain[283492]) criterion[283440](start = start_n[283415])(end = end_n[283421]))(364516 'referenced modules list' ShellSort[273541])
      }
    }
    { const size[283574] "const"(283572 call +(283569 call - end_n[283421] start_n[283415]) 1)(283577 'end of statement') unknown LocalA[283592](283590 call chpl__buildArrayRuntimeType(283588 call chpl__ensureDomainExpr(283581 call chpl_build_bounded_range start_n[283415] end_n[283421]))(283585 call . A[283427] c"eltType"))(283595 'end of statement')(283606 call shallowCopy module=[255] ShallowCopy[277402] LocalA[283592] start_n[283415] A[283427] start_n[283415] size[283574])
      if(283648 call _cond_test(283613 call > n[283469](283610 call . state[283437] c"baseCaseSize")))
      {(283631 call msbRadixSort start_n[283415] end_n[283421] LocalA[283592] criterion[283440] startbit[283443](283623 call . state[283437] c"endbit")(settings =(283626 'new'(283629 call MSBRadixSortSettings[288067](?)))))
      }
      {(283645 call shellSort module=[255] ShellSort[273541] LocalA[283592] criterion[283440](start = start_n[283415])(end = end_n[283421]))(364532 'referenced modules list' ShellSort[273541])
      }(283662 call shallowCopy module=[255] ShallowCopy[277402] A[283427] start_n[283415] LocalA[283592] start_n[283415] size[283574])(364524 'referenced modules list' ShallowCopy[277402] ShallowCopy[277402])
    }
    if(283681 call _cond_test debug[279240])
    {(283678 call checkSorted module=[255] RadixSortHelp[276095] start_n[283415] end_n[283421] A[283427] criterion[283440])(364543 'referenced modules list' RadixSortHelp[276095])
    }(283685 return _void[55])
  }
  { scopeless type void[4]
  } function distributedPartitioningSortWithScratchSpaceHandleSampling[283696](arg start_n[283693] : int(64)[13], arg end_n[283699] : int(64)[13], arg A[283705] :(283702 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283711] :(283708 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283715] : TwoArrayDistributedBucketizerSharedState[279841](?), arg criterion[283718]:_any[178](?), arg startbit[283721] : int(64)[13]) : _unknown[51] "private" "no return value for void"
  {
    if(284063 call _cond_test(354937 'is_subtype' SampleBucketizer[275547](?)(283741 'typeof'(283738 call .(283735 call .(283734 call(283729 call . state[283715] c"perLocale") 0) c"compat") c"bucketizer"))))
    { unknown n[283755](283753 call -(283750 call + 1 end_n[283699]) start_n[283693])(283758 'end of statement') unknown logNumBuckets[283767](283766 call computeLogBucketSize module=[255] SampleSortHelp[273917] n[283755])(283770 'end of statement') unknown numBuckets[283775](283773 call << 1 logNumBuckets[283767])(283778 'end of statement') unknown sampleStep[283787](283786 call chooseSampleStep module=[255] SampleSortHelp[273917] n[283755] logNumBuckets[283767])(283790 'end of statement') unknown sampleSize[283798](283796 call -(283793 call * sampleStep[283787] numBuckets[283775]) 1)(283801 'end of statement')
      if(283830 call _cond_test(283804 call >= sampleSize[283798] n[283755]))
      {
        if(283812 call _cond_test debug[279240])
        {(283810 call writeln "Reducing sample size because it was too big")
        }(283827 call = sampleSize[283798](283826 call max 1(283824 call / n[283755] 2)))
      }(283843 call putRandomSampleAtArrayStart module=[255] SampleSortHelp[273917] start_n[283693] end_n[283699] A[283705] sampleSize[283798])
      if(283851 call _cond_test debug[279240])
      {(283849 call writeln "recursing to sort the sample")
      }
      if(283899 call _cond_test(283861 call <= sampleSize[283798](283859 call * 1024 1024)))
      {(283878 call distributedPartitioningSortWithScratchSpaceBaseCase start_n[283693](283871 call -(283868 call + start_n[283693] sampleSize[283798]) 1) A[283705] Scratch[283711] state[283715] criterion[283718] startbit[283721])
      }
      {(283896 call distributedPartitioningSortWithScratchSpace start_n[283693](283889 call -(283886 call + start_n[283693] sampleSize[283798]) 1) A[283705] Scratch[283711] state[283715] criterion[283718] startbit[283721])
      }
      if(283923 call _cond_test debug[279240])
      {(283920 call checkSorted module=[255] RadixSortHelp[276095] start_n[283693](283915 call -(283912 call + start_n[283693] sampleSize[283798]) 1) A[283705] criterion[283718] startbit[283721])(364570 'referenced modules list' RadixSortHelp[276095])
      }(283948 call createSplittersFromSample A[283705](283940 call .(283937 call .(283936 call(283931 call . state[283715] c"perLocale") 0) c"compat") c"bucketizer") criterion[283718] start_n[283693] sampleSize[283798] sampleStep[283787] numBuckets[283775])
      if(283984 call _cond_test debug[279240])
      {(283967 call writeln "sample bucketizer "(283964 call .(283961 call .(283960 call(283955 call . state[283715] c"perLocale") 0) c"compat") c"bucketizer"))(283982 call writef "A %i %i A=%xt\n" start_n[283693] end_n[283699](283981 call A[283705](283978 call chpl_build_bounded_range start_n[283693] end_n[283699])))
      }
      { unknown _indexOfInterest[284022] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284023] "expr temp" "temp"(284032 'move' _iterator[284023](284030 call _getIterator(284040 call chpl_direct_range_iter 1(284037 call . state[283715] c"numLocales") 1)))
        Defer
        {
          {(284056 call _freeIterator _iterator[284023])
          }
        }
        { scopeless type(284045 'move' _indexOfInterest[284022](284042 call iteratorIndex _iterator[284023]))
        }
        ForLoop[284024]
        { unknown lid[284049] "index var" "insert auto destroy"(284051 'move' lid[284049] _indexOfInterest[284022])
          {(284018 call =(284005 call .(284004 call(283999 call . state[283715] c"perLocale") lid[284049]) c"bucketizer")(284015 call .(284014 call(284009 call . state[283715] c"perLocale") 0) c"bucketizer"))
          } label _continueLabel[284027] _indexOfInterest[284022] _iterator[284023]
        } label _breakLabel[284028]
      }(364554 'referenced modules list' SampleSortHelp[273917] SampleSortHelp[273917] SampleSortHelp[273917])
    }(364550 'referenced modules list' SampleSortHelp[273917])
  }
  { scopeless type void[4]
  } function distributedPartitioningSortWithScratchSpace[284077](arg start_n[284074] : int(64)[13], arg end_n[284080] : int(64)[13], arg A[284086] :(284083 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[284092] :(284089 call chpl__buildArrayRuntimeType nil[44]), ref arg state[284096] : TwoArrayDistributedBucketizerSharedState[279841](?), arg criterion[284099]:_any[178](?), arg startbit[284102] : int(64)[13]) : _unknown[51] "no return value for void"
  {
    if(284138 call _cond_test(284114 call !(284113 call(284109 call . A[284086] c"hasSingleLocalSubdomain"))))
    {(284135 call compilerError "distributedPartitioningSortWithScratchSpace needs single local subdomain")
    }
    if(284152 call _cond_test(284148 call > startbit[284102](284145 call . state[284096] c"endbit")))
    {(284150 return _void[55])
    }
    if(284181 call _cond_test(284165 call <(284159 call - end_n[284080] start_n[284074])(284162 call . state[284096] c"baseCaseSize")))
    {(284176 call distributedPartitioningSortWithScratchSpaceBaseCase start_n[284074] end_n[284080] A[284086] Scratch[284092] state[284096] criterion[284099] startbit[284102])(284179 return _void[55])
    }
    if(284250 call _cond_test debug[279240])
    {(284247 call writeln "in distributed radix sort " start_n[284074] ".." end_n[284080] " startbit " startbit[284102] " endbit "(284244 call . state[284096] c"endbit"))
    } const n[284261] "const"(284259 call +(284256 call - end_n[284080] start_n[284074]) 1)(284264 'end of statement')(284284 call(284271 call .(284268 call . state[284096] c"distTasks") c"append")(284274 'new'(284282 call TwoArraySortTask[279360] start_n[284074] n[284261] startbit[284102] 1 1)))(284298 call assert(284295 call ==(284291 call .(284288 call . state[284096] c"distTasks") c"size") 1))
    { unknown tmp[286924] "temp"(286960 'move' tmp[286924](286949 call _cond_test(286951 call !(286959 call(286953 call .(286955 call . state[284096] c"distTasks") c"isEmpty")))))
      WhileDo[286929]
      {
        { const task[284320] "const"(284319 call(284315 call .(284312 call . state[284096] c"distTasks") c"pop"))(284323 'end of statement') const taskStart[284329] "const"(284326 call . task[284320] c"start")(284332 'end of statement') const taskEnd[284346] "const"(284344 call -(284341 call +(284334 call . task[284320] c"start")(284338 call . task[284320] c"size")) 1)(284349 'end of statement')(284356 call assert(284352 call . task[284320] c"doSort"))(284364 call assert(284360 call . task[284320] c"inA"))(284381 call distributedPartitioningSortWithScratchSpaceHandleSampling(284368 call . task[284320] c"start") taskEnd[284346] A[284086] Scratch[284092] state[284096] criterion[284099](284378 call . task[284320] c"startbit")) const nBuckets[284401] "const"(284400 call(284396 call .(284393 call .(284390 call .(284389 call(284384 call . state[284096] c"perLocale") 0) c"compat") c"bucketizer") c"getNumBuckets"))(284404 'end of statement') const nTasks[284409] "const"(284406 call . state[284096] c"numLocales")(284412 'end of statement')
          { unknown tmpIter[284745] "expr temp" "maybe ref" "no copy" "temp"(284748 'move' tmpIter[284745](284430 call _build_tuple(284425 call(284421 call . A[284086] c"targetLocales"))(284428 call chpl_build_low_bounded_range 0))) unknown isRngDomArr[285145] "maybe param" "temp"(285160 'move' isRngDomArr[285145](285158 call ||(285147 call isBoundedRange tmpIter[284745])(285156 call ||(285150 call isDomain tmpIter[284745])(285153 call isArray tmpIter[284745]))))
            if isRngDomArr[285145]
            { const _coforallCount[284989] "const" "end count" "temp"(285068 'move' _coforallCount[284989](285065 call _endCountAlloc 0)) unknown numTasks[284990] "temp"(285052 'move' numTasks[284990](285048 call . tmpIter[284745] c"size"))(285043 call _upEndCount _coforallCount[284989] 0 numTasks[284990]) unknown _indexOfInterest[284996] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284997] "expr temp" "temp"(285006 'move' _iterator[284997](285004 call _getIteratorZip tmpIter[284745]))
              Defer
              {
                {(285036 call _freeIterator _iterator[284997])
                }
              }
              { scopeless type(285011 'move' _indexOfInterest[284996](285008 call iteratorIndex _iterator[284997]))
              }
              ForLoop[284998]
              {(285016 call _check_tuple_var_decl _indexOfInterest[284996] 2) unknown loc[285022] "coforall index var" "index var" "insert auto destroy"(285024 'move' loc[285022](285020 call _indexOfInterest[284996] 0)) unknown tid[285029] "coforall index var" "index var" "insert auto destroy"(285031 'move' tid[285029](285027 call _indexOfInterest[284996] 1)) const tmp[284754] "const" "temp"(284756 'move' tmp[284754](284758 'deref'(284759 '_wide_get_locale' loc[285022])))
                {
                  { const localDomain[284767] "const"(284773 call(284772 call(284769 call . A[284086] c"localSubdomain"))(284775 call chpl_build_bounded_range(284777 call . task[284320] c"start") taskEnd[284346]))(284782 'end of statement') unknown localSrc[284784] "ref var"(284789 call(284786 call . A[284086] c"localSlice") localDomain[284767])(284792 'end of statement') unknown localDst[284794] "ref var"(284799 call(284796 call . Scratch[284092] c"localSlice") localDomain[284767])(284802 'end of statement')(284804 call bucketize(284806 call . localDomain[284767] c"alignedLow")(284810 call . localDomain[284767] c"alignedHigh") localDst[284794] localSrc[284784](284816 call .(284821 call(284818 call . state[284096] c"perLocale") tid[285029]) c"compat") criterion[284099](284826 call . task[284320] c"startbit")) unknown localCounts[284830] "ref var"(284832 call .(284834 call .(284839 call(284836 call . state[284096] c"perLocale") tid[285029]) c"compat") c"counts")(284844 'end of statement')
                    if(284846 call _cond_test debug[279240])
                    { unknown total[284850] 0(284853 'end of statement')
                      { unknown _indexOfInterest[284855] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284857] "expr temp" "temp"(284859 'move' _iterator[284857](284862 call _getIterator(284864 call chpl_direct_counted_range_iter 0 nBuckets[284401])))
                        Defer
                        {
                          {(284869 call _freeIterator _iterator[284857])
                          }
                        }
                        { scopeless type(284873 'move' _indexOfInterest[284855](284876 call iteratorIndex _iterator[284857]))
                        }
                        ForLoop[284878]
                        { unknown bin[284881] "index var" "insert auto destroy"(284883 'move' bin[284881] _indexOfInterest[284855])
                          {
                            if(284888 call _cond_test(284890 call >(284892 call localCounts[284830] bin[284881]) 0))
                            {(284897 call writeln "localCounts[" bin[284881] "]="(284902 call localCounts[284830] bin[284881]))(284905 call += total[284850](284908 call localCounts[284830] bin[284881]))
                            }
                          } label _continueLabel[284911] _indexOfInterest[284855] _iterator[284857]
                        } label _breakLabel[284913]
                      }(284916 call assert(284918 call == total[284850](284921 call . localDomain[284767] c"size")))
                    }
                    { unknown _indexOfInterest[284926] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284928] "expr temp" "temp"(284930 'move' _iterator[284928](284933 call _getIterator(284935 call vectorizeOnly(284937 call #(284939 call chpl_build_low_bounded_range 0) nBuckets[284401]))))
                      Defer
                      {
                        {(284944 call _freeIterator _iterator[284928])
                        }
                      }
                      { scopeless type(284948 'move' _indexOfInterest[284926](284951 call iteratorIndex _iterator[284928]))
                      }
                      ForLoop[284953]
                      { unknown bin[284956] "index var" "insert auto destroy"(284958 'move' bin[284956] _indexOfInterest[284926])
                        {(284963 call =(284973 call(284965 call .(284970 call(284967 call . state[284096] c"perLocale") 0) c"globalCounts")(284975 call +(284977 call * bin[284956] nTasks[284409]) tid[285029]))(284982 call localCounts[284830] bin[284956]))
                        } label _continueLabel[284984] _indexOfInterest[284926] _iterator[284928]
                      } label _breakLabel[284986]
                    }
                  }(284991 call _downEndCount _coforallCount[284989] nil[44])(284762 'coforall on block' 0 tmp[284754])(284750 'actuals list' tiMarkRef[294] state[284096])
                } label _continueLabel[285001] _indexOfInterest[284996] _iterator[284997]
              } label _breakLabel[285002]
              Defer
              {
                {(285055 call _endCountFree _coforallCount[284989])
                }
              }(285060 call _waitEndCount _coforallCount[284989] 0 numTasks[284990])
            }
            { const _coforallCount[285072] "const" "end count" "temp"(285142 'move' _coforallCount[285072](285139 call _endCountAlloc 0)) unknown _indexOfInterest[285079] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[285080] "expr temp" "temp"(285089 'move' _iterator[285080](285087 call _getIteratorZip tmpIter[284745]))
              Defer
              {
                {(285119 call _freeIterator _iterator[285080])
                }
              }
              { scopeless type(285094 'move' _indexOfInterest[285079](285091 call iteratorIndex _iterator[285080]))
              }
              ForLoop[285081]
              {(285099 call _check_tuple_var_decl _indexOfInterest[285079] 2) unknown loc[285105] "coforall index var" "index var" "insert auto destroy"(285107 'move' loc[285105](285103 call _indexOfInterest[285079] 0)) unknown tid[285112] "coforall index var" "index var" "insert auto destroy"(285114 'move' tid[285112](285110 call _indexOfInterest[285079] 1))(285126 call _upEndCount _coforallCount[285072] 0) const tmp[284735] "const" "temp"(284737 'move' tmp[284735](284733 'deref'(284732 '_wide_get_locale' loc[285105])))
                {
                  { const localDomain[284455] "const"(284454 call(284445 call(284441 call . A[284086] c"localSubdomain"))(284451 call chpl_build_bounded_range(284447 call . task[284320] c"start") taskEnd[284346]))(284458 'end of statement') unknown localSrc[284467] "ref var"(284466 call(284461 call . A[284086] c"localSlice") localDomain[284455])(284470 'end of statement') unknown localDst[284478] "ref var"(284477 call(284472 call . Scratch[284092] c"localSlice") localDomain[284455])(284481 'end of statement')(284509 call bucketize(284484 call . localDomain[284455] c"alignedLow")(284489 call . localDomain[284455] c"alignedHigh") localDst[284478] localSrc[284467](284501 call .(284500 call(284495 call . state[284096] c"perLocale") tid[285112]) c"compat") criterion[284099](284506 call . task[284320] c"startbit")) unknown localCounts[284524] "ref var"(284521 call .(284518 call .(284517 call(284512 call . state[284096] c"perLocale") tid[285112]) c"compat") c"counts")(284527 'end of statement')
                    if(284657 call _cond_test debug[279240])
                    { unknown total[284530] 0(284533 'end of statement')
                      { unknown _indexOfInterest[284606] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284607] "expr temp" "temp"(284616 'move' _iterator[284607](284614 call _getIterator(284623 call chpl_direct_counted_range_iter 0 nBuckets[284401])))
                        Defer
                        {
                          {(284639 call _freeIterator _iterator[284607])
                          }
                        }
                        { scopeless type(284628 'move' _indexOfInterest[284606](284625 call iteratorIndex _iterator[284607]))
                        }
                        ForLoop[284608]
                        { unknown bin[284632] "index var" "insert auto destroy"(284634 'move' bin[284632] _indexOfInterest[284606])
                          {
                            if(284601 call _cond_test(284547 call >(284545 call localCounts[284524] bin[284632]) 0))
                            {(284590 call writeln "localCounts[" bin[284632] "]="(284589 call localCounts[284524] bin[284632]))(284598 call += total[284530](284597 call localCounts[284524] bin[284632]))
                            }
                          } label _continueLabel[284611] _indexOfInterest[284606] _iterator[284607]
                        } label _breakLabel[284612]
                      }(284655 call assert(284652 call == total[284530](284649 call . localDomain[284455] c"size")))
                    }
                    { unknown _indexOfInterest[284698] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284699] "expr temp" "temp"(284708 'move' _iterator[284699](284706 call _getIterator(284670 call vectorizeOnly(284667 call #(284664 call chpl_build_low_bounded_range 0) nBuckets[284401]))))
                      Defer
                      {
                        {(284725 call _freeIterator _iterator[284699])
                        }
                      }
                      { scopeless type(284714 'move' _indexOfInterest[284698](284711 call iteratorIndex _iterator[284699]))
                      }
                      ForLoop[284700]
                      { unknown bin[284718] "index var" "insert auto destroy"(284720 'move' bin[284718] _indexOfInterest[284698])
                        {(284694 call =(284689 call(284678 call .(284677 call(284672 call . state[284096] c"perLocale") 0) c"globalCounts")(284686 call +(284683 call * bin[284718] nTasks[284409]) tid[285112]))(284693 call localCounts[284524] bin[284718]))
                        } label _continueLabel[284703] _indexOfInterest[284698] _iterator[284699]
                      } label _breakLabel[284704]
                    }
                  }(285074 call _downEndCount _coforallCount[285072] nil[44])(284740 'coforall on block' 0 tmp[284735])(284436 'actuals list' tiMarkRef[294] state[284096])
                } label _continueLabel[285084] _indexOfInterest[285079] _iterator[285080]
              } label _breakLabel[285085]
              Defer
              {
                {(285130 call _endCountFree _coforallCount[285072])
                }
              }(285135 call _waitEndCount _coforallCount[285072] 0)
            }
          }
          if(285197 call _cond_test debug[279240])
          {(285194 call writef "after bucketize local portions, Scratch is %xt\n"(285193 call Scratch[284092](285190 call chpl_build_bounded_range(285186 call . task[284320] c"start") taskEnd[284346])))
          } function chpl__scan4[285222](arg chpl_toScan[285224]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
          { unknown chpl_eltType[285226] "maybe type" "temp"
            { scopeless type(285230 'move' chpl_eltType[285226](285232 'typeof'(285234 call chpl__initCopy(285236 call iteratorIndex(285238 call _getIterator chpl_toScan[285224])))))
            } const tmp[285227] "const" "temp"(285247 'move' tmp[285227](285246 'new'(285245 call SumReduceScanOp[376412](?)(eltType = chpl_eltType[285226])(_chpl_manager = unmanaged[220](?)))))(285249 return(285251 call chpl__scanIterator tmp[285227] chpl_toScan[285224]))
          }(285262 call =(285208 call .(285207 call(285202 call . state[284096] c"perLocale") 0) c"globalEnds")(285260 call +(285255 call chpl__scan4(285219 call .(285218 call(285213 call . state[284096] c"perLocale") 0) c"globalCounts"))(285257 call . task[284320] c"start")))
          Forall {
            induction variables:
              unknown loc[285344] "index var" "insert auto destroy"
              unknown tid[285346] "index var" "insert auto destroy"
            iterated expressions:
              (285275 call(285271 call . A[284086] c"targetLocales"))
              (285278 call chpl_build_low_bounded_range 0)
            shadow variables:
              state[285282] 'ref' intent outer var state[284096]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              if(285338 call _cond_test(285289 call != tid[285346] 0))
              {(285311 call =(285298 call .(285297 call(285292 call . state[285282] c"perLocale") tid[285346]) c"globalCounts")(285308 call .(285307 call(285302 call . state[285282] c"perLocale") 0) c"globalCounts"))(285335 call =(285322 call .(285321 call(285316 call . state[285282] c"perLocale") tid[285346]) c"globalEnds")(285332 call .(285331 call(285326 call . state[285282] c"perLocale") 0) c"globalEnds"))
              }
            }
          }
          if(285532 call _cond_test debug[279240])
          { unknown total[285352] 0(285355 'end of statement')
            { unknown _indexOfInterest[285478] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[285479] "expr temp" "temp"(285488 'move' _iterator[285479](285486 call _getIterator(285498 call chpl_direct_counted_range_iter 0(285494 call . state[284096] c"countsSize"))))
              Defer
              {
                {(285514 call _freeIterator _iterator[285479])
                }
              }
              { scopeless type(285503 'move' _indexOfInterest[285478](285500 call iteratorIndex _iterator[285479]))
              }
              ForLoop[285480]
              { unknown i[285507] "index var" "insert auto destroy"(285509 'move' i[285507] _indexOfInterest[285478])
                {
                  if(285473 call _cond_test(285381 call !=(285379 call(285374 call .(285373 call(285368 call . state[284096] c"perLocale") 0) c"globalCounts") i[285507]) 0))
                  {(285397 call += total[285352](285396 call(285391 call .(285390 call(285385 call . state[284096] c"perLocale") 0) c"globalCounts") i[285507]))(285435 call writeln "state.globalCounts[" i[285507] "]="(285434 call(285429 call .(285428 call(285423 call . state[284096] c"perLocale") 0) c"globalCounts") i[285507]))(285471 call writeln "state.globalEnds[" i[285507] "]="(285470 call(285465 call .(285464 call(285459 call . state[284096] c"perLocale") 0) c"globalEnds") i[285507]))
                  }
                } label _continueLabel[285483] _indexOfInterest[285478] _iterator[285479]
              } label _breakLabel[285484]
            }(285530 call assert(285527 call == total[285352](285524 call . task[284320] c"size")))
          }
          { unknown tmpIter[286011] "expr temp" "maybe ref" "no copy" "temp"(286014 'move' tmpIter[286011](285551 call _build_tuple(285546 call(285542 call . A[284086] c"targetLocales"))(285549 call chpl_build_low_bounded_range 0))) unknown isRngDomArr[286502] "maybe param" "temp"(286517 'move' isRngDomArr[286502](286515 call ||(286504 call isBoundedRange tmpIter[286011])(286513 call ||(286507 call isDomain tmpIter[286011])(286510 call isArray tmpIter[286011]))))
            if isRngDomArr[286502]
            { const _coforallCount[286346] "const" "end count" "temp"(286425 'move' _coforallCount[286346](286422 call _endCountAlloc 0)) unknown numTasks[286347] "temp"(286409 'move' numTasks[286347](286405 call . tmpIter[286011] c"size"))(286400 call _upEndCount _coforallCount[286346] 0 numTasks[286347]) unknown _indexOfInterest[286353] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286354] "expr temp" "temp"(286363 'move' _iterator[286354](286361 call _getIteratorZip tmpIter[286011]))
              Defer
              {
                {(286393 call _freeIterator _iterator[286354])
                }
              }
              { scopeless type(286368 'move' _indexOfInterest[286353](286365 call iteratorIndex _iterator[286354]))
              }
              ForLoop[286355]
              {(286373 call _check_tuple_var_decl _indexOfInterest[286353] 2) unknown loc[286379] "coforall index var" "index var" "insert auto destroy"(286381 'move' loc[286379](286377 call _indexOfInterest[286353] 0)) unknown tid[286386] "coforall index var" "index var" "insert auto destroy"(286388 'move' tid[286386](286384 call _indexOfInterest[286353] 1)) const tmp[286020] "const" "temp"(286022 'move' tmp[286020](286024 'deref'(286025 '_wide_get_locale' loc[286379])))
                {
                  { const globalCounts[286033] "const" "ref var"(286035 call .(286040 call(286037 call . state[284096] c"perLocale") tid[286386]) c"globalCounts")(286044 'end of statement') const globalEnds[286046] "const" "ref var"(286048 call .(286053 call(286050 call . state[284096] c"perLocale") tid[286386]) c"globalEnds")(286057 'end of statement') const localSubdomain[286059] "const"(286065 call(286064 call(286061 call . A[284086] c"localSubdomain"))(286067 call chpl_build_bounded_range(286069 call . task[284320] c"start") taskEnd[284346]))(286074 'end of statement') unknown localOffsets[286076] "ref var"(286078 call .(286080 call .(286085 call(286082 call . state[284096] c"perLocale") tid[286386]) c"compat") c"counts")(286090 'end of statement')
                    { unknown offset[286093](286095 call . localSubdomain[286059] c"low")(286099 'end of statement')
                      { unknown _indexOfInterest[286101] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286103] "expr temp" "temp"(286105 'move' _iterator[286103](286108 call _getIterator(286110 call chpl_direct_counted_range_iter 0 nBuckets[284401])))
                        Defer
                        {
                          {(286115 call _freeIterator _iterator[286103])
                          }
                        }
                        { scopeless type(286119 'move' _indexOfInterest[286101](286122 call iteratorIndex _iterator[286103]))
                        }
                        ForLoop[286124]
                        { unknown bin[286127] "index var" "insert auto destroy"(286129 'move' bin[286127] _indexOfInterest[286101])
                          {(286134 call =(286136 call localOffsets[286076] bin[286127]) offset[286093])(286140 call += offset[286093](286143 call globalCounts[286033](286145 call +(286147 call * bin[286127] nTasks[284409]) tid[286386])))
                          } label _continueLabel[286151] _indexOfInterest[286101] _iterator[286103]
                        } label _breakLabel[286153]
                      }
                    }
                    Forall {
                      induction variables:
                        unknown bin[286337] "index var" "insert auto destroy"
                      iterated expressions:
                        (286340 call #(286342 call chpl_build_low_bounded_range 0) nBuckets[284401])
                      shadow variables:
                      other variables
                        forall body
                      { unknown size[286157](286159 call globalCounts[286033](286161 call +(286163 call * bin[286337] nTasks[284409]) tid[286386]))(286168 'end of statement')
                        if(286170 call _cond_test(286172 call > size[286157] 0))
                        { unknown localStart[286177](286179 call localOffsets[286076] bin[286337])(286182 'end of statement') unknown localEnd[286184](286186 call -(286188 call + localStart[286177] size[286157]) 1)(286193 'end of statement') unknown globalStart[286195](286221 IfExpr (286197 call >(286199 call +(286201 call * bin[286337] nTasks[284409]) tid[286386]) 0) then
                          { scopeless(286208 call globalEnds[286046](286210 call -(286212 call +(286214 call * bin[286337] nTasks[284409]) tid[286386]) 1))
                          } else
                          { scopeless taskStart[284329]
                          } )(286223 'end of statement') unknown globalEnd[286225](286227 call -(286229 call globalEnds[286046](286231 call +(286233 call * bin[286337] nTasks[284409]) tid[286386])) 1)(286239 'end of statement')
                          if(286241 call _cond_test debug[279240])
                          {(286245 call writeln "bin " bin[286337] " tid " tid[286386] " range "(286252 call chpl_build_bounded_range taskStart[284329] taskEnd[284346]) " A[" globalStart[286195] ".." globalEnd[286225] "] = Scratch[" localStart[286177] ".." localEnd[286184] "]")(286265 call assert(286267 call ==(286269 call globalCounts[286033](286271 call +(286273 call * bin[286337] nTasks[284409]) tid[286386]))(286286 call(286278 call .(286283 call(286280 call . state[284096] c"perLocale") 0) c"globalCounts")(286288 call +(286290 call * bin[286337] nTasks[284409]) tid[286386]))))(286295 call assert(286297 call ==(286299 call globalEnds[286046](286301 call +(286303 call * bin[286337] nTasks[284409]) tid[286386]))(286316 call(286308 call .(286313 call(286310 call . state[284096] c"perLocale") 0) c"globalEnds")(286318 call +(286320 call * bin[286337] nTasks[284409]) tid[286386]))))
                          }(286329 call shallowCopy module=[255] ShallowCopy[277402] A[284086] globalStart[286195] Scratch[284092] localStart[286177] size[286157])(364658 'referenced modules list' ShallowCopy[277402])
                        }
                      }
                    }
                  }(286348 call _downEndCount _coforallCount[286346] nil[44])(286028 'coforall on block' 0 tmp[286020])(286016 'actuals list' tiMarkRef[294] state[284096])
                } label _continueLabel[286358] _indexOfInterest[286353] _iterator[286354]
              } label _breakLabel[286359]
              Defer
              {
                {(286412 call _endCountFree _coforallCount[286346])
                }
              }(286417 call _waitEndCount _coforallCount[286346] 0 numTasks[286347])
            }
            { const _coforallCount[286429] "const" "end count" "temp"(286499 'move' _coforallCount[286429](286496 call _endCountAlloc 0)) unknown _indexOfInterest[286436] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286437] "expr temp" "temp"(286446 'move' _iterator[286437](286444 call _getIteratorZip tmpIter[286011]))
              Defer
              {
                {(286476 call _freeIterator _iterator[286437])
                }
              }
              { scopeless type(286451 'move' _indexOfInterest[286436](286448 call iteratorIndex _iterator[286437]))
              }
              ForLoop[286438]
              {(286456 call _check_tuple_var_decl _indexOfInterest[286436] 2) unknown loc[286462] "coforall index var" "index var" "insert auto destroy"(286464 'move' loc[286462](286460 call _indexOfInterest[286436] 0)) unknown tid[286469] "coforall index var" "index var" "insert auto destroy"(286471 'move' tid[286469](286467 call _indexOfInterest[286436] 1))(286483 call _upEndCount _coforallCount[286429] 0) const tmp[286001] "const" "temp"(286003 'move' tmp[286001](285999 'deref'(285998 '_wide_get_locale' loc[286462])))
                {
                  { const globalCounts[285571] "const" "ref var"(285568 call .(285567 call(285562 call . state[284096] c"perLocale") tid[286469]) c"globalCounts")(285574 'end of statement') const globalEnds[285586] "const" "ref var"(285583 call .(285582 call(285577 call . state[284096] c"perLocale") tid[286469]) c"globalEnds")(285589 'end of statement') const localSubdomain[285605] "const"(285604 call(285595 call(285591 call . A[284086] c"localSubdomain"))(285601 call chpl_build_bounded_range(285597 call . task[284320] c"start") taskEnd[284346]))(285608 'end of statement') unknown localOffsets[285622] "ref var"(285619 call .(285616 call .(285615 call(285610 call . state[284096] c"perLocale") tid[286469]) c"compat") c"counts")(285625 'end of statement')
                    { unknown offset[285630](285627 call . localSubdomain[285605] c"low")(285633 'end of statement')
                      { unknown _indexOfInterest[285665] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[285666] "expr temp" "temp"(285675 'move' _iterator[285666](285673 call _getIterator(285682 call chpl_direct_counted_range_iter 0 nBuckets[284401])))
                        Defer
                        {
                          {(285698 call _freeIterator _iterator[285666])
                          }
                        }
                        { scopeless type(285687 'move' _indexOfInterest[285665](285684 call iteratorIndex _iterator[285666]))
                        }
                        ForLoop[285667]
                        { unknown bin[285691] "index var" "insert auto destroy"(285693 'move' bin[285691] _indexOfInterest[285665])
                          {(285647 call =(285645 call localOffsets[285622] bin[285691]) offset[285630])(285662 call += offset[285630](285661 call globalCounts[285571](285658 call +(285655 call * bin[285691] nTasks[284409]) tid[286469])))
                          } label _continueLabel[285670] _indexOfInterest[285665] _iterator[285666]
                        } label _breakLabel[285671]
                      }
                    }
                    Forall {
                      induction variables:
                        unknown bin[285994] "index var" "insert auto destroy"
                      iterated expressions:
                        (285710 call #(285707 call chpl_build_low_bounded_range 0) nBuckets[284401])
                      shadow variables:
                      other variables
                        forall body
                      { unknown size[285722](285721 call globalCounts[285571](285718 call +(285715 call * bin[285994] nTasks[284409]) tid[286469]))(285725 'end of statement')
                        if(285989 call _cond_test(285729 call > size[285722] 0))
                        { unknown localStart[285735](285734 call localOffsets[285622] bin[285994])(285738 'end of statement') unknown localEnd[285747](285745 call -(285742 call + localStart[285735] size[285722]) 1)(285750 'end of statement') unknown globalStart[285778](285775 IfExpr (285759 call >(285756 call +(285753 call * bin[285994] nTasks[284409]) tid[286469]) 0) then
                          { scopeless(285773 call globalEnds[285586](285770 call -(285767 call +(285764 call * bin[285994] nTasks[284409]) tid[286469]) 1))
                          } else
                          { scopeless taskStart[284329]
                          } )(285781 'end of statement') unknown globalEnd[285795](285793 call -(285791 call globalEnds[285586](285788 call +(285785 call * bin[285994] nTasks[284409]) tid[286469])) 1)(285798 'end of statement')
                          if(285973 call _cond_test debug[279240])
                          {(285900 call writeln "bin " bin[285994] " tid " tid[286469] " range "(285857 call chpl_build_bounded_range taskStart[284329] taskEnd[284346]) " A[" globalStart[285778] ".." globalEnd[285795] "] = Scratch[" localStart[285735] ".." localEnd[285747] "]")(285936 call assert(285933 call ==(285913 call globalCounts[285571](285910 call +(285907 call * bin[285994] nTasks[284409]) tid[286469]))(285932 call(285921 call .(285920 call(285915 call . state[284096] c"perLocale") 0) c"globalCounts")(285929 call +(285926 call * bin[285994] nTasks[284409]) tid[286469]))))(285971 call assert(285968 call ==(285948 call globalEnds[285586](285945 call +(285942 call * bin[285994] nTasks[284409]) tid[286469]))(285967 call(285956 call .(285955 call(285950 call . state[284096] c"perLocale") 0) c"globalEnds")(285964 call +(285961 call * bin[285994] nTasks[284409]) tid[286469]))))
                          }(285987 call shallowCopy module=[255] ShallowCopy[277402] A[284086] globalStart[285778] Scratch[284092] localStart[285735] size[285722])(364644 'referenced modules list' ShallowCopy[277402])
                        }
                      }
                    }
                  }(286431 call _downEndCount _coforallCount[286429] nil[44])(286006 'coforall on block' 0 tmp[286001])(285557 'actuals list' tiMarkRef[294] state[284096])
                } label _continueLabel[286441] _indexOfInterest[286436] _iterator[286437]
              } label _breakLabel[286442]
              Defer
              {
                {(286487 call _endCountFree _coforallCount[286429])
                }
              }(286492 call _waitEndCount _coforallCount[286429] 0)
            }
          }
          if(286554 call _cond_test debug[279240])
          {(286551 call writef "after distribute, A is %xt\n"(286550 call A[284086](286547 call chpl_build_bounded_range(286543 call . task[284320] c"start") taskEnd[284346])))
          }
          { unknown _indexOfInterest[286890] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286891] "expr temp" "temp"(286900 'move' _iterator[286891](286898 call _getIterator(286576 call(286572 call .(286569 call .(286566 call .(286565 call(286560 call . state[284096] c"perLocale") 0) c"compat") c"bucketizer") c"getBinsToRecursivelySort"))))
            Defer
            {
              {(286917 call _freeIterator _iterator[286891])
              }
            }
            { scopeless type(286906 'move' _indexOfInterest[286890](286903 call iteratorIndex _iterator[286891]))
            }
            ForLoop[286892]
            { unknown bin[286910] "index var" "insert auto destroy"(286912 'move' bin[286910] _indexOfInterest[286890])
              { const binStart[286610] "const"(286607 IfExpr (286582 call >(286579 call * bin[286910] nTasks[284409]) 0) then
                { scopeless(286602 call(286591 call .(286590 call(286585 call . state[284096] c"perLocale") 0) c"globalEnds")(286599 call -(286596 call * bin[286910] nTasks[284409]) 1))
                } else
                { scopeless(286604 call . task[284320] c"start")
                } )(286613 'end of statement') const binEnd[286640] "const"(286638 call -(286636 call(286622 call .(286621 call(286616 call . state[284096] c"perLocale") 0) c"globalEnds")(286633 call -(286630 call +(286627 call * bin[286910] nTasks[284409]) nTasks[284409]) 1)) 1)(286643 'end of statement') const binSize[286651] "const"(286649 call +(286646 call - binEnd[286640] binStart[286610]) 1)(286654 'end of statement') const binStartBit[286677] "const"(286676 call(286668 call .(286665 call .(286662 call .(286661 call(286656 call . state[284096] c"perLocale") 0) c"compat") c"bucketizer") c"getNextStartBit")(286672 call . task[284320] c"startbit"))(286680 'end of statement')
                if(286886 call _cond_test(286683 call > binSize[286651] 1))
                { unknown isOnOneLocale[286686] 0(286689 'end of statement') unknown theLocaleId[286694](286692 call - 1)(286697 'end of statement')
                  { unknown _indexOfInterest[286773] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286774] "expr temp" "temp"(286796 'move' _iterator[286774](286713 call _build_tuple(286787 call _getIterator(286786 call(286783 call . A[284086] c"targetLocales")))(286793 call _getIterator(286791 call chpl_build_low_bounded_range 0))))
                    Defer
                    {
                      {(286826 call _freeIterator _iterator[286774])
                      }
                    }
                    { scopeless type(286801 'move' _indexOfInterest[286773](286798 call iteratorIndex _iterator[286774]))
                    }
                    ForLoop[286775]
                    {(286806 call _check_tuple_var_decl _indexOfInterest[286773] 2) unknown loc[286812] "index var" "insert auto destroy"(286814 'move' loc[286812](286810 call _indexOfInterest[286773] 0)) unknown tid[286819] "index var" "insert auto destroy"(286821 'move' tid[286819](286817 call _indexOfInterest[286773] 1))
                      { const localSubdomain[286730] "const"(286729 call(286720 call(286715 call . A[284086] c"localSubdomain") loc[286812])(286726 call chpl_build_bounded_range(286722 call . task[284320] c"start") taskEnd[284346]))(286733 'end of statement') const curDomain[286742] "const"(286740 call chpl__buildDomainExpr(286737 call chpl_build_bounded_range binStart[286610] binEnd[286640]))(286745 'end of statement') const intersect[286750] "const"(286749 call curDomain[286742] localSubdomain[286730])(286753 'end of statement')
                        if(286769 call _cond_test(286756 call == curDomain[286742] intersect[286750]))
                        {(286760 call = isOnOneLocale[286686] 1)(286766 call = theLocaleId[286694] tid[286819])
                        }
                      } label _continueLabel[286778] _indexOfInterest[286773] _iterator[286774]
                    } label _breakLabel[286779]
                  }
                  if(286882 call _cond_test isOnOneLocale[286686])
                  {(286859 call(286846 call .(286843 call .(286842 call(286837 call . state[284096] c"localTasks") theLocaleId[286694]) c"localTasks") c"append")(286849 'new'(286857 call TwoArraySortTask[279360] binStart[286610] binSize[286651] binStartBit[286677] 1 1)))
                  }
                  {(286879 call(286866 call .(286863 call . state[284096] c"distTasks") c"append")(286869 'new'(286877 call TwoArraySortTask[279360] binStart[286610] binSize[286651] binStartBit[286677] 1 1)))
                  }
                }
              } label _continueLabel[286895] _indexOfInterest[286890] _iterator[286891]
            } label _breakLabel[286896]
          }
        } label _continueLabel[286927](286944 'move' tmp[286924](286933 call _cond_test(286935 call !(286943 call(286937 call .(286939 call . state[284096] c"distTasks") c"isEmpty"))))) tmp[286924]
      } label _breakLabel[286928]
    }
    { unknown tmpIter[287223] "expr temp" "maybe ref" "no copy" "temp"(287226 'move' tmpIter[287223](286978 call _build_tuple(286973 call(286969 call . A[284086] c"targetLocales"))(286976 call chpl_build_low_bounded_range 0))) unknown isRngDomArr[287585] "maybe param" "temp"(287600 'move' isRngDomArr[287585](287598 call ||(287587 call isBoundedRange tmpIter[287223])(287596 call ||(287590 call isDomain tmpIter[287223])(287593 call isArray tmpIter[287223]))))
      if isRngDomArr[287585]
      { const _coforallCount[287429] "const" "end count" "temp"(287508 'move' _coforallCount[287429](287505 call _endCountAlloc 0)) unknown numTasks[287430] "temp"(287492 'move' numTasks[287430](287488 call . tmpIter[287223] c"size"))(287483 call _upEndCount _coforallCount[287429] 0 numTasks[287430]) unknown _indexOfInterest[287436] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[287437] "expr temp" "temp"(287446 'move' _iterator[287437](287444 call _getIteratorZip tmpIter[287223]))
        Defer
        {
          {(287476 call _freeIterator _iterator[287437])
          }
        }
        { scopeless type(287451 'move' _indexOfInterest[287436](287448 call iteratorIndex _iterator[287437]))
        }
        ForLoop[287438]
        {(287456 call _check_tuple_var_decl _indexOfInterest[287436] 2) unknown loc[287462] "coforall index var" "index var" "insert auto destroy"(287464 'move' loc[287462](287460 call _indexOfInterest[287436] 0)) unknown tid[287469] "coforall index var" "index var" "insert auto destroy"(287471 'move' tid[287469](287467 call _indexOfInterest[287436] 1)) const tmp[287232] "const" "temp"(287234 'move' tmp[287232](287236 'deref'(287237 '_wide_get_locale' loc[287462])))
          {
            { unknown myTasks[287245](287247 call .(287252 call(287249 call . state[284096] c"localTasks") tid[287469]) c"localTasks")(287256 'end of statement') unknown baseCaseSize[287258](287260 call . state[284096] c"baseCaseSize")(287264 'end of statement') unknown compat[287266] "ref var"(287268 call .(287273 call(287270 call . state[284096] c"perLocale") tid[287469]) c"compat")(287277 'end of statement')
              { unknown _indexOfInterest[287279] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[287281] "expr temp" "temp"(287283 'move' _iterator[287281](287286 call _getIterator myTasks[287245]))
                Defer
                {
                  {(287290 call _freeIterator _iterator[287281])
                  }
                }
                { scopeless type(287294 'move' _indexOfInterest[287279](287297 call iteratorIndex _iterator[287281]))
                }
                ForLoop[287299]
                { unknown task[287302] "index var" "insert auto destroy"(287304 'move' task[287302] _indexOfInterest[287279])
                  { const taskEnd[287309] "const"(287311 call -(287313 call +(287315 call . task[287302] c"start")(287319 call . task[287302] c"size")) 1)(287324 'end of statement') const curDomain[287326] "const"(287328 call chpl__buildDomainExpr(287330 call chpl_build_bounded_range(287332 call . task[287302] c"start") taskEnd[287309]))(287337 'end of statement')
                    if(287339 call _cond_test(287341 call > n[284261] baseCaseSize[287258]))
                    {(287352 call(287346 call .(287348 call . compat[287266] c"bigTasks") c"clear"))(287360 call(287354 call .(287356 call . compat[287266] c"smallTasks") c"clear"))(287362 call partitioningSortWithScratchSpace(287364 call . task[287302] c"start") taskEnd[287309](287372 call(287369 call . A[284086] c"localSlice") curDomain[287326])(287378 call(287375 call . Scratch[284092] c"localSlice") curDomain[287326]) compat[287266] criterion[284099](287383 call . task[287302] c"startbit"))
                    }
                    {(287391 call shellSort module=[255] ShellSort[273541](287396 call(287393 call . A[284086] c"localSlice") curDomain[287326]) criterion[284099](start =(287400 call . task[287302] c"start"))(end = taskEnd[287309]))(364712 'referenced modules list' ShellSort[273541])
                    }
                    if(287408 call _cond_test debug[279240])
                    {(287412 call writef "after recursive sorts, dst is %xt\n"(287415 call A[284086](287417 call chpl_build_bounded_range(287419 call . task[287302] c"start") taskEnd[287309])))
                    }
                  } label _continueLabel[287424] _indexOfInterest[287279] _iterator[287281]
                } label _breakLabel[287426]
              }
            }(287431 call _downEndCount _coforallCount[287429] nil[44])(287240 'coforall on block' 0 tmp[287232])(287228 'actuals list' tiMarkRef[294] state[284096])
          } label _continueLabel[287441] _indexOfInterest[287436] _iterator[287437]
        } label _breakLabel[287442]
        Defer
        {
          {(287495 call _endCountFree _coforallCount[287429])
          }
        }(287500 call _waitEndCount _coforallCount[287429] 0 numTasks[287430])
      }
      { const _coforallCount[287512] "const" "end count" "temp"(287582 'move' _coforallCount[287512](287579 call _endCountAlloc 0)) unknown _indexOfInterest[287519] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[287520] "expr temp" "temp"(287529 'move' _iterator[287520](287527 call _getIteratorZip tmpIter[287223]))
        Defer
        {
          {(287559 call _freeIterator _iterator[287520])
          }
        }
        { scopeless type(287534 'move' _indexOfInterest[287519](287531 call iteratorIndex _iterator[287520]))
        }
        ForLoop[287521]
        {(287539 call _check_tuple_var_decl _indexOfInterest[287519] 2) unknown loc[287545] "coforall index var" "index var" "insert auto destroy"(287547 'move' loc[287545](287543 call _indexOfInterest[287519] 0)) unknown tid[287552] "coforall index var" "index var" "insert auto destroy"(287554 'move' tid[287552](287550 call _indexOfInterest[287519] 1))(287566 call _upEndCount _coforallCount[287512] 0) const tmp[287213] "const" "temp"(287215 'move' tmp[287213](287211 'deref'(287210 '_wide_get_locale' loc[287545])))
          {
            { unknown myTasks[286998](286995 call .(286994 call(286989 call . state[284096] c"localTasks") tid[287552]) c"localTasks")(287001 'end of statement') unknown baseCaseSize[287007](287004 call . state[284096] c"baseCaseSize")(287010 'end of statement') unknown compat[287021] "ref var"(287018 call .(287017 call(287012 call . state[284096] c"perLocale") tid[287552]) c"compat")(287024 'end of statement')
              { unknown _indexOfInterest[287177] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[287178] "expr temp" "temp"(287187 'move' _iterator[287178](287185 call _getIterator myTasks[286998]))
                Defer
                {
                  {(287203 call _freeIterator _iterator[287178])
                  }
                }
                { scopeless type(287192 'move' _indexOfInterest[287177](287189 call iteratorIndex _iterator[287178]))
                }
                ForLoop[287179]
                { unknown task[287196] "index var" "insert auto destroy"(287198 'move' task[287196] _indexOfInterest[287177])
                  { const taskEnd[287040] "const"(287038 call -(287035 call +(287028 call . task[287196] c"start")(287032 call . task[287196] c"size")) 1)(287043 'end of statement') const curDomain[287055] "const"(287053 call chpl__buildDomainExpr(287050 call chpl_build_bounded_range(287046 call . task[287196] c"start") taskEnd[287040]))(287058 'end of statement')
                    if(287136 call _cond_test(287061 call > n[284261] baseCaseSize[287007]))
                    {(287071 call(287067 call .(287064 call . compat[287021] c"bigTasks") c"clear"))(287082 call(287078 call .(287075 call . compat[287021] c"smallTasks") c"clear"))(287111 call partitioningSortWithScratchSpace(287086 call . task[287196] c"start") taskEnd[287040](287097 call(287092 call . A[284086] c"localSlice") curDomain[287055])(287104 call(287099 call . Scratch[284092] c"localSlice") curDomain[287055]) compat[287021] criterion[284099](287108 call . task[287196] c"startbit"))
                    }
                    {(287133 call shellSort module=[255] ShellSort[273541](287123 call(287118 call . A[284086] c"localSlice") curDomain[287055]) criterion[284099](start =(287127 call . task[287196] c"start"))(end = taskEnd[287040]))(364691 'referenced modules list' ShellSort[273541])
                    }
                    if(287173 call _cond_test debug[279240])
                    {(287170 call writef "after recursive sorts, dst is %xt\n"(287169 call A[284086](287166 call chpl_build_bounded_range(287162 call . task[287196] c"start") taskEnd[287040])))
                    }
                  } label _continueLabel[287182] _indexOfInterest[287177] _iterator[287178]
                } label _breakLabel[287183]
              }
            }(287514 call _downEndCount _coforallCount[287512] nil[44])(287218 'coforall on block' 0 tmp[287213])(286984 'actuals list' tiMarkRef[294] state[284096])
          } label _continueLabel[287524] _indexOfInterest[287519] _iterator[287520]
        } label _breakLabel[287525]
        Defer
        {
          {(287570 call _endCountFree _coforallCount[287512])
          }
        }(287575 call _waitEndCount _coforallCount[287512] 0)
      }
    }
  }
  { scopeless type void[4]
  }(355420 'used modules list'(353084 'use' ChapelStandard[20267])(279217 'use' BlockDist[331335])(279226 'use' MSBRadixSort[288014])(279230 'use' List[298243] 'only' list)(279237 'import' Sort[267987].{ShellSort, RadixSortHelp, SampleSortHelp, ShallowCopy}))
}