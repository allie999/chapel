AST dump for TwoArrayPartitioning after pass scopeResolve.
Module use list: ChapelStandard BlockDist MSBRadixSort List Sort ShallowCopy SampleSortHelp RadixSortHelp ShellSort 

{ unknown debug[279309] "param" "private" 0(279312 'end of statement') unknown maxBuckets[279316] "param" 512(279319 'end of statement') function TwoArraySortTask[279429].init[279348](arg _mt[279433]:_MT[238], arg this[279431]:TwoArraySortTask[279429]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  } function TwoArraySortTask[279429].init[279359](arg _mt[279437]:_MT[238], arg this[279435]:TwoArraySortTask[279429], arg start[279356] : int(64)[13], arg size[279362] : int(64)[13], arg startbit[279366] : int(64)[13], arg inA[279370] : bool[10], arg doSort[279374] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(279384 call =(279380 call . this[279435] c"start") start[279356])(279393 call =(279389 call . this[279435] c"size") size[279362])(279403 call =(279399 call . this[279435] c"startbit") startbit[279366])(279413 call =(279409 call . this[279435] c"inA") inA[279370])(279423 call =(279419 call . this[279435] c"doSort") doSort[279374])
  } type TwoArraySortTask[279429] unknown start[279322] int(64)[13] unknown size[279327] int(64)[13] unknown startbit[279332] int(64)[13] unknown inA[279337] bool[10] unknown doSort[279342] bool[10] type TwoArrayBucketizerPerTaskState[279458] unknown localCounts[279453](279451 call chpl__buildArrayRuntimeType(279449 call chpl__ensureDomainExpr(279445 call #(279442 call chpl_build_low_bounded_range 0) maxBuckets[279316])) int(64)[13]) type TwoArrayBucketizerSharedState[279628](?) unknown nTasks[279475](279472 IfExpr (279465 call > dataParTasksPerLocale[93284] 0) then
  { scopeless dataParTasksPerLocale[93284]
  } else
  { scopeless(279469 call .(364435 call here[90438]) c"maxTaskPar")
  } ) int(64)[13] unknown countsSize[279484](279482 call * nTasks[279475] maxBuckets[279316]) int(64)[13] unknown bucketizer[279488] unknown globalCounts[279504](279502 call chpl__buildArrayRuntimeType(279500 call chpl__ensureDomainExpr(279496 call #(279493 call chpl_build_low_bounded_range 0) countsSize[279484])) int(64)[13]) unknown globalEnds[279520](279518 call chpl__buildArrayRuntimeType(279516 call chpl__ensureDomainExpr(279512 call #(279509 call chpl_build_low_bounded_range 0) countsSize[279484])) int(64)[13]) unknown localState[279536](279534 call chpl__buildArrayRuntimeType(279532 call chpl__ensureDomainExpr(279528 call #(279525 call chpl_build_low_bounded_range 0) nTasks[279475])) TwoArrayBucketizerPerTaskState[279458]) unknown counts[279552](279550 call chpl__buildArrayRuntimeType(279548 call chpl__ensureDomainExpr(279544 call #(279541 call chpl_build_low_bounded_range 0) maxBuckets[279316])) int(64)[13]) unknown ends[279568](279566 call chpl__buildArrayRuntimeType(279564 call chpl__ensureDomainExpr(279560 call #(279557 call chpl_build_low_bounded_range 0) maxBuckets[279316])) int(64)[13]) unknown outputInA[279584](279582 call chpl__buildArrayRuntimeType(279580 call chpl__ensureDomainExpr(279576 call #(279573 call chpl_build_low_bounded_range 0) maxBuckets[279316])) bool[10]) unknown bigTasks[279592](279591 call list[304289](?) TwoArraySortTask[279429]) unknown smallTasks[279600](279599 call list[304289](?) TwoArraySortTask[279429]) unknown baseCaseSize[279606] 16 int(64)[13] unknown sequentialSizePerTask[279614] 4096 int(64)[13] unknown endbit[279623](279622 call max int(64)[13]) int(64)[13] type TwoArrayDistributedBucketizerStatePerLocale[279685](?) unknown bucketizerType[279632] "type variable" unknown compat[279639](279638 call TwoArrayBucketizerSharedState[279628](?) bucketizerType[279632]) unknown countsSize[279648](279646 call * numLocales[209892] maxBuckets[279316]) int(64)[13] unknown globalCounts[279664](279662 call chpl__buildArrayRuntimeType(279660 call chpl__ensureDomainExpr(279656 call #(279653 call chpl_build_low_bounded_range 0) countsSize[279648])) int(64)[13]) unknown globalEnds[279680](279678 call chpl__buildArrayRuntimeType(279676 call chpl__ensureDomainExpr(279672 call #(279669 call chpl_build_low_bounded_range 0) countsSize[279648])) int(64)[13]) type TasksForLocale[279698] unknown localTasks[279693](279692 call list[304289](?) TwoArraySortTask[279429]) function TwoArrayDistributedBucketizerSharedState[279910](?).postinit[279808](arg _mt[279914]:_MT[238], arg this[279912]:TwoArrayDistributedBucketizerSharedState[279910](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[279873] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[279874] "expr temp" "temp"(279883 'move' _iterator[279874](279881 call _getIterator(402987 call . this[279912] c"perLocale")))
      Defer
      {
        {(279899 call _freeIterator _iterator[279874])
        }
      }
      { scopeless type(279888 'move' _indexOfInterest[279873](279885 call iteratorIndex _iterator[279874]))
      }
      ForLoop[279875]
      { unknown p[279892] "index var" "insert auto destroy"(279894 'move' p[279892] _indexOfInterest[279873])
        {(279824 call =(279820 call .(279815 call . p[279892] c"compat") c"baseCaseSize")(402992 call . this[279912] c"baseCaseSize"))(279838 call =(279834 call .(279829 call . p[279892] c"compat") c"endbit")(402997 call . this[279912] c"endbit"))(279855 call assert(279852 call >(279848 call .(279843 call . p[279892] c"compat") c"nTasks") 0))(279871 call assert(279868 call >(279864 call .(279859 call . p[279892] c"compat") c"countsSize") 0))
        } label _continueLabel[279878] _indexOfInterest[279873] _iterator[279874]
      } label _breakLabel[279879]
    }
  } type TwoArrayDistributedBucketizerSharedState[279910](?) unknown bucketizerType[279702] "type variable" unknown numLocales[279706] int(64)[13] unknown perLocale[279723](279722 call newBlockArr(279715 call #(279712 call chpl_build_low_bounded_range 0) numLocales[279706])(279721 call TwoArrayDistributedBucketizerStatePerLocale[279685](?) bucketizerType[279702])) const baseCaseSize[279728] "const" int(64)[13] const endbit[279737] "const"(279736 call max int(64)[13]) int(64)[13] const countsSize[279746] "const"(279744 call * numLocales[279706] maxBuckets[279316]) int(64)[13] unknown globalCounts[279762](279760 call chpl__buildArrayRuntimeType(279758 call chpl__ensureDomainExpr(279754 call #(279751 call chpl_build_low_bounded_range 0) countsSize[279746])) int(64)[13]) unknown globalEnds[279778](279776 call chpl__buildArrayRuntimeType(279774 call chpl__ensureDomainExpr(279770 call #(279767 call chpl_build_low_bounded_range 0) countsSize[279746])) int(64)[13]) unknown distTasks[279786](279785 call list[304289](?) TwoArraySortTask[279429]) unknown localTasks[279802](279800 call chpl__buildArrayRuntimeType(279798 call chpl__ensureDomainExpr(279794 call #(279791 call chpl_build_low_bounded_range 0) numLocales[279706])) TasksForLocale[279698]) function bucketize[279923](arg start_n[279920] : int(64)[13], arg end_n[279926] : int(64)[13], arg dst[279932] :(279929 call chpl__buildArrayRuntimeType nil[44]), arg src[279938] :(279935 call chpl__buildArrayRuntimeType nil[44]), ref arg state[279942] : TwoArrayBucketizerSharedState[279628](?), arg criterion[279945]:_any[178](?), arg startbit[279948] : int(64)[13]) : _unknown[51] "no return value for void"
  {
    if(279995 call _cond_test debug[279309])
    {(279993 call writeln "bucketize "(279973 call chpl_build_bounded_range start_n[279920] end_n[279926]) " startbit=" startbit[279948])
    } const nBuckets[280012] "const"(280011 call(280007 call .(280004 call . state[279942] c"bucketizer") c"getNumBuckets"))(280015 'end of statement') const n[280023] "const"(280021 call +(280018 call - end_n[279926] start_n[279920]) 1)(280026 'end of statement') const nTasks[280042] "const"(280039 IfExpr (280032 call >= n[280023](280029 call . state[279942] c"nTasks")) then
    { scopeless(280035 call . state[279942] c"nTasks")
    } else
    { scopeless 1
    } )(280045 'end of statement')(280052 call assert(280049 call > nTasks[280042] 0))
    if(280071 call _cond_test(280056 call == n[280023] 0))
    {(280065 call =(280061 call . state[279942] c"counts") 0)(280069 return _void[55])
    } const countsSize[280079] "const"(280077 call * nTasks[280042] nBuckets[280012])(280082 'end of statement') const blockSize[280088] "const"(280087 call divceil n[280023] nTasks[280042])(280091 'end of statement') const nBlocks[280097] "const"(280096 call divceil n[280023] blockSize[280088])(280100 'end of statement')
    { unknown tmpIter[280419] "expr temp" "maybe ref" "no copy" "temp"(280422 'move' tmpIter[280419](280106 call #(280103 call chpl_build_low_bounded_range 0) nTasks[280042])) unknown isRngDomArr[280790] "maybe param" "temp"(280805 'move' isRngDomArr[280790](280803 call ||(280792 call isBoundedRange tmpIter[280419])(280801 call ||(280795 call isDomain tmpIter[280419])(280798 call isArray tmpIter[280419]))))
      if isRngDomArr[280790]
      { const _coforallCount[280657] "const" "end count" "temp"(280726 'move' _coforallCount[280657](280723 call _endCountAlloc 1)) unknown numTasks[280658] "temp"(280710 'move' numTasks[280658](280706 call . tmpIter[280419] c"size"))(280701 call _upEndCount _coforallCount[280657] 1 numTasks[280658])(280698 call chpl_resetTaskSpawn numTasks[280658]) unknown _indexOfInterest[280665] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280666] "expr temp" "temp"(280675 'move' _iterator[280666](280673 call _getIterator tmpIter[280419]))
        Defer
        {
          {(280691 call _freeIterator _iterator[280666])
          }
        }
        { scopeless type(280680 'move' _indexOfInterest[280665](280677 call iteratorIndex _iterator[280666]))
        }
        ForLoop[280667]
        { unknown tid[280684] "coforall index var" "index var" "insert auto destroy"(280686 'move' tid[280684] _indexOfInterest[280665])
          {
            { unknown start[280429](280431 call + start_n[279920](280434 call * tid[280684] blockSize[280088]))(280438 'end of statement') unknown end[280440](280442 call -(280444 call + start[280429] blockSize[280088]) 1)(280449 'end of statement')
              if(280451 call _cond_test(280453 call > end[280440] end_n[279926]))
              {(280458 call = end[280440] end_n[279926])
              }
              if(280463 call _cond_test debug[279309])
              {(280468 call writeln "tid " tid[280684] " considering "(280473 call chpl_build_bounded_range start[280429] end[280440]))
              } unknown counts[280478] "ref var"(280480 call .(280485 call(280482 call . state[279942] c"localState") tid[280684]) c"localCounts")(280489 'end of statement')
              { unknown _indexOfInterest[280491] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280493] "expr temp" "temp"(280495 'move' _iterator[280493](280498 call _getIterator(280500 call chpl_direct_counted_range_iter 0 nBuckets[280012])))
                Defer
                {
                  {(280505 call _freeIterator _iterator[280493])
                  }
                }
                { scopeless type(280509 'move' _indexOfInterest[280491](280512 call iteratorIndex _iterator[280493]))
                }
                ForLoop[280514]
                { unknown bin[280517] "index var" "insert auto destroy"(280519 'move' bin[280517] _indexOfInterest[280491])
                  {(280524 call =(280526 call counts[280478] bin[280517]) 0)
                  } label _continueLabel[280529] _indexOfInterest[280491] _iterator[280493]
                } label _breakLabel[280531]
              }
              { unknown _indexOfInterest[280534] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280536] "expr temp" "temp"(280538 'move' _iterator[280536](280541 call _getIterator(280549 call(280543 call .(280545 call . state[279942] c"bucketizer") c"classify") src[279938] start[280429] end[280440] criterion[279945] startbit[279948])))
                Defer
                {
                  {(280557 call _freeIterator _iterator[280536])
                  }
                }
                { scopeless type(280561 'move' _indexOfInterest[280534](280564 call iteratorIndex _iterator[280536]))
                }
                ForLoop[280566]
                {(280570 call _check_tuple_var_decl _indexOfInterest[280534] 2) unknown i[280573] "index var" "insert auto destroy"(280575 'move' i[280573](280578 call _indexOfInterest[280534] 0)) unknown bin[280580] "index var" "insert auto destroy"(280582 'move' bin[280580](280585 call _indexOfInterest[280534] 1))
                  {(280589 call +=(280591 call counts[280478] bin[280580]) 1)
                  } label _continueLabel[280594] _indexOfInterest[280534] _iterator[280536]
                } label _breakLabel[280596]
              }
              { unknown _indexOfInterest[280599] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280601] "expr temp" "temp"(280603 'move' _iterator[280601](280606 call _getIterator(280608 call vectorizeOnly(280610 call #(280612 call chpl_build_low_bounded_range 0) nBuckets[280012]))))
                Defer
                {
                  {(280617 call _freeIterator _iterator[280601])
                  }
                }
                { scopeless type(280621 'move' _indexOfInterest[280599](280624 call iteratorIndex _iterator[280601]))
                }
                ForLoop[280626]
                { unknown bin[280629] "index var" "insert auto destroy"(280631 'move' bin[280629] _indexOfInterest[280599])
                  {(280636 call =(280641 call(280638 call . state[279942] c"globalCounts")(280643 call +(280645 call * bin[280629] nTasks[280042]) tid[280684]))(280650 call counts[280478] bin[280629]))
                  } label _continueLabel[280652] _indexOfInterest[280599] _iterator[280601]
                } label _breakLabel[280654]
              }
            }(280660 call _downEndCount _coforallCount[280657] nil[44])(280659 'coforall loop')(280424 'actuals list' tiMarkRef[294] state[279942])
          } label _continueLabel[280670] _indexOfInterest[280665] _iterator[280666]
        } label _breakLabel[280671]
        Defer
        {
          {(280713 call _endCountFree _coforallCount[280657])
          }
        }(280718 call _waitEndCount _coforallCount[280657] 1 numTasks[280658])
      }
      { const _coforallCount[280730] "const" "end count" "temp"(280787 'move' _coforallCount[280730](280784 call _endCountAlloc 1)) unknown _indexOfInterest[280738] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280739] "expr temp" "temp"(280748 'move' _iterator[280739](280746 call _getIterator tmpIter[280419]))
        Defer
        {
          {(280764 call _freeIterator _iterator[280739])
          }
        }
        { scopeless type(280753 'move' _indexOfInterest[280738](280750 call iteratorIndex _iterator[280739]))
        }
        ForLoop[280740]
        { unknown tid[280757] "coforall index var" "index var" "insert auto destroy"(280759 'move' tid[280757] _indexOfInterest[280738])(280771 call _upEndCount _coforallCount[280730] 1)
          {
            { unknown start[280123](280121 call + start_n[279920](280119 call * tid[280757] blockSize[280088]))(280126 'end of statement') unknown end[280135](280133 call -(280130 call + start[280123] blockSize[280088]) 1)(280138 'end of statement')
              if(280149 call _cond_test(280141 call > end[280135] end_n[279926]))
              {(280145 call = end[280135] end_n[279926])
              }
              if(280197 call _cond_test debug[279309])
              {(280195 call writeln "tid " tid[280757] " considering "(280193 call chpl_build_bounded_range start[280123] end[280135]))
              } unknown counts[280216] "ref var"(280213 call .(280210 call(280205 call . state[279942] c"localState") tid[280757]) c"localCounts")(280219 'end of statement')
              { unknown _indexOfInterest[280236] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280237] "expr temp" "temp"(280246 'move' _iterator[280237](280244 call _getIterator(280253 call chpl_direct_counted_range_iter 0 nBuckets[280012])))
                Defer
                {
                  {(280269 call _freeIterator _iterator[280237])
                  }
                }
                { scopeless type(280258 'move' _indexOfInterest[280236](280255 call iteratorIndex _iterator[280237]))
                }
                ForLoop[280238]
                { unknown bin[280262] "index var" "insert auto destroy"(280264 'move' bin[280262] _indexOfInterest[280236])
                  {(280232 call =(280230 call counts[280216] bin[280262]) 0)
                  } label _continueLabel[280241] _indexOfInterest[280236] _iterator[280237]
                } label _breakLabel[280242]
              }
              { unknown _indexOfInterest[280304] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280305] "expr temp" "temp"(280314 'move' _iterator[280305](280312 call _getIterator(280294 call(280285 call .(280282 call . state[279942] c"bucketizer") c"classify") src[279938] start[280123] end[280135] criterion[279945] startbit[279948])))
                Defer
                {
                  {(280345 call _freeIterator _iterator[280305])
                  }
                }
                { scopeless type(280320 'move' _indexOfInterest[280304](280317 call iteratorIndex _iterator[280305]))
                }
                ForLoop[280306]
                {(280325 call _check_tuple_var_decl _indexOfInterest[280304] 2) unknown i[280331] "index var" "insert auto destroy"(280333 'move' i[280331](280329 call _indexOfInterest[280304] 0)) unknown bin[280338] "index var" "insert auto destroy"(280340 'move' bin[280338](280336 call _indexOfInterest[280304] 1))
                  {(280300 call +=(280298 call counts[280216] bin[280338]) 1)
                  } label _continueLabel[280309] _indexOfInterest[280304] _iterator[280305]
                } label _breakLabel[280310]
              }
              { unknown _indexOfInterest[280385] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280386] "expr temp" "temp"(280395 'move' _iterator[280386](280393 call _getIterator(280361 call vectorizeOnly(280358 call #(280355 call chpl_build_low_bounded_range 0) nBuckets[280012]))))
                Defer
                {
                  {(280412 call _freeIterator _iterator[280386])
                  }
                }
                { scopeless type(280401 'move' _indexOfInterest[280385](280398 call iteratorIndex _iterator[280386]))
                }
                ForLoop[280387]
                { unknown bin[280405] "index var" "insert auto destroy"(280407 'move' bin[280405] _indexOfInterest[280385])
                  {(280381 call =(280376 call(280365 call . state[279942] c"globalCounts")(280373 call +(280370 call * bin[280405] nTasks[280042]) tid[280757]))(280380 call counts[280216] bin[280405]))
                  } label _continueLabel[280390] _indexOfInterest[280385] _iterator[280386]
                } label _breakLabel[280391]
              }
            }(280733 call _downEndCount _coforallCount[280730] nil[44])(280732 'coforall loop')(280113 'actuals list' tiMarkRef[294] state[279942])
          } label _continueLabel[280743] _indexOfInterest[280738] _iterator[280739]
        } label _breakLabel[280744]
        Defer
        {
          {(280775 call _endCountFree _coforallCount[280730])
          }
        }(280780 call _waitEndCount _coforallCount[280730] 1)
      }
    } function chpl__scan4[280820](arg chpl_toScan[280822]:_any[178](?)) : _unknown[51] "compiler nested function" "ReduceScanOp" "fn returns iterator"
    { unknown chpl_eltType[280824] "maybe type" "temp"
      { scopeless type(280828 'move' chpl_eltType[280824](280830 'typeof'(280832 call chpl__initCopy(280834 call iteratorIndex(280836 call _getIterator chpl_toScan[280822])))))
      } const tmp[280825] "const" "temp"(280845 'move' tmp[280825](280844 'new'(280843 call SumReduceScanOp[376483](?)(eltType = chpl_eltType[280824])(_chpl_manager = unmanaged[220](?)))))(280847 return(280849 call chpl__scanIterator tmp[280825] chpl_toScan[280822]))
    }(280857 call =(280812 call . state[279942] c"globalEnds")(280855 call +(280853 call chpl__scan4(280817 call . state[279942] c"globalCounts")) start_n[279920]))
    if(281059 call _cond_test debug[279309])
    {
      { unknown _indexOfInterest[281018] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281019] "expr temp" "temp"(281028 'move' _iterator[281019](281026 call _getIterator(281035 call chpl_direct_counted_range_iter 0 nBuckets[280012])))
        Defer
        {
          {(281051 call _freeIterator _iterator[281019])
          }
        }
        { scopeless type(281040 'move' _indexOfInterest[281018](281037 call iteratorIndex _iterator[281019]))
        }
        ForLoop[281020]
        { unknown bin[281044] "index var" "insert auto destroy"(281046 'move' bin[281044] _indexOfInterest[281018])
          {
            { unknown _indexOfInterest[280977] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[280978] "expr temp" "temp"(280987 'move' _iterator[280978](280985 call _getIterator(280994 call chpl_direct_counted_range_iter 0 nTasks[280042])))
              Defer
              {
                {(281010 call _freeIterator _iterator[280978])
                }
              }
              { scopeless type(280999 'move' _indexOfInterest[280977](280996 call iteratorIndex _iterator[280978]))
              }
              ForLoop[280979]
              { unknown tid[281003] "index var" "insert auto destroy"(281005 'move' tid[281003] _indexOfInterest[280977])
                { unknown gb[280882](280880 call +(280877 call * bin[281044] nTasks[280042]) tid[281003])(280885 'end of statement')
                  if(280973 call _cond_test(280895 call !=(280893 call(280888 call . state[279942] c"globalCounts") gb[280882]) 0))
                  {(280970 call writeln "tid " tid[281003] " count[" bin[281044] "] = "(280942 call(280937 call . state[279942] c"globalCounts") gb[280882]) " end = "(280968 call -(280966 call(280961 call . state[279942] c"globalEnds") gb[280882]) 1))
                  }
                } label _continueLabel[280982] _indexOfInterest[280977] _iterator[280978]
              } label _breakLabel[280983]
            }
          } label _continueLabel[281023] _indexOfInterest[281018] _iterator[281019]
        } label _breakLabel[281024]
      }
    }
    { unknown tmpIter[281422] "expr temp" "maybe ref" "no copy" "temp"(281425 'move' tmpIter[281422](281068 call #(281065 call chpl_build_low_bounded_range 0) nTasks[280042])) unknown isRngDomArr[281805] "maybe param" "temp"(281820 'move' isRngDomArr[281805](281818 call ||(281807 call isBoundedRange tmpIter[281422])(281816 call ||(281810 call isDomain tmpIter[281422])(281813 call isArray tmpIter[281422]))))
      if isRngDomArr[281805]
      { const _coforallCount[281672] "const" "end count" "temp"(281741 'move' _coforallCount[281672](281738 call _endCountAlloc 1)) unknown numTasks[281673] "temp"(281725 'move' numTasks[281673](281721 call . tmpIter[281422] c"size"))(281716 call _upEndCount _coforallCount[281672] 1 numTasks[281673])(281713 call chpl_resetTaskSpawn numTasks[281673]) unknown _indexOfInterest[281680] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281681] "expr temp" "temp"(281690 'move' _iterator[281681](281688 call _getIterator tmpIter[281422]))
        Defer
        {
          {(281706 call _freeIterator _iterator[281681])
          }
        }
        { scopeless type(281695 'move' _indexOfInterest[281680](281692 call iteratorIndex _iterator[281681]))
        }
        ForLoop[281682]
        { unknown tid[281699] "coforall index var" "index var" "insert auto destroy"(281701 'move' tid[281699] _indexOfInterest[281680])
          {
            { unknown start[281432](281434 call + start_n[279920](281437 call * tid[281699] blockSize[280088]))(281441 'end of statement') unknown end[281443](281445 call -(281447 call + start[281432] blockSize[280088]) 1)(281452 'end of statement')
              if(281454 call _cond_test(281456 call > end[281443] end_n[279926]))
              {(281461 call = end[281443] end_n[279926])
              } unknown nextOffsets[281466] "ref var"(281468 call .(281473 call(281470 call . state[279942] c"localState") tid[281699]) c"localCounts")(281477 'end of statement')
              { unknown _indexOfInterest[281479] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281481] "expr temp" "temp"(281483 'move' _iterator[281481](281486 call _getIterator(281488 call chpl_direct_counted_range_iter 0 nBuckets[280012])))
                Defer
                {
                  {(281493 call _freeIterator _iterator[281481])
                  }
                }
                { scopeless type(281497 'move' _indexOfInterest[281479](281500 call iteratorIndex _iterator[281481]))
                }
                ForLoop[281502]
                { unknown bin[281505] "index var" "insert auto destroy"(281507 'move' bin[281505] _indexOfInterest[281479])
                  { unknown globalBin[281512](281514 call +(281516 call * bin[281505] nTasks[280042]) tid[281699])(281521 'end of statement')(281523 call =(281525 call nextOffsets[281466] bin[281505])(281543 IfExpr (281528 call > globalBin[281512] 0) then
                    { scopeless(281536 call(281533 call . state[279942] c"globalEnds")(281538 call - globalBin[281512] 1))
                    } else
                    { scopeless start_n[279920]
                    } ))
                    if(281545 call _cond_test debug[279309])
                    {
                      if(281549 call _cond_test(281551 call !=(281556 call(281553 call . state[279942] c"globalCounts") globalBin[281512]) 0))
                      {(281561 call writeln "tid " tid[281699] " nextOffsets[" bin[281505] "] = "(281568 call nextOffsets[281466] bin[281505]))
                      }
                    }
                  } label _continueLabel[281572] _indexOfInterest[281479] _iterator[281481]
                } label _breakLabel[281574]
              }
              { unknown _indexOfInterest[281577] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281579] "expr temp" "temp"(281581 'move' _iterator[281579](281584 call _getIterator(281592 call(281586 call .(281588 call . state[279942] c"bucketizer") c"classify") src[279938] start[281432] end[281443] criterion[279945] startbit[279948])))
                Defer
                {
                  {(281600 call _freeIterator _iterator[281579])
                  }
                }
                { scopeless type(281604 'move' _indexOfInterest[281577](281607 call iteratorIndex _iterator[281579]))
                }
                ForLoop[281609]
                {(281613 call _check_tuple_var_decl _indexOfInterest[281577] 2) unknown i[281616] "index var" "insert auto destroy"(281618 'move' i[281616](281621 call _indexOfInterest[281577] 0)) unknown bin[281623] "index var" "insert auto destroy"(281625 'move' bin[281623](281628 call _indexOfInterest[281577] 1))
                  { unknown next[281632] "ref var"(281634 call nextOffsets[281466] bin[281623])(281637 'end of statement')
                    if(281639 call _cond_test debug[279309])
                    {(281643 call writeln "tid " tid[281699] " dst[" next[281632] "] = src[" i[281616] "] bin " bin[281623])
                    }(281657 call shallowCopy module=[255] ShallowCopy[277471] dst[279932] next[281632] src[279938] i[281616] 1)(281664 call += next[281632] 1)(364471 'referenced modules list' ShallowCopy[277471])
                  } label _continueLabel[281667] _indexOfInterest[281577] _iterator[281579]
                } label _breakLabel[281669]
              }
            }(281675 call _downEndCount _coforallCount[281672] nil[44])(281674 'coforall loop')(281427 'actuals list' tiMarkRef[294] state[279942])
          } label _continueLabel[281685] _indexOfInterest[281680] _iterator[281681]
        } label _breakLabel[281686]
        Defer
        {
          {(281728 call _endCountFree _coforallCount[281672])
          }
        }(281733 call _waitEndCount _coforallCount[281672] 1 numTasks[281673])
      }
      { const _coforallCount[281745] "const" "end count" "temp"(281802 'move' _coforallCount[281745](281799 call _endCountAlloc 1)) unknown _indexOfInterest[281753] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281754] "expr temp" "temp"(281763 'move' _iterator[281754](281761 call _getIterator tmpIter[281422]))
        Defer
        {
          {(281779 call _freeIterator _iterator[281754])
          }
        }
        { scopeless type(281768 'move' _indexOfInterest[281753](281765 call iteratorIndex _iterator[281754]))
        }
        ForLoop[281755]
        { unknown tid[281772] "coforall index var" "index var" "insert auto destroy"(281774 'move' tid[281772] _indexOfInterest[281753])(281786 call _upEndCount _coforallCount[281745] 1)
          {
            { unknown start[281085](281083 call + start_n[279920](281081 call * tid[281772] blockSize[280088]))(281088 'end of statement') unknown end[281097](281095 call -(281092 call + start[281085] blockSize[280088]) 1)(281100 'end of statement')
              if(281111 call _cond_test(281103 call > end[281097] end_n[279926]))
              {(281107 call = end[281097] end_n[279926])
              } unknown nextOffsets[281125] "ref var"(281122 call .(281121 call(281116 call . state[279942] c"localState") tid[281772]) c"localCounts")(281128 'end of statement')
              { unknown _indexOfInterest[281223] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281224] "expr temp" "temp"(281233 'move' _iterator[281224](281231 call _getIterator(281240 call chpl_direct_counted_range_iter 0 nBuckets[280012])))
                Defer
                {
                  {(281256 call _freeIterator _iterator[281224])
                  }
                }
                { scopeless type(281245 'move' _indexOfInterest[281223](281242 call iteratorIndex _iterator[281224]))
                }
                ForLoop[281225]
                { unknown bin[281249] "index var" "insert auto destroy"(281251 'move' bin[281249] _indexOfInterest[281223])
                  { unknown globalBin[281143](281141 call +(281138 call * bin[281249] nTasks[280042]) tid[281772])(281146 'end of statement')(281170 call =(281151 call nextOffsets[281125] bin[281249])(281167 IfExpr (281154 call > globalBin[281143] 0) then
                    { scopeless(281165 call(281157 call . state[279942] c"globalEnds")(281162 call - globalBin[281143] 1))
                    } else
                    { scopeless start_n[279920]
                    } ))
                    if(281219 call _cond_test debug[279309])
                    {
                      if(281214 call _cond_test(281182 call !=(281180 call(281175 call . state[279942] c"globalCounts") globalBin[281143]) 0))
                      {(281211 call writeln "tid " tid[281772] " nextOffsets[" bin[281249] "] = "(281210 call nextOffsets[281125] bin[281249]))
                      }
                    }
                  } label _continueLabel[281228] _indexOfInterest[281223] _iterator[281224]
                } label _breakLabel[281229]
              }
              { unknown _indexOfInterest[281374] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281375] "expr temp" "temp"(281384 'move' _iterator[281375](281382 call _getIterator(281281 call(281272 call .(281269 call . state[279942] c"bucketizer") c"classify") src[279938] start[281085] end[281097] criterion[279945] startbit[279948])))
                Defer
                {
                  {(281415 call _freeIterator _iterator[281375])
                  }
                }
                { scopeless type(281390 'move' _indexOfInterest[281374](281387 call iteratorIndex _iterator[281375]))
                }
                ForLoop[281376]
                {(281395 call _check_tuple_var_decl _indexOfInterest[281374] 2) unknown i[281401] "index var" "insert auto destroy"(281403 'move' i[281401](281399 call _indexOfInterest[281374] 0)) unknown bin[281408] "index var" "insert auto destroy"(281410 'move' bin[281408](281406 call _indexOfInterest[281374] 1))
                  { unknown next[281286] "ref var"(281285 call nextOffsets[281125] bin[281408])(281289 'end of statement')
                    if(281353 call _cond_test debug[279309])
                    {(281350 call writeln "tid " tid[281772] " dst[" next[281286] "] = src[" i[281401] "] bin " bin[281408])
                    }(281367 call shallowCopy module=[255] ShallowCopy[277471] dst[279932] next[281286] src[279938] i[281401] 1)(281371 call += next[281286] 1)(364461 'referenced modules list' ShallowCopy[277471])
                  } label _continueLabel[281379] _indexOfInterest[281374] _iterator[281375]
                } label _breakLabel[281380]
              }
            }(281748 call _downEndCount _coforallCount[281745] nil[44])(281747 'coforall loop')(281075 'actuals list' tiMarkRef[294] state[279942])
          } label _continueLabel[281758] _indexOfInterest[281753] _iterator[281754]
        } label _breakLabel[281759]
        Defer
        {
          {(281790 call _endCountFree _coforallCount[281745])
          }
        }(281795 call _waitEndCount _coforallCount[281745] 1)
      }
    } unknown counts[281828] "ref var"(281825 call . state[279942] c"counts")(281831 'end of statement')
    Forall {
      induction variables:
        unknown bin[281919] "index var" "insert auto destroy"
      iterated expressions:
        (281837 call #(281834 call chpl_build_low_bounded_range 0) nBuckets[280012])
      shadow variables:
      other variables
        forall body
      { unknown total[281840] 0(281843 'end of statement')
        { unknown _indexOfInterest[281870] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[281871] "expr temp" "temp"(281880 'move' _iterator[281871](281878 call _getIterator(281887 call chpl_direct_counted_range_iter 0 nTasks[280042])))
          Defer
          {
            {(281903 call _freeIterator _iterator[281871])
            }
          }
          { scopeless type(281892 'move' _indexOfInterest[281870](281889 call iteratorIndex _iterator[281871]))
          }
          ForLoop[281872]
          { unknown tid[281896] "index var" "insert auto destroy"(281898 'move' tid[281896] _indexOfInterest[281870])
            {(281866 call += total[281840](281865 call(281854 call . state[279942] c"globalCounts")(281862 call +(281859 call * bin[281919] nTasks[280042]) tid[281896])))
            } label _continueLabel[281875] _indexOfInterest[281870] _iterator[281871]
          } label _breakLabel[281876]
        }(281915 call =(281913 call counts[281828] bin[281919]) total[281840])
      }
    }
  } function testBucketize[281931](arg start_n[281928] : int(64)[13], arg end_n[281934] : int(64)[13], arg dst[281940] :(281937 call chpl__buildArrayRuntimeType nil[44]), arg src[281946] :(281943 call chpl__buildArrayRuntimeType nil[44]), arg bucketizer[281949]:_any[178](?), arg criterion[281951]:_any[178](?), arg startbit[281954] : int(64)[13]) : _unknown[51]
  { unknown state[281963](281957 'new'(281962 call TwoArrayBucketizerSharedState[279628](?)(bucketizer = bucketizer[281949])))(281966 'end of statement')(281977 call bucketize start_n[281928] end_n[281934] dst[281940] src[281946] state[281963] criterion[281951] startbit[281954])(281983 return(281980 call . state[281963] c"counts"))
  } function partitioningSortWithScratchSpaceHandleSampling[281993](arg start_n[281990] : int(64)[13], arg end_n[281996] : int(64)[13], arg A[282002] :(281999 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[282008] :(282005 call chpl__buildArrayRuntimeType nil[44]), ref arg state[282012] : TwoArrayBucketizerSharedState[279628](?), arg criterion[282015]:_any[178](?), arg startbit[282018] : int(64)[13]) : _unknown[51] "private" "no return value for void"
  {
    if(282337 call _cond_test(355003 'is_subtype' SampleBucketizer[275616](?)(282027 'typeof'(282024 call . state[282012] c"bucketizer"))))
    { unknown n[282043](282041 call -(282038 call + 1 end_n[281996]) start_n[281990])(282046 'end of statement') unknown logNumBuckets[282057](282056 call computeLogBucketSize module=[255] SampleSortHelp[273986] n[282043])(282060 'end of statement') unknown numBuckets[282065](282063 call << 1 logNumBuckets[282057])(282068 'end of statement') unknown sampleStep[282079](282078 call chooseSampleStep module=[255] SampleSortHelp[273986] n[282043] logNumBuckets[282057])(282082 'end of statement') unknown sampleSize[282090](282088 call -(282085 call * sampleStep[282079] numBuckets[282065]) 1)(282093 'end of statement')
      if(282138 call _cond_test(282096 call >= sampleSize[282090] n[282043]))
      {
        if(282120 call _cond_test debug[279309])
        {(282118 call writeln "Reducing sample size because it was too big")
        }(282135 call = sampleSize[282090](282134 call max 1(282132 call / n[282043] 2)))
      }(282153 call putRandomSampleAtArrayStart module=[255] SampleSortHelp[273986] start_n[281990] end_n[281996] A[282002] sampleSize[282090])
      if(282177 call _cond_test debug[279309])
      {(282175 call writeln "recursing to sort the sample")
      }
      if(282232 call _cond_test(282187 call <= sampleSize[282090](282185 call * 1024 1024)))
      {(282211 call msbRadixSort start_n[281990](282197 call -(282194 call + start_n[281990] sampleSize[282090]) 1) A[282002] criterion[282015] startbit[282018](282203 call . state[282012] c"endbit")(settings =(282206 'new'(282209 call MSBRadixSortSettings[288136](?)))))
      }
      {(282229 call partitioningSortWithScratchSpace start_n[281990](282222 call -(282219 call + start_n[281990] sampleSize[282090]) 1) A[282002] Scratch[282008] state[282012] criterion[282015] startbit[282018])
      }
      if(282258 call _cond_test debug[279309])
      {(282255 call checkSorted module=[255] RadixSortHelp[276164] start_n[281990](282250 call -(282247 call + start_n[281990] sampleSize[282090]) 1) A[282002] criterion[282015] startbit[282018])(364502 'referenced modules list' RadixSortHelp[276164])
      }(282274 call createSplittersFromSample A[282002](282266 call . state[282012] c"bucketizer") criterion[282015] start_n[281990] sampleSize[282090] sampleStep[282079] numBuckets[282065])
      if(282333 call _cond_test debug[279309])
      {(282300 call writeln "sample bucketizer "(282297 call . state[282012] c"bucketizer"))(282331 call writef "A %i %i A=%xt\n" start_n[281990] end_n[281996](282330 call A[282002](282327 call chpl_build_bounded_range start_n[281990] end_n[281996])))
      }(364485 'referenced modules list' SampleSortHelp[273986] SampleSortHelp[273986] SampleSortHelp[273986])
    }(364481 'referenced modules list' SampleSortHelp[273986])
  }
  { scopeless type void[4]
  } function partitioningSortWithScratchSpace[282351](arg start_n[282348] : int(64)[13], arg end_n[282354] : int(64)[13], arg A[282360] :(282357 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[282366] :(282363 call chpl__buildArrayRuntimeType nil[44]), ref arg state[282370] : TwoArrayBucketizerSharedState[279628](?), arg criterion[282373]:_any[178](?), arg startbit[282376] : int(64)[13]) : _unknown[51] "no return value for void"
  {
    if(282389 call _cond_test(282385 call > startbit[282376](282382 call . state[282370] c"endbit")))
    {(282387 return _void[55])
    }
    if(282423 call _cond_test(282403 call <(282397 call - end_n[282354] start_n[282348])(282400 call . state[282370] c"baseCaseSize")))
    {(282418 call shellSort module=[255] ShellSort[273610] A[282360] criterion[282373](start = start_n[282348])(end = end_n[282354]))(282421 return _void[55])(364512 'referenced modules list' ShellSort[273610])
    }
    if(282468 call _cond_test debug[279309])
    {(282451 call writeln "partitioningSortWithScratchSpace(" start_n[282348] "," end_n[282354] ")")(282466 call writef "A %i %i A=%xt\n" start_n[282348] end_n[282354](282465 call A[282360](282462 call chpl_build_bounded_range start_n[282348] end_n[282354])))
    } const n[282479] "const"(282477 call +(282474 call - end_n[282354] start_n[282348]) 1)(282482 'end of statement') const maxSequentialSize[282505] "const"(282504 call max(282489 call / n[282479](282486 call . state[282370] c"nTasks"))(282502 call *(282493 call . state[282370] c"nTasks")(282499 call . state[282370] c"sequentialSizePerTask")))(282508 'end of statement')(282530 call(282515 call .(282512 call . state[282370] c"bigTasks") c"append")(282518 'new'(282528 call TwoArraySortTask[279429] start_n[282348] n[282479] startbit[282376](inA = 1)(doSort = 1))))(282544 call assert(282541 call ==(282537 call .(282534 call . state[282370] c"bigTasks") c"size") 1))(282560 call assert(282557 call ==(282553 call .(282550 call . state[282370] c"smallTasks") c"size") 0))
    { unknown tmp[283213] "temp"(283249 'move' tmp[283213](283238 call _cond_test(283240 call !(283248 call(283242 call .(283244 call . state[282370] c"bigTasks") c"isEmpty")))))
      WhileDo[283218]
      {
        { const task[282584] "const"(282583 call(282579 call .(282574 call . state[282370] c"bigTasks") c"pop"))(282587 'end of statement') const taskEnd[282602] "const"(282600 call -(282597 call +(282590 call . task[282584] c"start")(282594 call . task[282584] c"size")) 1)(282605 'end of statement')(282612 call assert(282608 call . task[282584] c"doSort"))
          if(282644 call _cond_test debug[279309])
          {(282641 call writeln "doing big task "(282639 call chpl_build_bounded_range(282635 call . task[282584] c"start") taskEnd[282602]))
          }
          if(282806 call _cond_test(282649 call . task[282584] c"inA"))
          {(282667 call partitioningSortWithScratchSpaceHandleSampling(282654 call . task[282584] c"start") taskEnd[282602] A[282360] Scratch[282366] state[282370] criterion[282373](282664 call . task[282584] c"startbit"))(282685 call bucketize(282672 call . task[282584] c"start") taskEnd[282602] Scratch[282366] A[282360] state[282370] criterion[282373](282682 call . task[282584] c"startbit"))
            if(282725 call _cond_test debug[279309])
            {(282722 call writef "pb %i %i Scratch=%xt\n"(282708 call . task[282584] c"start") taskEnd[282602](282721 call Scratch[282366](282718 call chpl_build_bounded_range(282714 call . task[282584] c"start") taskEnd[282602])))
            }
          }
          {(282744 call partitioningSortWithScratchSpaceHandleSampling(282731 call . task[282584] c"start") taskEnd[282602] Scratch[282366] A[282360] state[282370] criterion[282373](282741 call . task[282584] c"startbit"))(282762 call bucketize(282749 call . task[282584] c"start") taskEnd[282602] A[282360] Scratch[282366] state[282370] criterion[282373](282759 call . task[282584] c"startbit"))
            if(282802 call _cond_test debug[279309])
            {(282799 call writef "pb %i %i A=%xt\n"(282785 call . task[282584] c"start") taskEnd[282602](282798 call A[282360](282795 call chpl_build_bounded_range(282791 call . task[282584] c"start") taskEnd[282602])))
            }
          } const nowInA[282816] "const"(282814 call !(282811 call . task[282584] c"inA"))(282819 'end of statement') function chpl__scan5[282831](arg chpl_toScan[282833]:_any[178](?)) : _unknown[51] "compiler nested function" "ReduceScanOp" "fn returns iterator"
          { unknown chpl_eltType[282835] "maybe type" "temp"
            { scopeless type(282839 'move' chpl_eltType[282835](282841 'typeof'(282843 call chpl__initCopy(282845 call iteratorIndex(282847 call _getIterator chpl_toScan[282833])))))
            } const tmp[282836] "const" "temp"(282856 'move' tmp[282836](282855 'new'(282854 call SumReduceScanOp[376483](?)(eltType = chpl_eltType[282835])(_chpl_manager = unmanaged[220](?)))))(282858 return(282860 call chpl__scanIterator tmp[282836] chpl_toScan[282833]))
          }(282871 call =(282823 call . state[282370] c"ends")(282869 call +(282864 call chpl__scan5(282828 call . state[282370] c"counts"))(282866 call . task[282584] c"start"))) const nBuckets[282883] "const"(282882 call(282878 call .(282875 call . state[282370] c"bucketizer") c"getNumBuckets"))(282886 'end of statement')
          { unknown _indexOfInterest[283173] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[283174] "expr temp" "temp"(283183 'move' _iterator[283174](283181 call _getIterator(283190 call chpl_direct_counted_range_iter 0 nBuckets[282883])))
            Defer
            {
              {(283206 call _freeIterator _iterator[283174])
              }
            }
            { scopeless type(283195 'move' _indexOfInterest[283173](283192 call iteratorIndex _iterator[283174]))
            }
            ForLoop[283175]
            { unknown bin[283199] "index var" "insert auto destroy"(283201 'move' bin[283199] _indexOfInterest[283173])
              { const binSize[282901] "const"(282900 call(282895 call . state[282370] c"counts") bin[283199])(282904 'end of statement') const binStart[282916] "const"(282914 call -(282912 call(282907 call . state[282370] c"ends") bin[283199]) binSize[282901])(282919 'end of statement') const binEnd[282927] "const"(282925 call -(282922 call + binStart[282916] binSize[282901]) 1)(282930 'end of statement') const binStartBit[282946] "const"(282945 call(282937 call .(282932 call . state[282370] c"bucketizer") c"getNextStartBit")(282941 call . task[282584] c"startbit"))(282949 'end of statement') const sortit[282967] "const"(282966 call(282961 call .(282960 call(282956 call .(282951 call . state[282370] c"bucketizer") c"getBinsToRecursivelySort")) c"contains") bin[283199])(282970 'end of statement')
                if(283168 call _cond_test(282973 call == binSize[282901] 0))
                {
                }
                {
                  if(283163 call _cond_test(282982 call &&(282977 call ! nowInA[282816])(282980 call ! sortit[282967])))
                  {(283001 call(282988 call .(282985 call . state[282370] c"smallTasks") c"append")(282991 'new'(282999 call TwoArraySortTask[279429] binStart[282916] binSize[282901] binStartBit[282946] nowInA[282816] sortit[282967])))
                  }
                  {
                    if(283159 call _cond_test(283021 call ||(283015 call ||(283009 call > binStartBit[282946](283006 call . state[282370] c"endbit"))(283013 call >= binStart[282916] binEnd[282927]))(283019 call <= binSize[282901] maxSequentialSize[282505])))
                    {
                      if(283075 call _cond_test(283028 call && debug[279309](283026 call > binSize[282901] 0)))
                      {(283072 call writeln "handling bin " bin[283199] " "(283053 call chpl_build_bounded_range binStart[282916] binEnd[282927]) " as small")
                      }(283097 call(283084 call .(283081 call . state[282370] c"smallTasks") c"append")(283087 'new'(283095 call TwoArraySortTask[279429] binStart[282916] binSize[282901] binStartBit[282946] nowInA[282816] sortit[282967])))
                    }
                    {
                      if(283135 call _cond_test(283104 call && debug[279309](283102 call > binSize[282901] 0)))
                      {(283132 call writeln "handling bin " bin[283199] " "(283113 call chpl_build_bounded_range binStart[282916] binEnd[282927]) " as big")
                      }(283157 call(283144 call .(283141 call . state[282370] c"bigTasks") c"append")(283147 'new'(283155 call TwoArraySortTask[279429] binStart[282916] binSize[282901] binStartBit[282946] nowInA[282816] sortit[282967])))
                    }
                  }
                }
              } label _continueLabel[283178] _indexOfInterest[283173] _iterator[283174]
            } label _breakLabel[283179]
          }
        } label _continueLabel[283216](283233 'move' tmp[283213](283222 call _cond_test(283224 call !(283232 call(283226 call .(283228 call . state[282370] c"bigTasks") c"isEmpty"))))) tmp[283213]
      } label _breakLabel[283217]
    }
    Forall {
      induction variables:
        unknown task[283396] "index var" "insert auto destroy"
      iterated expressions:
        (283254 call . state[282370] c"smallTasks")
      shadow variables:
      other variables
        forall body
      { const size[283261] "const"(283258 call . task[283396] c"size")(283264 'end of statement') const taskEnd[283276] "const"(283274 call -(283271 call +(283267 call . task[283396] c"start") size[283261]) 1)(283279 'end of statement')
        if(283391 call _cond_test(283282 call > size[283261] 0))
        {
          if(283309 call _cond_test(283288 call !(283285 call . task[283396] c"inA")))
          {(283306 call shallowCopy module=[255] ShallowCopy[277471] A[282360](283297 call . task[283396] c"start") Scratch[282366](283302 call . task[283396] c"start") size[283261])(364562 'referenced modules list' ShallowCopy[277471])
          }
          if(283352 call _cond_test debug[279309])
          {(283349 call writef "doing small task %i %i A=%xt\n"(283335 call . task[283396] c"start") taskEnd[283276](283348 call A[282360](283345 call chpl_build_bounded_range(283341 call . task[283396] c"start") taskEnd[283276])))
          }
          if(283387 call _cond_test(283357 call . task[283396] c"doSort"))
          {(283384 call msbRadixSort(283362 call . task[283396] c"start") taskEnd[283276] A[282360] criterion[282373](283370 call . task[283396] c"startbit")(283374 call . state[282370] c"endbit")(settings =(283377 'new'(283382 call MSBRadixSortSettings[288136](?)(alwaysSerial = 1)))))
          }
        }
      }
    }
    if(283474 call _cond_test debug[279309])
    {(283429 call writef "ps %i %i A=%xt\n" start_n[282348] end_n[282354](283428 call A[282360](283425 call chpl_build_bounded_range start_n[282348] end_n[282354])))(283460 call writef "ps %i %i Scratch=%xt\n" start_n[282348] end_n[282354](283459 call Scratch[282366](283456 call chpl_build_bounded_range start_n[282348] end_n[282354])))(283472 call checkSorted module=[255] RadixSortHelp[276164] start_n[282348] end_n[282354] A[282360] criterion[282373] startbit[282376])(364576 'referenced modules list' RadixSortHelp[276164])
    }
  }
  { scopeless type void[4]
  } function distributedPartitioningSortWithScratchSpaceBaseCase[283487](arg start_n[283484] : int(64)[13], arg end_n[283490] : int(64)[13], arg A[283496] :(283493 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283502] :(283499 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283506] : TwoArrayDistributedBucketizerSharedState[279910](?), arg criterion[283509]:_any[178](?), arg startbit[283512] : int(64)[13]) : _unknown[51] "private" "no return value for void"
  {
    if(283525 call _cond_test(283521 call > startbit[283512](283518 call . state[283506] c"endbit")))
    {(283523 return _void[55])
    } const n[283538] "const"(283536 call +(283533 call - end_n[283490] start_n[283484]) 1)(283541 'end of statement') const localSubdomain[283550] "const"(283549 call(283545 call . A[283496] c"localSubdomain"))(283553 'end of statement') const curDomain[283561] "const"(283559 call chpl__buildDomainExpr(283556 call chpl_build_bounded_range start_n[283484] end_n[283490]))(283564 'end of statement') const intersect[283569] "const"(283568 call curDomain[283561] localSubdomain[283550])(283572 'end of statement')
    if(283733 call _cond_test(283575 call == curDomain[283561] intersect[283569]))
    {
      if(283631 call _cond_test(283582 call > n[283538](283579 call . state[283506] c"baseCaseSize")))
      {(283608 call msbRadixSort start_n[283484] end_n[283490](283596 call(283591 call . A[283496] c"localSlice") curDomain[283561]) criterion[283509] startbit[283512](283600 call . state[283506] c"endbit")(settings =(283603 'new'(283606 call MSBRadixSortSettings[288136](?)))))
      }
      {(283628 call shellSort module=[255] ShellSort[273610](283621 call(283616 call . A[283496] c"localSlice") curDomain[283561]) criterion[283509](start = start_n[283484])(end = end_n[283490]))(364587 'referenced modules list' ShellSort[273610])
      }
    }
    { const size[283643] "const"(283641 call +(283638 call - end_n[283490] start_n[283484]) 1)(283646 'end of statement') unknown LocalA[283661](283659 call chpl__buildArrayRuntimeType(283657 call chpl__ensureDomainExpr(283650 call chpl_build_bounded_range start_n[283484] end_n[283490]))(283654 call . A[283496] c"eltType"))(283664 'end of statement')(283675 call shallowCopy module=[255] ShallowCopy[277471] LocalA[283661] start_n[283484] A[283496] start_n[283484] size[283643])
      if(283717 call _cond_test(283682 call > n[283538](283679 call . state[283506] c"baseCaseSize")))
      {(283700 call msbRadixSort start_n[283484] end_n[283490] LocalA[283661] criterion[283509] startbit[283512](283692 call . state[283506] c"endbit")(settings =(283695 'new'(283698 call MSBRadixSortSettings[288136](?)))))
      }
      {(283714 call shellSort module=[255] ShellSort[273610] LocalA[283661] criterion[283509](start = start_n[283484])(end = end_n[283490]))(364603 'referenced modules list' ShellSort[273610])
      }(283731 call shallowCopy module=[255] ShallowCopy[277471] A[283496] start_n[283484] LocalA[283661] start_n[283484] size[283643])(364595 'referenced modules list' ShallowCopy[277471] ShallowCopy[277471])
    }
    if(283750 call _cond_test debug[279309])
    {(283747 call checkSorted module=[255] RadixSortHelp[276164] start_n[283484] end_n[283490] A[283496] criterion[283509])(364614 'referenced modules list' RadixSortHelp[276164])
    }(283754 return _void[55])
  }
  { scopeless type void[4]
  } function distributedPartitioningSortWithScratchSpaceHandleSampling[283765](arg start_n[283762] : int(64)[13], arg end_n[283768] : int(64)[13], arg A[283774] :(283771 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283780] :(283777 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283784] : TwoArrayDistributedBucketizerSharedState[279910](?), arg criterion[283787]:_any[178](?), arg startbit[283790] : int(64)[13]) : _unknown[51] "private" "no return value for void"
  {
    if(284132 call _cond_test(355008 'is_subtype' SampleBucketizer[275616](?)(283810 'typeof'(283807 call .(283804 call .(283803 call(283798 call . state[283784] c"perLocale") 0) c"compat") c"bucketizer"))))
    { unknown n[283824](283822 call -(283819 call + 1 end_n[283768]) start_n[283762])(283827 'end of statement') unknown logNumBuckets[283836](283835 call computeLogBucketSize module=[255] SampleSortHelp[273986] n[283824])(283839 'end of statement') unknown numBuckets[283844](283842 call << 1 logNumBuckets[283836])(283847 'end of statement') unknown sampleStep[283856](283855 call chooseSampleStep module=[255] SampleSortHelp[273986] n[283824] logNumBuckets[283836])(283859 'end of statement') unknown sampleSize[283867](283865 call -(283862 call * sampleStep[283856] numBuckets[283844]) 1)(283870 'end of statement')
      if(283899 call _cond_test(283873 call >= sampleSize[283867] n[283824]))
      {
        if(283881 call _cond_test debug[279309])
        {(283879 call writeln "Reducing sample size because it was too big")
        }(283896 call = sampleSize[283867](283895 call max 1(283893 call / n[283824] 2)))
      }(283912 call putRandomSampleAtArrayStart module=[255] SampleSortHelp[273986] start_n[283762] end_n[283768] A[283774] sampleSize[283867])
      if(283920 call _cond_test debug[279309])
      {(283918 call writeln "recursing to sort the sample")
      }
      if(283968 call _cond_test(283930 call <= sampleSize[283867](283928 call * 1024 1024)))
      {(283947 call distributedPartitioningSortWithScratchSpaceBaseCase start_n[283762](283940 call -(283937 call + start_n[283762] sampleSize[283867]) 1) A[283774] Scratch[283780] state[283784] criterion[283787] startbit[283790])
      }
      {(283965 call distributedPartitioningSortWithScratchSpace start_n[283762](283958 call -(283955 call + start_n[283762] sampleSize[283867]) 1) A[283774] Scratch[283780] state[283784] criterion[283787] startbit[283790])
      }
      if(283992 call _cond_test debug[279309])
      {(283989 call checkSorted module=[255] RadixSortHelp[276164] start_n[283762](283984 call -(283981 call + start_n[283762] sampleSize[283867]) 1) A[283774] criterion[283787] startbit[283790])(364641 'referenced modules list' RadixSortHelp[276164])
      }(284017 call createSplittersFromSample A[283774](284009 call .(284006 call .(284005 call(284000 call . state[283784] c"perLocale") 0) c"compat") c"bucketizer") criterion[283787] start_n[283762] sampleSize[283867] sampleStep[283856] numBuckets[283844])
      if(284053 call _cond_test debug[279309])
      {(284036 call writeln "sample bucketizer "(284033 call .(284030 call .(284029 call(284024 call . state[283784] c"perLocale") 0) c"compat") c"bucketizer"))(284051 call writef "A %i %i A=%xt\n" start_n[283762] end_n[283768](284050 call A[283774](284047 call chpl_build_bounded_range start_n[283762] end_n[283768])))
      }
      { unknown _indexOfInterest[284091] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284092] "expr temp" "temp"(284101 'move' _iterator[284092](284099 call _getIterator(284109 call chpl_direct_range_iter 1(284106 call . state[283784] c"numLocales") 1)))
        Defer
        {
          {(284125 call _freeIterator _iterator[284092])
          }
        }
        { scopeless type(284114 'move' _indexOfInterest[284091](284111 call iteratorIndex _iterator[284092]))
        }
        ForLoop[284093]
        { unknown lid[284118] "index var" "insert auto destroy"(284120 'move' lid[284118] _indexOfInterest[284091])
          {(284087 call =(284074 call .(284073 call(284068 call . state[283784] c"perLocale") lid[284118]) c"bucketizer")(284084 call .(284083 call(284078 call . state[283784] c"perLocale") 0) c"bucketizer"))
          } label _continueLabel[284096] _indexOfInterest[284091] _iterator[284092]
        } label _breakLabel[284097]
      }(364625 'referenced modules list' SampleSortHelp[273986] SampleSortHelp[273986] SampleSortHelp[273986])
    }(364621 'referenced modules list' SampleSortHelp[273986])
  }
  { scopeless type void[4]
  } function distributedPartitioningSortWithScratchSpace[284146](arg start_n[284143] : int(64)[13], arg end_n[284149] : int(64)[13], arg A[284155] :(284152 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[284161] :(284158 call chpl__buildArrayRuntimeType nil[44]), ref arg state[284165] : TwoArrayDistributedBucketizerSharedState[279910](?), arg criterion[284168]:_any[178](?), arg startbit[284171] : int(64)[13]) : _unknown[51] "no return value for void"
  {
    if(284207 call _cond_test(284183 call !(284182 call(284178 call . A[284155] c"hasSingleLocalSubdomain"))))
    {(284204 call compilerError "distributedPartitioningSortWithScratchSpace needs single local subdomain")
    }
    if(284221 call _cond_test(284217 call > startbit[284171](284214 call . state[284165] c"endbit")))
    {(284219 return _void[55])
    }
    if(284250 call _cond_test(284234 call <(284228 call - end_n[284149] start_n[284143])(284231 call . state[284165] c"baseCaseSize")))
    {(284245 call distributedPartitioningSortWithScratchSpaceBaseCase start_n[284143] end_n[284149] A[284155] Scratch[284161] state[284165] criterion[284168] startbit[284171])(284248 return _void[55])
    }
    if(284319 call _cond_test debug[279309])
    {(284316 call writeln "in distributed radix sort " start_n[284143] ".." end_n[284149] " startbit " startbit[284171] " endbit "(284313 call . state[284165] c"endbit"))
    } const n[284330] "const"(284328 call +(284325 call - end_n[284149] start_n[284143]) 1)(284333 'end of statement')(284353 call(284340 call .(284337 call . state[284165] c"distTasks") c"append")(284343 'new'(284351 call TwoArraySortTask[279429] start_n[284143] n[284330] startbit[284171] 1 1)))(284367 call assert(284364 call ==(284360 call .(284357 call . state[284165] c"distTasks") c"size") 1))
    { unknown tmp[286993] "temp"(287029 'move' tmp[286993](287018 call _cond_test(287020 call !(287028 call(287022 call .(287024 call . state[284165] c"distTasks") c"isEmpty")))))
      WhileDo[286998]
      {
        { const task[284389] "const"(284388 call(284384 call .(284381 call . state[284165] c"distTasks") c"pop"))(284392 'end of statement') const taskStart[284398] "const"(284395 call . task[284389] c"start")(284401 'end of statement') const taskEnd[284415] "const"(284413 call -(284410 call +(284403 call . task[284389] c"start")(284407 call . task[284389] c"size")) 1)(284418 'end of statement')(284425 call assert(284421 call . task[284389] c"doSort"))(284433 call assert(284429 call . task[284389] c"inA"))(284450 call distributedPartitioningSortWithScratchSpaceHandleSampling(284437 call . task[284389] c"start") taskEnd[284415] A[284155] Scratch[284161] state[284165] criterion[284168](284447 call . task[284389] c"startbit")) const nBuckets[284470] "const"(284469 call(284465 call .(284462 call .(284459 call .(284458 call(284453 call . state[284165] c"perLocale") 0) c"compat") c"bucketizer") c"getNumBuckets"))(284473 'end of statement') const nTasks[284478] "const"(284475 call . state[284165] c"numLocales")(284481 'end of statement')
          { unknown tmpIter[284814] "expr temp" "maybe ref" "no copy" "temp"(284817 'move' tmpIter[284814](284499 call _build_tuple(284494 call(284490 call . A[284155] c"targetLocales"))(284497 call chpl_build_low_bounded_range 0))) unknown isRngDomArr[285214] "maybe param" "temp"(285229 'move' isRngDomArr[285214](285227 call ||(285216 call isBoundedRange tmpIter[284814])(285225 call ||(285219 call isDomain tmpIter[284814])(285222 call isArray tmpIter[284814]))))
            if isRngDomArr[285214]
            { const _coforallCount[285058] "const" "end count" "temp"(285137 'move' _coforallCount[285058](285134 call _endCountAlloc 0)) unknown numTasks[285059] "temp"(285121 'move' numTasks[285059](285117 call . tmpIter[284814] c"size"))(285112 call _upEndCount _coforallCount[285058] 0 numTasks[285059]) unknown _indexOfInterest[285065] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[285066] "expr temp" "temp"(285075 'move' _iterator[285066](285073 call _getIteratorZip tmpIter[284814]))
              Defer
              {
                {(285105 call _freeIterator _iterator[285066])
                }
              }
              { scopeless type(285080 'move' _indexOfInterest[285065](285077 call iteratorIndex _iterator[285066]))
              }
              ForLoop[285067]
              {(285085 call _check_tuple_var_decl _indexOfInterest[285065] 2) unknown loc[285091] "coforall index var" "index var" "insert auto destroy"(285093 'move' loc[285091](285089 call _indexOfInterest[285065] 0)) unknown tid[285098] "coforall index var" "index var" "insert auto destroy"(285100 'move' tid[285098](285096 call _indexOfInterest[285065] 1)) const tmp[284823] "const" "temp"(284825 'move' tmp[284823](284827 'deref'(284828 '_wide_get_locale' loc[285091])))
                {
                  { const localDomain[284836] "const"(284842 call(284841 call(284838 call . A[284155] c"localSubdomain"))(284844 call chpl_build_bounded_range(284846 call . task[284389] c"start") taskEnd[284415]))(284851 'end of statement') unknown localSrc[284853] "ref var"(284858 call(284855 call . A[284155] c"localSlice") localDomain[284836])(284861 'end of statement') unknown localDst[284863] "ref var"(284868 call(284865 call . Scratch[284161] c"localSlice") localDomain[284836])(284871 'end of statement')(284873 call bucketize(284875 call . localDomain[284836] c"alignedLow")(284879 call . localDomain[284836] c"alignedHigh") localDst[284863] localSrc[284853](284885 call .(284890 call(284887 call . state[284165] c"perLocale") tid[285098]) c"compat") criterion[284168](284895 call . task[284389] c"startbit")) unknown localCounts[284899] "ref var"(284901 call .(284903 call .(284908 call(284905 call . state[284165] c"perLocale") tid[285098]) c"compat") c"counts")(284913 'end of statement')
                    if(284915 call _cond_test debug[279309])
                    { unknown total[284919] 0(284922 'end of statement')
                      { unknown _indexOfInterest[284924] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284926] "expr temp" "temp"(284928 'move' _iterator[284926](284931 call _getIterator(284933 call chpl_direct_counted_range_iter 0 nBuckets[284470])))
                        Defer
                        {
                          {(284938 call _freeIterator _iterator[284926])
                          }
                        }
                        { scopeless type(284942 'move' _indexOfInterest[284924](284945 call iteratorIndex _iterator[284926]))
                        }
                        ForLoop[284947]
                        { unknown bin[284950] "index var" "insert auto destroy"(284952 'move' bin[284950] _indexOfInterest[284924])
                          {
                            if(284957 call _cond_test(284959 call >(284961 call localCounts[284899] bin[284950]) 0))
                            {(284966 call writeln "localCounts[" bin[284950] "]="(284971 call localCounts[284899] bin[284950]))(284974 call += total[284919](284977 call localCounts[284899] bin[284950]))
                            }
                          } label _continueLabel[284980] _indexOfInterest[284924] _iterator[284926]
                        } label _breakLabel[284982]
                      }(284985 call assert(284987 call == total[284919](284990 call . localDomain[284836] c"size")))
                    }
                    { unknown _indexOfInterest[284995] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284997] "expr temp" "temp"(284999 'move' _iterator[284997](285002 call _getIterator(285004 call vectorizeOnly(285006 call #(285008 call chpl_build_low_bounded_range 0) nBuckets[284470]))))
                      Defer
                      {
                        {(285013 call _freeIterator _iterator[284997])
                        }
                      }
                      { scopeless type(285017 'move' _indexOfInterest[284995](285020 call iteratorIndex _iterator[284997]))
                      }
                      ForLoop[285022]
                      { unknown bin[285025] "index var" "insert auto destroy"(285027 'move' bin[285025] _indexOfInterest[284995])
                        {(285032 call =(285042 call(285034 call .(285039 call(285036 call . state[284165] c"perLocale") 0) c"globalCounts")(285044 call +(285046 call * bin[285025] nTasks[284478]) tid[285098]))(285051 call localCounts[284899] bin[285025]))
                        } label _continueLabel[285053] _indexOfInterest[284995] _iterator[284997]
                      } label _breakLabel[285055]
                    }
                  }(285060 call _downEndCount _coforallCount[285058] nil[44])(284831 'coforall on block' 0 tmp[284823])(284819 'actuals list' tiMarkRef[294] state[284165])
                } label _continueLabel[285070] _indexOfInterest[285065] _iterator[285066]
              } label _breakLabel[285071]
              Defer
              {
                {(285124 call _endCountFree _coforallCount[285058])
                }
              }(285129 call _waitEndCount _coforallCount[285058] 0 numTasks[285059])
            }
            { const _coforallCount[285141] "const" "end count" "temp"(285211 'move' _coforallCount[285141](285208 call _endCountAlloc 0)) unknown _indexOfInterest[285148] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[285149] "expr temp" "temp"(285158 'move' _iterator[285149](285156 call _getIteratorZip tmpIter[284814]))
              Defer
              {
                {(285188 call _freeIterator _iterator[285149])
                }
              }
              { scopeless type(285163 'move' _indexOfInterest[285148](285160 call iteratorIndex _iterator[285149]))
              }
              ForLoop[285150]
              {(285168 call _check_tuple_var_decl _indexOfInterest[285148] 2) unknown loc[285174] "coforall index var" "index var" "insert auto destroy"(285176 'move' loc[285174](285172 call _indexOfInterest[285148] 0)) unknown tid[285181] "coforall index var" "index var" "insert auto destroy"(285183 'move' tid[285181](285179 call _indexOfInterest[285148] 1))(285195 call _upEndCount _coforallCount[285141] 0) const tmp[284804] "const" "temp"(284806 'move' tmp[284804](284802 'deref'(284801 '_wide_get_locale' loc[285174])))
                {
                  { const localDomain[284524] "const"(284523 call(284514 call(284510 call . A[284155] c"localSubdomain"))(284520 call chpl_build_bounded_range(284516 call . task[284389] c"start") taskEnd[284415]))(284527 'end of statement') unknown localSrc[284536] "ref var"(284535 call(284530 call . A[284155] c"localSlice") localDomain[284524])(284539 'end of statement') unknown localDst[284547] "ref var"(284546 call(284541 call . Scratch[284161] c"localSlice") localDomain[284524])(284550 'end of statement')(284578 call bucketize(284553 call . localDomain[284524] c"alignedLow")(284558 call . localDomain[284524] c"alignedHigh") localDst[284547] localSrc[284536](284570 call .(284569 call(284564 call . state[284165] c"perLocale") tid[285181]) c"compat") criterion[284168](284575 call . task[284389] c"startbit")) unknown localCounts[284593] "ref var"(284590 call .(284587 call .(284586 call(284581 call . state[284165] c"perLocale") tid[285181]) c"compat") c"counts")(284596 'end of statement')
                    if(284726 call _cond_test debug[279309])
                    { unknown total[284599] 0(284602 'end of statement')
                      { unknown _indexOfInterest[284675] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284676] "expr temp" "temp"(284685 'move' _iterator[284676](284683 call _getIterator(284692 call chpl_direct_counted_range_iter 0 nBuckets[284470])))
                        Defer
                        {
                          {(284708 call _freeIterator _iterator[284676])
                          }
                        }
                        { scopeless type(284697 'move' _indexOfInterest[284675](284694 call iteratorIndex _iterator[284676]))
                        }
                        ForLoop[284677]
                        { unknown bin[284701] "index var" "insert auto destroy"(284703 'move' bin[284701] _indexOfInterest[284675])
                          {
                            if(284670 call _cond_test(284616 call >(284614 call localCounts[284593] bin[284701]) 0))
                            {(284659 call writeln "localCounts[" bin[284701] "]="(284658 call localCounts[284593] bin[284701]))(284667 call += total[284599](284666 call localCounts[284593] bin[284701]))
                            }
                          } label _continueLabel[284680] _indexOfInterest[284675] _iterator[284676]
                        } label _breakLabel[284681]
                      }(284724 call assert(284721 call == total[284599](284718 call . localDomain[284524] c"size")))
                    }
                    { unknown _indexOfInterest[284767] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[284768] "expr temp" "temp"(284777 'move' _iterator[284768](284775 call _getIterator(284739 call vectorizeOnly(284736 call #(284733 call chpl_build_low_bounded_range 0) nBuckets[284470]))))
                      Defer
                      {
                        {(284794 call _freeIterator _iterator[284768])
                        }
                      }
                      { scopeless type(284783 'move' _indexOfInterest[284767](284780 call iteratorIndex _iterator[284768]))
                      }
                      ForLoop[284769]
                      { unknown bin[284787] "index var" "insert auto destroy"(284789 'move' bin[284787] _indexOfInterest[284767])
                        {(284763 call =(284758 call(284747 call .(284746 call(284741 call . state[284165] c"perLocale") 0) c"globalCounts")(284755 call +(284752 call * bin[284787] nTasks[284478]) tid[285181]))(284762 call localCounts[284593] bin[284787]))
                        } label _continueLabel[284772] _indexOfInterest[284767] _iterator[284768]
                      } label _breakLabel[284773]
                    }
                  }(285143 call _downEndCount _coforallCount[285141] nil[44])(284809 'coforall on block' 0 tmp[284804])(284505 'actuals list' tiMarkRef[294] state[284165])
                } label _continueLabel[285153] _indexOfInterest[285148] _iterator[285149]
              } label _breakLabel[285154]
              Defer
              {
                {(285199 call _endCountFree _coforallCount[285141])
                }
              }(285204 call _waitEndCount _coforallCount[285141] 0)
            }
          }
          if(285266 call _cond_test debug[279309])
          {(285263 call writef "after bucketize local portions, Scratch is %xt\n"(285262 call Scratch[284161](285259 call chpl_build_bounded_range(285255 call . task[284389] c"start") taskEnd[284415])))
          } function chpl__scan6[285291](arg chpl_toScan[285293]:_any[178](?)) : _unknown[51] "compiler nested function" "ReduceScanOp" "fn returns iterator"
          { unknown chpl_eltType[285295] "maybe type" "temp"
            { scopeless type(285299 'move' chpl_eltType[285295](285301 'typeof'(285303 call chpl__initCopy(285305 call iteratorIndex(285307 call _getIterator chpl_toScan[285293])))))
            } const tmp[285296] "const" "temp"(285316 'move' tmp[285296](285315 'new'(285314 call SumReduceScanOp[376483](?)(eltType = chpl_eltType[285295])(_chpl_manager = unmanaged[220](?)))))(285318 return(285320 call chpl__scanIterator tmp[285296] chpl_toScan[285293]))
          }(285331 call =(285277 call .(285276 call(285271 call . state[284165] c"perLocale") 0) c"globalEnds")(285329 call +(285324 call chpl__scan6(285288 call .(285287 call(285282 call . state[284165] c"perLocale") 0) c"globalCounts"))(285326 call . task[284389] c"start")))
          Forall {
            induction variables:
              unknown loc[285413] "index var" "insert auto destroy"
              unknown tid[285415] "index var" "insert auto destroy"
            iterated expressions:
              (285344 call(285340 call . A[284155] c"targetLocales"))
              (285347 call chpl_build_low_bounded_range 0)
            shadow variables:
              state[285351] 'ref' intent outer var state[284165]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              if(285407 call _cond_test(285358 call != tid[285415] 0))
              {(285380 call =(285367 call .(285366 call(285361 call . state[285351] c"perLocale") tid[285415]) c"globalCounts")(285377 call .(285376 call(285371 call . state[285351] c"perLocale") 0) c"globalCounts"))(285404 call =(285391 call .(285390 call(285385 call . state[285351] c"perLocale") tid[285415]) c"globalEnds")(285401 call .(285400 call(285395 call . state[285351] c"perLocale") 0) c"globalEnds"))
              }
            }
          }
          if(285601 call _cond_test debug[279309])
          { unknown total[285421] 0(285424 'end of statement')
            { unknown _indexOfInterest[285547] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[285548] "expr temp" "temp"(285557 'move' _iterator[285548](285555 call _getIterator(285567 call chpl_direct_counted_range_iter 0(285563 call . state[284165] c"countsSize"))))
              Defer
              {
                {(285583 call _freeIterator _iterator[285548])
                }
              }
              { scopeless type(285572 'move' _indexOfInterest[285547](285569 call iteratorIndex _iterator[285548]))
              }
              ForLoop[285549]
              { unknown i[285576] "index var" "insert auto destroy"(285578 'move' i[285576] _indexOfInterest[285547])
                {
                  if(285542 call _cond_test(285450 call !=(285448 call(285443 call .(285442 call(285437 call . state[284165] c"perLocale") 0) c"globalCounts") i[285576]) 0))
                  {(285466 call += total[285421](285465 call(285460 call .(285459 call(285454 call . state[284165] c"perLocale") 0) c"globalCounts") i[285576]))(285504 call writeln "state.globalCounts[" i[285576] "]="(285503 call(285498 call .(285497 call(285492 call . state[284165] c"perLocale") 0) c"globalCounts") i[285576]))(285540 call writeln "state.globalEnds[" i[285576] "]="(285539 call(285534 call .(285533 call(285528 call . state[284165] c"perLocale") 0) c"globalEnds") i[285576]))
                  }
                } label _continueLabel[285552] _indexOfInterest[285547] _iterator[285548]
              } label _breakLabel[285553]
            }(285599 call assert(285596 call == total[285421](285593 call . task[284389] c"size")))
          }
          { unknown tmpIter[286080] "expr temp" "maybe ref" "no copy" "temp"(286083 'move' tmpIter[286080](285620 call _build_tuple(285615 call(285611 call . A[284155] c"targetLocales"))(285618 call chpl_build_low_bounded_range 0))) unknown isRngDomArr[286571] "maybe param" "temp"(286586 'move' isRngDomArr[286571](286584 call ||(286573 call isBoundedRange tmpIter[286080])(286582 call ||(286576 call isDomain tmpIter[286080])(286579 call isArray tmpIter[286080]))))
            if isRngDomArr[286571]
            { const _coforallCount[286415] "const" "end count" "temp"(286494 'move' _coforallCount[286415](286491 call _endCountAlloc 0)) unknown numTasks[286416] "temp"(286478 'move' numTasks[286416](286474 call . tmpIter[286080] c"size"))(286469 call _upEndCount _coforallCount[286415] 0 numTasks[286416]) unknown _indexOfInterest[286422] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286423] "expr temp" "temp"(286432 'move' _iterator[286423](286430 call _getIteratorZip tmpIter[286080]))
              Defer
              {
                {(286462 call _freeIterator _iterator[286423])
                }
              }
              { scopeless type(286437 'move' _indexOfInterest[286422](286434 call iteratorIndex _iterator[286423]))
              }
              ForLoop[286424]
              {(286442 call _check_tuple_var_decl _indexOfInterest[286422] 2) unknown loc[286448] "coforall index var" "index var" "insert auto destroy"(286450 'move' loc[286448](286446 call _indexOfInterest[286422] 0)) unknown tid[286455] "coforall index var" "index var" "insert auto destroy"(286457 'move' tid[286455](286453 call _indexOfInterest[286422] 1)) const tmp[286089] "const" "temp"(286091 'move' tmp[286089](286093 'deref'(286094 '_wide_get_locale' loc[286448])))
                {
                  { const globalCounts[286102] "const" "ref var"(286104 call .(286109 call(286106 call . state[284165] c"perLocale") tid[286455]) c"globalCounts")(286113 'end of statement') const globalEnds[286115] "const" "ref var"(286117 call .(286122 call(286119 call . state[284165] c"perLocale") tid[286455]) c"globalEnds")(286126 'end of statement') const localSubdomain[286128] "const"(286134 call(286133 call(286130 call . A[284155] c"localSubdomain"))(286136 call chpl_build_bounded_range(286138 call . task[284389] c"start") taskEnd[284415]))(286143 'end of statement') unknown localOffsets[286145] "ref var"(286147 call .(286149 call .(286154 call(286151 call . state[284165] c"perLocale") tid[286455]) c"compat") c"counts")(286159 'end of statement')
                    { unknown offset[286162](286164 call . localSubdomain[286128] c"low")(286168 'end of statement')
                      { unknown _indexOfInterest[286170] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286172] "expr temp" "temp"(286174 'move' _iterator[286172](286177 call _getIterator(286179 call chpl_direct_counted_range_iter 0 nBuckets[284470])))
                        Defer
                        {
                          {(286184 call _freeIterator _iterator[286172])
                          }
                        }
                        { scopeless type(286188 'move' _indexOfInterest[286170](286191 call iteratorIndex _iterator[286172]))
                        }
                        ForLoop[286193]
                        { unknown bin[286196] "index var" "insert auto destroy"(286198 'move' bin[286196] _indexOfInterest[286170])
                          {(286203 call =(286205 call localOffsets[286145] bin[286196]) offset[286162])(286209 call += offset[286162](286212 call globalCounts[286102](286214 call +(286216 call * bin[286196] nTasks[284478]) tid[286455])))
                          } label _continueLabel[286220] _indexOfInterest[286170] _iterator[286172]
                        } label _breakLabel[286222]
                      }
                    }
                    Forall {
                      induction variables:
                        unknown bin[286406] "index var" "insert auto destroy"
                      iterated expressions:
                        (286409 call #(286411 call chpl_build_low_bounded_range 0) nBuckets[284470])
                      shadow variables:
                      other variables
                        forall body
                      { unknown size[286226](286228 call globalCounts[286102](286230 call +(286232 call * bin[286406] nTasks[284478]) tid[286455]))(286237 'end of statement')
                        if(286239 call _cond_test(286241 call > size[286226] 0))
                        { unknown localStart[286246](286248 call localOffsets[286145] bin[286406])(286251 'end of statement') unknown localEnd[286253](286255 call -(286257 call + localStart[286246] size[286226]) 1)(286262 'end of statement') unknown globalStart[286264](286290 IfExpr (286266 call >(286268 call +(286270 call * bin[286406] nTasks[284478]) tid[286455]) 0) then
                          { scopeless(286277 call globalEnds[286115](286279 call -(286281 call +(286283 call * bin[286406] nTasks[284478]) tid[286455]) 1))
                          } else
                          { scopeless taskStart[284398]
                          } )(286292 'end of statement') unknown globalEnd[286294](286296 call -(286298 call globalEnds[286115](286300 call +(286302 call * bin[286406] nTasks[284478]) tid[286455])) 1)(286308 'end of statement')
                          if(286310 call _cond_test debug[279309])
                          {(286314 call writeln "bin " bin[286406] " tid " tid[286455] " range "(286321 call chpl_build_bounded_range taskStart[284398] taskEnd[284415]) " A[" globalStart[286264] ".." globalEnd[286294] "] = Scratch[" localStart[286246] ".." localEnd[286253] "]")(286334 call assert(286336 call ==(286338 call globalCounts[286102](286340 call +(286342 call * bin[286406] nTasks[284478]) tid[286455]))(286355 call(286347 call .(286352 call(286349 call . state[284165] c"perLocale") 0) c"globalCounts")(286357 call +(286359 call * bin[286406] nTasks[284478]) tid[286455]))))(286364 call assert(286366 call ==(286368 call globalEnds[286115](286370 call +(286372 call * bin[286406] nTasks[284478]) tid[286455]))(286385 call(286377 call .(286382 call(286379 call . state[284165] c"perLocale") 0) c"globalEnds")(286387 call +(286389 call * bin[286406] nTasks[284478]) tid[286455]))))
                          }(286398 call shallowCopy module=[255] ShallowCopy[277471] A[284155] globalStart[286264] Scratch[284161] localStart[286246] size[286226])(364729 'referenced modules list' ShallowCopy[277471])
                        }
                      }
                    }
                  }(286417 call _downEndCount _coforallCount[286415] nil[44])(286097 'coforall on block' 0 tmp[286089])(286085 'actuals list' tiMarkRef[294] state[284165])
                } label _continueLabel[286427] _indexOfInterest[286422] _iterator[286423]
              } label _breakLabel[286428]
              Defer
              {
                {(286481 call _endCountFree _coforallCount[286415])
                }
              }(286486 call _waitEndCount _coforallCount[286415] 0 numTasks[286416])
            }
            { const _coforallCount[286498] "const" "end count" "temp"(286568 'move' _coforallCount[286498](286565 call _endCountAlloc 0)) unknown _indexOfInterest[286505] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286506] "expr temp" "temp"(286515 'move' _iterator[286506](286513 call _getIteratorZip tmpIter[286080]))
              Defer
              {
                {(286545 call _freeIterator _iterator[286506])
                }
              }
              { scopeless type(286520 'move' _indexOfInterest[286505](286517 call iteratorIndex _iterator[286506]))
              }
              ForLoop[286507]
              {(286525 call _check_tuple_var_decl _indexOfInterest[286505] 2) unknown loc[286531] "coforall index var" "index var" "insert auto destroy"(286533 'move' loc[286531](286529 call _indexOfInterest[286505] 0)) unknown tid[286538] "coforall index var" "index var" "insert auto destroy"(286540 'move' tid[286538](286536 call _indexOfInterest[286505] 1))(286552 call _upEndCount _coforallCount[286498] 0) const tmp[286070] "const" "temp"(286072 'move' tmp[286070](286068 'deref'(286067 '_wide_get_locale' loc[286531])))
                {
                  { const globalCounts[285640] "const" "ref var"(285637 call .(285636 call(285631 call . state[284165] c"perLocale") tid[286538]) c"globalCounts")(285643 'end of statement') const globalEnds[285655] "const" "ref var"(285652 call .(285651 call(285646 call . state[284165] c"perLocale") tid[286538]) c"globalEnds")(285658 'end of statement') const localSubdomain[285674] "const"(285673 call(285664 call(285660 call . A[284155] c"localSubdomain"))(285670 call chpl_build_bounded_range(285666 call . task[284389] c"start") taskEnd[284415]))(285677 'end of statement') unknown localOffsets[285691] "ref var"(285688 call .(285685 call .(285684 call(285679 call . state[284165] c"perLocale") tid[286538]) c"compat") c"counts")(285694 'end of statement')
                    { unknown offset[285699](285696 call . localSubdomain[285674] c"low")(285702 'end of statement')
                      { unknown _indexOfInterest[285734] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[285735] "expr temp" "temp"(285744 'move' _iterator[285735](285742 call _getIterator(285751 call chpl_direct_counted_range_iter 0 nBuckets[284470])))
                        Defer
                        {
                          {(285767 call _freeIterator _iterator[285735])
                          }
                        }
                        { scopeless type(285756 'move' _indexOfInterest[285734](285753 call iteratorIndex _iterator[285735]))
                        }
                        ForLoop[285736]
                        { unknown bin[285760] "index var" "insert auto destroy"(285762 'move' bin[285760] _indexOfInterest[285734])
                          {(285716 call =(285714 call localOffsets[285691] bin[285760]) offset[285699])(285731 call += offset[285699](285730 call globalCounts[285640](285727 call +(285724 call * bin[285760] nTasks[284478]) tid[286538])))
                          } label _continueLabel[285739] _indexOfInterest[285734] _iterator[285735]
                        } label _breakLabel[285740]
                      }
                    }
                    Forall {
                      induction variables:
                        unknown bin[286063] "index var" "insert auto destroy"
                      iterated expressions:
                        (285779 call #(285776 call chpl_build_low_bounded_range 0) nBuckets[284470])
                      shadow variables:
                      other variables
                        forall body
                      { unknown size[285791](285790 call globalCounts[285640](285787 call +(285784 call * bin[286063] nTasks[284478]) tid[286538]))(285794 'end of statement')
                        if(286058 call _cond_test(285798 call > size[285791] 0))
                        { unknown localStart[285804](285803 call localOffsets[285691] bin[286063])(285807 'end of statement') unknown localEnd[285816](285814 call -(285811 call + localStart[285804] size[285791]) 1)(285819 'end of statement') unknown globalStart[285847](285844 IfExpr (285828 call >(285825 call +(285822 call * bin[286063] nTasks[284478]) tid[286538]) 0) then
                          { scopeless(285842 call globalEnds[285655](285839 call -(285836 call +(285833 call * bin[286063] nTasks[284478]) tid[286538]) 1))
                          } else
                          { scopeless taskStart[284398]
                          } )(285850 'end of statement') unknown globalEnd[285864](285862 call -(285860 call globalEnds[285655](285857 call +(285854 call * bin[286063] nTasks[284478]) tid[286538])) 1)(285867 'end of statement')
                          if(286042 call _cond_test debug[279309])
                          {(285969 call writeln "bin " bin[286063] " tid " tid[286538] " range "(285926 call chpl_build_bounded_range taskStart[284398] taskEnd[284415]) " A[" globalStart[285847] ".." globalEnd[285864] "] = Scratch[" localStart[285804] ".." localEnd[285816] "]")(286005 call assert(286002 call ==(285982 call globalCounts[285640](285979 call +(285976 call * bin[286063] nTasks[284478]) tid[286538]))(286001 call(285990 call .(285989 call(285984 call . state[284165] c"perLocale") 0) c"globalCounts")(285998 call +(285995 call * bin[286063] nTasks[284478]) tid[286538]))))(286040 call assert(286037 call ==(286017 call globalEnds[285655](286014 call +(286011 call * bin[286063] nTasks[284478]) tid[286538]))(286036 call(286025 call .(286024 call(286019 call . state[284165] c"perLocale") 0) c"globalEnds")(286033 call +(286030 call * bin[286063] nTasks[284478]) tid[286538]))))
                          }(286056 call shallowCopy module=[255] ShallowCopy[277471] A[284155] globalStart[285847] Scratch[284161] localStart[285804] size[285791])(364715 'referenced modules list' ShallowCopy[277471])
                        }
                      }
                    }
                  }(286500 call _downEndCount _coforallCount[286498] nil[44])(286075 'coforall on block' 0 tmp[286070])(285626 'actuals list' tiMarkRef[294] state[284165])
                } label _continueLabel[286510] _indexOfInterest[286505] _iterator[286506]
              } label _breakLabel[286511]
              Defer
              {
                {(286556 call _endCountFree _coforallCount[286498])
                }
              }(286561 call _waitEndCount _coforallCount[286498] 0)
            }
          }
          if(286623 call _cond_test debug[279309])
          {(286620 call writef "after distribute, A is %xt\n"(286619 call A[284155](286616 call chpl_build_bounded_range(286612 call . task[284389] c"start") taskEnd[284415])))
          }
          { unknown _indexOfInterest[286959] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286960] "expr temp" "temp"(286969 'move' _iterator[286960](286967 call _getIterator(286645 call(286641 call .(286638 call .(286635 call .(286634 call(286629 call . state[284165] c"perLocale") 0) c"compat") c"bucketizer") c"getBinsToRecursivelySort"))))
            Defer
            {
              {(286986 call _freeIterator _iterator[286960])
              }
            }
            { scopeless type(286975 'move' _indexOfInterest[286959](286972 call iteratorIndex _iterator[286960]))
            }
            ForLoop[286961]
            { unknown bin[286979] "index var" "insert auto destroy"(286981 'move' bin[286979] _indexOfInterest[286959])
              { const binStart[286679] "const"(286676 IfExpr (286651 call >(286648 call * bin[286979] nTasks[284478]) 0) then
                { scopeless(286671 call(286660 call .(286659 call(286654 call . state[284165] c"perLocale") 0) c"globalEnds")(286668 call -(286665 call * bin[286979] nTasks[284478]) 1))
                } else
                { scopeless(286673 call . task[284389] c"start")
                } )(286682 'end of statement') const binEnd[286709] "const"(286707 call -(286705 call(286691 call .(286690 call(286685 call . state[284165] c"perLocale") 0) c"globalEnds")(286702 call -(286699 call +(286696 call * bin[286979] nTasks[284478]) nTasks[284478]) 1)) 1)(286712 'end of statement') const binSize[286720] "const"(286718 call +(286715 call - binEnd[286709] binStart[286679]) 1)(286723 'end of statement') const binStartBit[286746] "const"(286745 call(286737 call .(286734 call .(286731 call .(286730 call(286725 call . state[284165] c"perLocale") 0) c"compat") c"bucketizer") c"getNextStartBit")(286741 call . task[284389] c"startbit"))(286749 'end of statement')
                if(286955 call _cond_test(286752 call > binSize[286720] 1))
                { unknown isOnOneLocale[286755] 0(286758 'end of statement') unknown theLocaleId[286763](286761 call - 1)(286766 'end of statement')
                  { unknown _indexOfInterest[286842] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[286843] "expr temp" "temp"(286865 'move' _iterator[286843](286782 call _build_tuple(286856 call _getIterator(286855 call(286852 call . A[284155] c"targetLocales")))(286862 call _getIterator(286860 call chpl_build_low_bounded_range 0))))
                    Defer
                    {
                      {(286895 call _freeIterator _iterator[286843])
                      }
                    }
                    { scopeless type(286870 'move' _indexOfInterest[286842](286867 call iteratorIndex _iterator[286843]))
                    }
                    ForLoop[286844]
                    {(286875 call _check_tuple_var_decl _indexOfInterest[286842] 2) unknown loc[286881] "index var" "insert auto destroy"(286883 'move' loc[286881](286879 call _indexOfInterest[286842] 0)) unknown tid[286888] "index var" "insert auto destroy"(286890 'move' tid[286888](286886 call _indexOfInterest[286842] 1))
                      { const localSubdomain[286799] "const"(286798 call(286789 call(286784 call . A[284155] c"localSubdomain") loc[286881])(286795 call chpl_build_bounded_range(286791 call . task[284389] c"start") taskEnd[284415]))(286802 'end of statement') const curDomain[286811] "const"(286809 call chpl__buildDomainExpr(286806 call chpl_build_bounded_range binStart[286679] binEnd[286709]))(286814 'end of statement') const intersect[286819] "const"(286818 call curDomain[286811] localSubdomain[286799])(286822 'end of statement')
                        if(286838 call _cond_test(286825 call == curDomain[286811] intersect[286819]))
                        {(286829 call = isOnOneLocale[286755] 1)(286835 call = theLocaleId[286763] tid[286888])
                        }
                      } label _continueLabel[286847] _indexOfInterest[286842] _iterator[286843]
                    } label _breakLabel[286848]
                  }
                  if(286951 call _cond_test isOnOneLocale[286755])
                  {(286928 call(286915 call .(286912 call .(286911 call(286906 call . state[284165] c"localTasks") theLocaleId[286763]) c"localTasks") c"append")(286918 'new'(286926 call TwoArraySortTask[279429] binStart[286679] binSize[286720] binStartBit[286746] 1 1)))
                  }
                  {(286948 call(286935 call .(286932 call . state[284165] c"distTasks") c"append")(286938 'new'(286946 call TwoArraySortTask[279429] binStart[286679] binSize[286720] binStartBit[286746] 1 1)))
                  }
                }
              } label _continueLabel[286964] _indexOfInterest[286959] _iterator[286960]
            } label _breakLabel[286965]
          }
        } label _continueLabel[286996](287013 'move' tmp[286993](287002 call _cond_test(287004 call !(287012 call(287006 call .(287008 call . state[284165] c"distTasks") c"isEmpty"))))) tmp[286993]
      } label _breakLabel[286997]
    }
    { unknown tmpIter[287292] "expr temp" "maybe ref" "no copy" "temp"(287295 'move' tmpIter[287292](287047 call _build_tuple(287042 call(287038 call . A[284155] c"targetLocales"))(287045 call chpl_build_low_bounded_range 0))) unknown isRngDomArr[287654] "maybe param" "temp"(287669 'move' isRngDomArr[287654](287667 call ||(287656 call isBoundedRange tmpIter[287292])(287665 call ||(287659 call isDomain tmpIter[287292])(287662 call isArray tmpIter[287292]))))
      if isRngDomArr[287654]
      { const _coforallCount[287498] "const" "end count" "temp"(287577 'move' _coforallCount[287498](287574 call _endCountAlloc 0)) unknown numTasks[287499] "temp"(287561 'move' numTasks[287499](287557 call . tmpIter[287292] c"size"))(287552 call _upEndCount _coforallCount[287498] 0 numTasks[287499]) unknown _indexOfInterest[287505] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[287506] "expr temp" "temp"(287515 'move' _iterator[287506](287513 call _getIteratorZip tmpIter[287292]))
        Defer
        {
          {(287545 call _freeIterator _iterator[287506])
          }
        }
        { scopeless type(287520 'move' _indexOfInterest[287505](287517 call iteratorIndex _iterator[287506]))
        }
        ForLoop[287507]
        {(287525 call _check_tuple_var_decl _indexOfInterest[287505] 2) unknown loc[287531] "coforall index var" "index var" "insert auto destroy"(287533 'move' loc[287531](287529 call _indexOfInterest[287505] 0)) unknown tid[287538] "coforall index var" "index var" "insert auto destroy"(287540 'move' tid[287538](287536 call _indexOfInterest[287505] 1)) const tmp[287301] "const" "temp"(287303 'move' tmp[287301](287305 'deref'(287306 '_wide_get_locale' loc[287531])))
          {
            { unknown myTasks[287314](287316 call .(287321 call(287318 call . state[284165] c"localTasks") tid[287538]) c"localTasks")(287325 'end of statement') unknown baseCaseSize[287327](287329 call . state[284165] c"baseCaseSize")(287333 'end of statement') unknown compat[287335] "ref var"(287337 call .(287342 call(287339 call . state[284165] c"perLocale") tid[287538]) c"compat")(287346 'end of statement')
              { unknown _indexOfInterest[287348] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[287350] "expr temp" "temp"(287352 'move' _iterator[287350](287355 call _getIterator myTasks[287314]))
                Defer
                {
                  {(287359 call _freeIterator _iterator[287350])
                  }
                }
                { scopeless type(287363 'move' _indexOfInterest[287348](287366 call iteratorIndex _iterator[287350]))
                }
                ForLoop[287368]
                { unknown task[287371] "index var" "insert auto destroy"(287373 'move' task[287371] _indexOfInterest[287348])
                  { const taskEnd[287378] "const"(287380 call -(287382 call +(287384 call . task[287371] c"start")(287388 call . task[287371] c"size")) 1)(287393 'end of statement') const curDomain[287395] "const"(287397 call chpl__buildDomainExpr(287399 call chpl_build_bounded_range(287401 call . task[287371] c"start") taskEnd[287378]))(287406 'end of statement')
                    if(287408 call _cond_test(287410 call > n[284330] baseCaseSize[287327]))
                    {(287421 call(287415 call .(287417 call . compat[287335] c"bigTasks") c"clear"))(287429 call(287423 call .(287425 call . compat[287335] c"smallTasks") c"clear"))(287431 call partitioningSortWithScratchSpace(287433 call . task[287371] c"start") taskEnd[287378](287441 call(287438 call . A[284155] c"localSlice") curDomain[287395])(287447 call(287444 call . Scratch[284161] c"localSlice") curDomain[287395]) compat[287335] criterion[284168](287452 call . task[287371] c"startbit"))
                    }
                    {(287460 call shellSort module=[255] ShellSort[273610](287465 call(287462 call . A[284155] c"localSlice") curDomain[287395]) criterion[284168](start =(287469 call . task[287371] c"start"))(end = taskEnd[287378]))(364783 'referenced modules list' ShellSort[273610])
                    }
                    if(287477 call _cond_test debug[279309])
                    {(287481 call writef "after recursive sorts, dst is %xt\n"(287484 call A[284155](287486 call chpl_build_bounded_range(287488 call . task[287371] c"start") taskEnd[287378])))
                    }
                  } label _continueLabel[287493] _indexOfInterest[287348] _iterator[287350]
                } label _breakLabel[287495]
              }
            }(287500 call _downEndCount _coforallCount[287498] nil[44])(287309 'coforall on block' 0 tmp[287301])(287297 'actuals list' tiMarkRef[294] state[284165])
          } label _continueLabel[287510] _indexOfInterest[287505] _iterator[287506]
        } label _breakLabel[287511]
        Defer
        {
          {(287564 call _endCountFree _coforallCount[287498])
          }
        }(287569 call _waitEndCount _coforallCount[287498] 0 numTasks[287499])
      }
      { const _coforallCount[287581] "const" "end count" "temp"(287651 'move' _coforallCount[287581](287648 call _endCountAlloc 0)) unknown _indexOfInterest[287588] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[287589] "expr temp" "temp"(287598 'move' _iterator[287589](287596 call _getIteratorZip tmpIter[287292]))
        Defer
        {
          {(287628 call _freeIterator _iterator[287589])
          }
        }
        { scopeless type(287603 'move' _indexOfInterest[287588](287600 call iteratorIndex _iterator[287589]))
        }
        ForLoop[287590]
        {(287608 call _check_tuple_var_decl _indexOfInterest[287588] 2) unknown loc[287614] "coforall index var" "index var" "insert auto destroy"(287616 'move' loc[287614](287612 call _indexOfInterest[287588] 0)) unknown tid[287621] "coforall index var" "index var" "insert auto destroy"(287623 'move' tid[287621](287619 call _indexOfInterest[287588] 1))(287635 call _upEndCount _coforallCount[287581] 0) const tmp[287282] "const" "temp"(287284 'move' tmp[287282](287280 'deref'(287279 '_wide_get_locale' loc[287614])))
          {
            { unknown myTasks[287067](287064 call .(287063 call(287058 call . state[284165] c"localTasks") tid[287621]) c"localTasks")(287070 'end of statement') unknown baseCaseSize[287076](287073 call . state[284165] c"baseCaseSize")(287079 'end of statement') unknown compat[287090] "ref var"(287087 call .(287086 call(287081 call . state[284165] c"perLocale") tid[287621]) c"compat")(287093 'end of statement')
              { unknown _indexOfInterest[287246] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[287247] "expr temp" "temp"(287256 'move' _iterator[287247](287254 call _getIterator myTasks[287067]))
                Defer
                {
                  {(287272 call _freeIterator _iterator[287247])
                  }
                }
                { scopeless type(287261 'move' _indexOfInterest[287246](287258 call iteratorIndex _iterator[287247]))
                }
                ForLoop[287248]
                { unknown task[287265] "index var" "insert auto destroy"(287267 'move' task[287265] _indexOfInterest[287246])
                  { const taskEnd[287109] "const"(287107 call -(287104 call +(287097 call . task[287265] c"start")(287101 call . task[287265] c"size")) 1)(287112 'end of statement') const curDomain[287124] "const"(287122 call chpl__buildDomainExpr(287119 call chpl_build_bounded_range(287115 call . task[287265] c"start") taskEnd[287109]))(287127 'end of statement')
                    if(287205 call _cond_test(287130 call > n[284330] baseCaseSize[287076]))
                    {(287140 call(287136 call .(287133 call . compat[287090] c"bigTasks") c"clear"))(287151 call(287147 call .(287144 call . compat[287090] c"smallTasks") c"clear"))(287180 call partitioningSortWithScratchSpace(287155 call . task[287265] c"start") taskEnd[287109](287166 call(287161 call . A[284155] c"localSlice") curDomain[287124])(287173 call(287168 call . Scratch[284161] c"localSlice") curDomain[287124]) compat[287090] criterion[284168](287177 call . task[287265] c"startbit"))
                    }
                    {(287202 call shellSort module=[255] ShellSort[273610](287192 call(287187 call . A[284155] c"localSlice") curDomain[287124]) criterion[284168](start =(287196 call . task[287265] c"start"))(end = taskEnd[287109]))(364762 'referenced modules list' ShellSort[273610])
                    }
                    if(287242 call _cond_test debug[279309])
                    {(287239 call writef "after recursive sorts, dst is %xt\n"(287238 call A[284155](287235 call chpl_build_bounded_range(287231 call . task[287265] c"start") taskEnd[287109])))
                    }
                  } label _continueLabel[287251] _indexOfInterest[287246] _iterator[287247]
                } label _breakLabel[287252]
              }
            }(287583 call _downEndCount _coforallCount[287581] nil[44])(287287 'coforall on block' 0 tmp[287282])(287053 'actuals list' tiMarkRef[294] state[284165])
          } label _continueLabel[287593] _indexOfInterest[287588] _iterator[287589]
        } label _breakLabel[287594]
        Defer
        {
          {(287639 call _endCountFree _coforallCount[287581])
          }
        }(287644 call _waitEndCount _coforallCount[287581] 0)
      }
    }
  }
  { scopeless type void[4]
  }(355491 'used modules list'(353153 'use' ChapelStandard[20267])(279286 'use' BlockDist[331404])(279295 'use' MSBRadixSort[288083])(279299 'use' List[298312] 'only' list)(279306 'import' Sort[268056].{ShellSort, RadixSortHelp, SampleSortHelp, ShallowCopy}))
}