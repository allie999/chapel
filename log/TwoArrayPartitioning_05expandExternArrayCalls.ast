AST dump for TwoArrayPartitioning after pass expandExternArrayCalls.
Module use list: 

{
  (353086 'use' ChapelStandard)
  (279219 'use' BlockDist)
  (279228 'use'(279225 call . super c"MSBRadixSort"))
  (279232 'use' List 'only' list)
  (279239 'import' Sort.{ShellSort, RadixSortHelp, SampleSortHelp, ShallowCopy})
  { scopeless
    unknown debug[279242] "param" "private" 0
    (279245 'end of statement')
  }
  { scopeless
    unknown maxBuckets[279249] "param" 512
    (279252 'end of statement')
  }
  type TwoArraySortTask[279362] unknown start[279255] int[13] unknown size[279260] int[13] unknown startbit[279265] int[13] unknown inA[279270] bool[10] unknown doSort[279275] bool[10] function TwoArraySortTask[279362].init[279281](arg _mt[279366]:_MT[238], arg this[279364]:TwoArraySortTask[279362]) : _unknown[51] "method" "primary method"
  {
  } function TwoArraySortTask[279362].init[279292](arg _mt[279370]:_MT[238], arg this[279368]:TwoArraySortTask[279362], arg start[279289] :
  int[13], arg size[279295] :
  int[13], arg startbit[279299] :
  int[13], arg inA[279303] :
  bool[10], arg doSort[279307] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (279317 call =(279313 call . this c"start") start)
    (279326 call =(279322 call . this c"size") size)
    (279336 call =(279332 call . this c"startbit") startbit)
    (279346 call =(279342 call . this c"inA") inA)
    (279356 call =(279352 call . this c"doSort") doSort)
  }
  type TwoArrayBucketizerPerTaskState[279391] unknown localCounts[279386](279384 call chpl__buildArrayRuntimeType(279382 call chpl__ensureDomainExpr(279378 call #(279375 call chpl_build_low_bounded_range 0) maxBuckets)) int[13])
  type TwoArrayBucketizerSharedState[279561](?) unknown nTasks[279408](279405 IfExpr (279398 call > dataParTasksPerLocale 0) then
  { scopeless
    dataParTasksPerLocale
  } else
  { scopeless
    (279402 call . here c"maxTaskPar")
  } ) int[13] unknown countsSize[279417](279415 call * nTasks maxBuckets) int[13] unknown bucketizer[279421] unknown globalCounts[279437](279435 call chpl__buildArrayRuntimeType(279433 call chpl__ensureDomainExpr(279429 call #(279426 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown globalEnds[279453](279451 call chpl__buildArrayRuntimeType(279449 call chpl__ensureDomainExpr(279445 call #(279442 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown localState[279469](279467 call chpl__buildArrayRuntimeType(279465 call chpl__ensureDomainExpr(279461 call #(279458 call chpl_build_low_bounded_range 0) nTasks)) TwoArrayBucketizerPerTaskState) unknown counts[279485](279483 call chpl__buildArrayRuntimeType(279481 call chpl__ensureDomainExpr(279477 call #(279474 call chpl_build_low_bounded_range 0) maxBuckets)) int[13]) unknown ends[279501](279499 call chpl__buildArrayRuntimeType(279497 call chpl__ensureDomainExpr(279493 call #(279490 call chpl_build_low_bounded_range 0) maxBuckets)) int[13]) unknown outputInA[279517](279515 call chpl__buildArrayRuntimeType(279513 call chpl__ensureDomainExpr(279509 call #(279506 call chpl_build_low_bounded_range 0) maxBuckets)) bool[10]) unknown bigTasks[279525](279524 call list TwoArraySortTask) unknown smallTasks[279533](279532 call list TwoArraySortTask) unknown baseCaseSize[279539] 16 int[13] unknown sequentialSizePerTask[279547] 4096 int[13] unknown endbit[279556](279555 call max int[13]) int[13]
  type TwoArrayDistributedBucketizerStatePerLocale[279618](?) unknown bucketizerType[279565] "type variable" unknown compat[279572](279571 call TwoArrayBucketizerSharedState bucketizerType) unknown countsSize[279581](279579 call * numLocales maxBuckets) int[13] unknown globalCounts[279597](279595 call chpl__buildArrayRuntimeType(279593 call chpl__ensureDomainExpr(279589 call #(279586 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown globalEnds[279613](279611 call chpl__buildArrayRuntimeType(279609 call chpl__ensureDomainExpr(279605 call #(279602 call chpl_build_low_bounded_range 0) countsSize)) int[13])
  type TasksForLocale[279631] unknown localTasks[279626](279625 call list TwoArraySortTask)
  type TwoArrayDistributedBucketizerSharedState[279843](?) unknown bucketizerType[279635] "type variable" unknown numLocales[279639] int[13] unknown perLocale[279656](279655 call newBlockArr(279648 call #(279645 call chpl_build_low_bounded_range 0) numLocales)(279654 call TwoArrayDistributedBucketizerStatePerLocale bucketizerType)) const baseCaseSize[279661] "const" int[13] const endbit[279670] "const"(279669 call max int[13]) int[13] const countsSize[279679] "const"(279677 call * numLocales maxBuckets) int[13] unknown globalCounts[279695](279693 call chpl__buildArrayRuntimeType(279691 call chpl__ensureDomainExpr(279687 call #(279684 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown globalEnds[279711](279709 call chpl__buildArrayRuntimeType(279707 call chpl__ensureDomainExpr(279703 call #(279700 call chpl_build_low_bounded_range 0) countsSize)) int[13]) unknown distTasks[279719](279718 call list TwoArraySortTask) unknown localTasks[279735](279733 call chpl__buildArrayRuntimeType(279731 call chpl__ensureDomainExpr(279727 call #(279724 call chpl_build_low_bounded_range 0) numLocales)) TasksForLocale) function TwoArrayDistributedBucketizerSharedState[279843](?).postinit[279741](arg _mt[279847]:_MT[238], arg this[279845]:TwoArrayDistributedBucketizerSharedState[279843](?)) : _unknown[51] "method" "primary method"
  {
    {
      unknown _indexOfInterest[279806] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[279807] "expr temp" "temp"
      (279816 'move' _iterator[279807](279814 call _getIterator perLocale))
      Defer
      {
        {
          (279832 call _freeIterator _iterator[279807])
        }
      }
      { scopeless type
        (279821 'move' _indexOfInterest[279806](279818 call iteratorIndex _iterator[279807]))
      }
      ForLoop[279808]
      {
        unknown p[279825] "index var" "insert auto destroy"
        (279827 'move' p[279825] _indexOfInterest[279806])
        {
          (279757 call =(279753 call .(279748 call . p c"compat") c"baseCaseSize") baseCaseSize)
          (279771 call =(279767 call .(279762 call . p c"compat") c"endbit") endbit)
          (279788 call assert(279785 call >(279781 call .(279776 call . p c"compat") c"nTasks") 0))
          (279804 call assert(279801 call >(279797 call .(279792 call . p c"compat") c"countsSize") 0))
        }
        label _continueLabel[279811]
        _indexOfInterest[279806]
        _iterator[279807]
      }
      label _breakLabel[279812]
    }
  }
  function bucketize[279856](arg start_n[279853] :
  int[13], arg end_n[279859] :
  int[13], arg dst[279865] :
  (279862 call chpl__buildArrayRuntimeType nil[44]), arg src[279871] :
  (279868 call chpl__buildArrayRuntimeType nil[44]), ref arg state[279875] :
  TwoArrayBucketizerSharedState, arg criterion[279878]:_any[178](?), arg startbit[279881] :
  int[13]) : _unknown[51]
  {
    if(279928 call _cond_test debug)
    {
      { scopeless
        (279926 call writeln "bucketize "(279906 call chpl_build_bounded_range start_n end_n) " startbit=" startbit)
      }
    }
    { scopeless
      const nBuckets[279945] "const"(279944 call(279940 call .(279937 call . state c"bucketizer") c"getNumBuckets"))
      (279948 'end of statement')
    }
    { scopeless
      const n[279956] "const"(279954 call +(279951 call - end_n start_n) 1)
      (279959 'end of statement')
    }
    { scopeless
      const nTasks[279975] "const"(279972 IfExpr (279965 call >= n(279962 call . state c"nTasks")) then
      { scopeless
        (279968 call . state c"nTasks")
      } else
      { scopeless
        1
      } )
      (279978 'end of statement')
    }
    (279985 call assert(279982 call > nTasks 0))
    if(280004 call _cond_test(279989 call == n 0))
    {
      (279998 call =(279994 call . state c"counts") 0)
      (280002 return)
    }
    { scopeless
      const countsSize[280012] "const"(280010 call * nTasks nBuckets)
      (280015 'end of statement')
    }
    { scopeless
      const blockSize[280021] "const"(280020 call divceil n nTasks)
      (280024 'end of statement')
    }
    { scopeless
      const nBlocks[280030] "const"(280029 call divceil n blockSize)
      (280033 'end of statement')
    }
    {
      unknown tmpIter[280352] "expr temp" "maybe ref" "no copy" "temp"
      (280355 'move' tmpIter[280352](280039 call #(280036 call chpl_build_low_bounded_range 0) nTasks))
      unknown isRngDomArr[280723] "maybe param" "temp"
      (280738 'move' isRngDomArr[280723](280736 call ||(280725 call isBoundedRange tmpIter[280352])(280734 call ||(280728 call isDomain tmpIter[280352])(280731 call isArray tmpIter[280352]))))
      if isRngDomArr[280723]
      {
        const _coforallCount[280590] "const" "end count" "temp"
        (280659 'move' _coforallCount[280590](280656 call _endCountAlloc 1))
        unknown numTasks[280591] "temp"
        (280643 'move' numTasks[280591](280639 call . tmpIter[280352] c"size"))
        (280634 call _upEndCount _coforallCount[280590] 1 numTasks[280591])
        (280631 call chpl_resetTaskSpawn numTasks[280591])
        unknown _indexOfInterest[280598] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[280599] "expr temp" "temp"
        (280608 'move' _iterator[280599](280606 call _getIterator tmpIter[280352]))
        Defer
        {
          {
            (280624 call _freeIterator _iterator[280599])
          }
        }
        { scopeless type
          (280613 'move' _indexOfInterest[280598](280610 call iteratorIndex _iterator[280599]))
        }
        ForLoop[280600]
        {
          unknown tid[280617] "coforall index var" "index var" "insert auto destroy"
          (280619 'move' tid[280617] _indexOfInterest[280598])
          {
            {
              { scopeless
                unknown start[280362](280364 call + start_n(280367 call * tid blockSize))
                (280371 'end of statement')
              }
              { scopeless
                unknown end[280373](280375 call -(280377 call + start blockSize) 1)
                (280382 'end of statement')
              }
              if(280384 call _cond_test(280386 call > end end_n))
              {
                (280391 call = end end_n)
              }
              if(280396 call _cond_test debug)
              {
                { scopeless
                  (280401 call writeln "tid " tid " considering "(280406 call chpl_build_bounded_range start end))
                }
              }
              { scopeless
                unknown counts[280411] "ref var"(280413 call .(280418 call(280415 call . state c"localState") tid) c"localCounts")
                (280422 'end of statement')
              }
              {
                unknown _indexOfInterest[280424] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280426] "expr temp" "temp"
                (280428 'move' _iterator[280426](280431 call _getIterator(280433 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (280438 call _freeIterator _iterator[280426])
                  }
                }
                { scopeless type
                  (280442 'move' _indexOfInterest[280424](280445 call iteratorIndex _iterator[280426]))
                }
                ForLoop[280447]
                {
                  unknown bin[280450] "index var" "insert auto destroy"
                  (280452 'move' bin[280450] _indexOfInterest[280424])
                  {
                    (280457 call =(280459 call counts bin) 0)
                  }
                  label _continueLabel[280462]
                  _indexOfInterest[280424]
                  _iterator[280426]
                }
                label _breakLabel[280464]
              }
              {
                unknown _indexOfInterest[280467] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280469] "expr temp" "temp"
                (280471 'move' _iterator[280469](280474 call _getIterator(280482 call(280476 call .(280478 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (280490 call _freeIterator _iterator[280469])
                  }
                }
                { scopeless type
                  (280494 'move' _indexOfInterest[280467](280497 call iteratorIndex _iterator[280469]))
                }
                ForLoop[280499]
                {
                  (280503 call _check_tuple_var_decl _indexOfInterest[280467] 2)
                  unknown i[280506] "index var" "insert auto destroy"
                  (280508 'move' i[280506](280511 call _indexOfInterest[280467] 0))
                  unknown bin[280513] "index var" "insert auto destroy"
                  (280515 'move' bin[280513](280518 call _indexOfInterest[280467] 1))
                  {
                    (280522 call +=(280524 call counts bin) 1)
                  }
                  label _continueLabel[280527]
                  _indexOfInterest[280467]
                  _iterator[280469]
                }
                label _breakLabel[280529]
              }
              {
                unknown _indexOfInterest[280532] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280534] "expr temp" "temp"
                (280536 'move' _iterator[280534](280539 call _getIterator(280541 call vectorizeOnly(280543 call #(280545 call chpl_build_low_bounded_range 0) nBuckets))))
                Defer
                {
                  {
                    (280550 call _freeIterator _iterator[280534])
                  }
                }
                { scopeless type
                  (280554 'move' _indexOfInterest[280532](280557 call iteratorIndex _iterator[280534]))
                }
                ForLoop[280559]
                {
                  unknown bin[280562] "index var" "insert auto destroy"
                  (280564 'move' bin[280562] _indexOfInterest[280532])
                  {
                    (280569 call =(280574 call(280571 call . state c"globalCounts")(280576 call +(280578 call * bin nTasks) tid))(280583 call counts bin))
                  }
                  label _continueLabel[280585]
                  _indexOfInterest[280532]
                  _iterator[280534]
                }
                label _breakLabel[280587]
              }
            }
            (280593 call _downEndCount _coforallCount[280590] nil[44])
            (280592 'coforall loop')
            (280357 'actuals list' tiMarkRef[294] state)
          }
          label _continueLabel[280603]
          _indexOfInterest[280598]
          _iterator[280599]
        }
        label _breakLabel[280604]
        Defer
        {
          {
            (280646 call _endCountFree _coforallCount[280590])
          }
        }
        (280651 call _waitEndCount _coforallCount[280590] 1 numTasks[280591])
      }
      {
        const _coforallCount[280663] "const" "end count" "temp"
        (280720 'move' _coforallCount[280663](280717 call _endCountAlloc 1))
        unknown _indexOfInterest[280671] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[280672] "expr temp" "temp"
        (280681 'move' _iterator[280672](280679 call _getIterator tmpIter[280352]))
        Defer
        {
          {
            (280697 call _freeIterator _iterator[280672])
          }
        }
        { scopeless type
          (280686 'move' _indexOfInterest[280671](280683 call iteratorIndex _iterator[280672]))
        }
        ForLoop[280673]
        {
          unknown tid[280690] "coforall index var" "index var" "insert auto destroy"
          (280692 'move' tid[280690] _indexOfInterest[280671])
          (280704 call _upEndCount _coforallCount[280663] 1)
          {
            {
              { scopeless
                unknown start[280056](280054 call + start_n(280052 call * tid blockSize))
                (280059 'end of statement')
              }
              { scopeless
                unknown end[280068](280066 call -(280063 call + start blockSize) 1)
                (280071 'end of statement')
              }
              if(280082 call _cond_test(280074 call > end end_n))
              {
                (280078 call = end end_n)
              }
              if(280130 call _cond_test debug)
              {
                { scopeless
                  (280128 call writeln "tid " tid " considering "(280126 call chpl_build_bounded_range start end))
                }
              }
              { scopeless
                unknown counts[280149] "ref var"(280146 call .(280143 call(280138 call . state c"localState") tid) c"localCounts")
                (280152 'end of statement')
              }
              {
                unknown _indexOfInterest[280169] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280170] "expr temp" "temp"
                (280179 'move' _iterator[280170](280177 call _getIterator(280186 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (280202 call _freeIterator _iterator[280170])
                  }
                }
                { scopeless type
                  (280191 'move' _indexOfInterest[280169](280188 call iteratorIndex _iterator[280170]))
                }
                ForLoop[280171]
                {
                  unknown bin[280195] "index var" "insert auto destroy"
                  (280197 'move' bin[280195] _indexOfInterest[280169])
                  {
                    (280165 call =(280163 call counts bin) 0)
                  }
                  label _continueLabel[280174]
                  _indexOfInterest[280169]
                  _iterator[280170]
                }
                label _breakLabel[280175]
              }
              {
                unknown _indexOfInterest[280237] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280238] "expr temp" "temp"
                (280247 'move' _iterator[280238](280245 call _getIterator(280227 call(280218 call .(280215 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (280278 call _freeIterator _iterator[280238])
                  }
                }
                { scopeless type
                  (280253 'move' _indexOfInterest[280237](280250 call iteratorIndex _iterator[280238]))
                }
                ForLoop[280239]
                {
                  (280258 call _check_tuple_var_decl _indexOfInterest[280237] 2)
                  unknown i[280264] "index var" "insert auto destroy"
                  (280266 'move' i[280264](280262 call _indexOfInterest[280237] 0))
                  unknown bin[280271] "index var" "insert auto destroy"
                  (280273 'move' bin[280271](280269 call _indexOfInterest[280237] 1))
                  {
                    (280233 call +=(280231 call counts bin) 1)
                  }
                  label _continueLabel[280242]
                  _indexOfInterest[280237]
                  _iterator[280238]
                }
                label _breakLabel[280243]
              }
              {
                unknown _indexOfInterest[280318] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[280319] "expr temp" "temp"
                (280328 'move' _iterator[280319](280326 call _getIterator(280294 call vectorizeOnly(280291 call #(280288 call chpl_build_low_bounded_range 0) nBuckets))))
                Defer
                {
                  {
                    (280345 call _freeIterator _iterator[280319])
                  }
                }
                { scopeless type
                  (280334 'move' _indexOfInterest[280318](280331 call iteratorIndex _iterator[280319]))
                }
                ForLoop[280320]
                {
                  unknown bin[280338] "index var" "insert auto destroy"
                  (280340 'move' bin[280338] _indexOfInterest[280318])
                  {
                    (280314 call =(280309 call(280298 call . state c"globalCounts")(280306 call +(280303 call * bin nTasks) tid))(280313 call counts bin))
                  }
                  label _continueLabel[280323]
                  _indexOfInterest[280318]
                  _iterator[280319]
                }
                label _breakLabel[280324]
              }
            }
            (280666 call _downEndCount _coforallCount[280663] nil[44])
            (280665 'coforall loop')
            (280046 'actuals list' tiMarkRef[294] state)
          }
          label _continueLabel[280676]
          _indexOfInterest[280671]
          _iterator[280672]
        }
        label _breakLabel[280677]
        Defer
        {
          {
            (280708 call _endCountFree _coforallCount[280663])
          }
        }
        (280713 call _waitEndCount _coforallCount[280663] 1)
      }
    }
    (280790 call =(280745 call . state c"globalEnds")(280788 call +(280786 call function chpl__scan3[280753](arg chpl_toScan[280755]:_any[178](?)) : _unknown[51] "compiler nested function" "ReduceScanOp" "fn returns iterator"
    {
      unknown chpl_eltType[280757] "maybe type" "temp"
      { scopeless type
        (280761 'move' chpl_eltType[280757](280763 'typeof'(280765 call chpl__initCopy(280767 call iteratorIndex(280769 call _getIterator chpl_toScan[280755])))))
      }
      const tmp[280758] "const" "temp"
      (280778 'move' tmp[280758](280777 'new'(280776 call SumReduceScanOp(eltType = chpl_eltType[280757])(_chpl_manager = unmanaged[220](?)))))
      (280780 return(280782 call chpl__scanIterator tmp[280758] chpl_toScan[280755]))
    }(280750 call . state c"globalCounts")) start_n))
    if(280992 call _cond_test debug)
    {
      {
        unknown _indexOfInterest[280951] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[280952] "expr temp" "temp"
        (280961 'move' _iterator[280952](280959 call _getIterator(280968 call chpl_direct_counted_range_iter 0 nBuckets)))
        Defer
        {
          {
            (280984 call _freeIterator _iterator[280952])
          }
        }
        { scopeless type
          (280973 'move' _indexOfInterest[280951](280970 call iteratorIndex _iterator[280952]))
        }
        ForLoop[280953]
        {
          unknown bin[280977] "index var" "insert auto destroy"
          (280979 'move' bin[280977] _indexOfInterest[280951])
          {
            {
              unknown _indexOfInterest[280910] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[280911] "expr temp" "temp"
              (280920 'move' _iterator[280911](280918 call _getIterator(280927 call chpl_direct_counted_range_iter 0 nTasks)))
              Defer
              {
                {
                  (280943 call _freeIterator _iterator[280911])
                }
              }
              { scopeless type
                (280932 'move' _indexOfInterest[280910](280929 call iteratorIndex _iterator[280911]))
              }
              ForLoop[280912]
              {
                unknown tid[280936] "index var" "insert auto destroy"
                (280938 'move' tid[280936] _indexOfInterest[280910])
                {
                  { scopeless
                    unknown gb[280815](280813 call +(280810 call * bin nTasks) tid)
                    (280818 'end of statement')
                  }
                  if(280906 call _cond_test(280828 call !=(280826 call(280821 call . state c"globalCounts") gb) 0))
                  {
                    (280903 call writeln "tid " tid " count[" bin "] = "(280875 call(280870 call . state c"globalCounts") gb) " end = "(280901 call -(280899 call(280894 call . state c"globalEnds") gb) 1))
                  }
                }
                label _continueLabel[280915]
                _indexOfInterest[280910]
                _iterator[280911]
              }
              label _breakLabel[280916]
            }
          }
          label _continueLabel[280956]
          _indexOfInterest[280951]
          _iterator[280952]
        }
        label _breakLabel[280957]
      }
    }
    {
      unknown tmpIter[281355] "expr temp" "maybe ref" "no copy" "temp"
      (281358 'move' tmpIter[281355](281001 call #(280998 call chpl_build_low_bounded_range 0) nTasks))
      unknown isRngDomArr[281738] "maybe param" "temp"
      (281753 'move' isRngDomArr[281738](281751 call ||(281740 call isBoundedRange tmpIter[281355])(281749 call ||(281743 call isDomain tmpIter[281355])(281746 call isArray tmpIter[281355]))))
      if isRngDomArr[281738]
      {
        const _coforallCount[281605] "const" "end count" "temp"
        (281674 'move' _coforallCount[281605](281671 call _endCountAlloc 1))
        unknown numTasks[281606] "temp"
        (281658 'move' numTasks[281606](281654 call . tmpIter[281355] c"size"))
        (281649 call _upEndCount _coforallCount[281605] 1 numTasks[281606])
        (281646 call chpl_resetTaskSpawn numTasks[281606])
        unknown _indexOfInterest[281613] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[281614] "expr temp" "temp"
        (281623 'move' _iterator[281614](281621 call _getIterator tmpIter[281355]))
        Defer
        {
          {
            (281639 call _freeIterator _iterator[281614])
          }
        }
        { scopeless type
          (281628 'move' _indexOfInterest[281613](281625 call iteratorIndex _iterator[281614]))
        }
        ForLoop[281615]
        {
          unknown tid[281632] "coforall index var" "index var" "insert auto destroy"
          (281634 'move' tid[281632] _indexOfInterest[281613])
          {
            {
              { scopeless
                unknown start[281365](281367 call + start_n(281370 call * tid blockSize))
                (281374 'end of statement')
              }
              { scopeless
                unknown end[281376](281378 call -(281380 call + start blockSize) 1)
                (281385 'end of statement')
              }
              if(281387 call _cond_test(281389 call > end end_n))
              {
                (281394 call = end end_n)
              }
              { scopeless
                unknown nextOffsets[281399] "ref var"(281401 call .(281406 call(281403 call . state c"localState") tid) c"localCounts")
                (281410 'end of statement')
              }
              {
                unknown _indexOfInterest[281412] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[281414] "expr temp" "temp"
                (281416 'move' _iterator[281414](281419 call _getIterator(281421 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (281426 call _freeIterator _iterator[281414])
                  }
                }
                { scopeless type
                  (281430 'move' _indexOfInterest[281412](281433 call iteratorIndex _iterator[281414]))
                }
                ForLoop[281435]
                {
                  unknown bin[281438] "index var" "insert auto destroy"
                  (281440 'move' bin[281438] _indexOfInterest[281412])
                  {
                    { scopeless
                      unknown globalBin[281445](281447 call +(281449 call * bin nTasks) tid)
                      (281454 'end of statement')
                    }
                    (281456 call =(281458 call nextOffsets bin)(281476 IfExpr (281461 call > globalBin 0) then
                    { scopeless
                      (281469 call(281466 call . state c"globalEnds")(281471 call - globalBin 1))
                    } else
                    { scopeless
                      start_n
                    } ))
                    if(281478 call _cond_test debug)
                    {
                      if(281482 call _cond_test(281484 call !=(281489 call(281486 call . state c"globalCounts") globalBin) 0))
                      {
                        (281494 call writeln "tid " tid " nextOffsets[" bin "] = "(281501 call nextOffsets bin))
                      }
                    }
                  }
                  label _continueLabel[281505]
                  _indexOfInterest[281412]
                  _iterator[281414]
                }
                label _breakLabel[281507]
              }
              {
                unknown _indexOfInterest[281510] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[281512] "expr temp" "temp"
                (281514 'move' _iterator[281512](281517 call _getIterator(281525 call(281519 call .(281521 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (281533 call _freeIterator _iterator[281512])
                  }
                }
                { scopeless type
                  (281537 'move' _indexOfInterest[281510](281540 call iteratorIndex _iterator[281512]))
                }
                ForLoop[281542]
                {
                  (281546 call _check_tuple_var_decl _indexOfInterest[281510] 2)
                  unknown i[281549] "index var" "insert auto destroy"
                  (281551 'move' i[281549](281554 call _indexOfInterest[281510] 0))
                  unknown bin[281556] "index var" "insert auto destroy"
                  (281558 'move' bin[281556](281561 call _indexOfInterest[281510] 1))
                  {
                    { scopeless
                      unknown next[281565] "ref var"(281567 call nextOffsets bin)
                      (281570 'end of statement')
                    }
                    if(281572 call _cond_test debug)
                    {
                      (281576 call writeln "tid " tid " dst[" next "] = src[" i "] bin " bin)
                    }
                    (281590 call(281587 call . ShallowCopy c"shallowCopy") dst next src i 1)
                    (281597 call += next 1)
                  }
                  label _continueLabel[281600]
                  _indexOfInterest[281510]
                  _iterator[281512]
                }
                label _breakLabel[281602]
              }
            }
            (281608 call _downEndCount _coforallCount[281605] nil[44])
            (281607 'coforall loop')
            (281360 'actuals list' tiMarkRef[294] state)
          }
          label _continueLabel[281618]
          _indexOfInterest[281613]
          _iterator[281614]
        }
        label _breakLabel[281619]
        Defer
        {
          {
            (281661 call _endCountFree _coforallCount[281605])
          }
        }
        (281666 call _waitEndCount _coforallCount[281605] 1 numTasks[281606])
      }
      {
        const _coforallCount[281678] "const" "end count" "temp"
        (281735 'move' _coforallCount[281678](281732 call _endCountAlloc 1))
        unknown _indexOfInterest[281686] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[281687] "expr temp" "temp"
        (281696 'move' _iterator[281687](281694 call _getIterator tmpIter[281355]))
        Defer
        {
          {
            (281712 call _freeIterator _iterator[281687])
          }
        }
        { scopeless type
          (281701 'move' _indexOfInterest[281686](281698 call iteratorIndex _iterator[281687]))
        }
        ForLoop[281688]
        {
          unknown tid[281705] "coforall index var" "index var" "insert auto destroy"
          (281707 'move' tid[281705] _indexOfInterest[281686])
          (281719 call _upEndCount _coforallCount[281678] 1)
          {
            {
              { scopeless
                unknown start[281018](281016 call + start_n(281014 call * tid blockSize))
                (281021 'end of statement')
              }
              { scopeless
                unknown end[281030](281028 call -(281025 call + start blockSize) 1)
                (281033 'end of statement')
              }
              if(281044 call _cond_test(281036 call > end end_n))
              {
                (281040 call = end end_n)
              }
              { scopeless
                unknown nextOffsets[281058] "ref var"(281055 call .(281054 call(281049 call . state c"localState") tid) c"localCounts")
                (281061 'end of statement')
              }
              {
                unknown _indexOfInterest[281156] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[281157] "expr temp" "temp"
                (281166 'move' _iterator[281157](281164 call _getIterator(281173 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (281189 call _freeIterator _iterator[281157])
                  }
                }
                { scopeless type
                  (281178 'move' _indexOfInterest[281156](281175 call iteratorIndex _iterator[281157]))
                }
                ForLoop[281158]
                {
                  unknown bin[281182] "index var" "insert auto destroy"
                  (281184 'move' bin[281182] _indexOfInterest[281156])
                  {
                    { scopeless
                      unknown globalBin[281076](281074 call +(281071 call * bin nTasks) tid)
                      (281079 'end of statement')
                    }
                    (281103 call =(281084 call nextOffsets bin)(281100 IfExpr (281087 call > globalBin 0) then
                    { scopeless
                      (281098 call(281090 call . state c"globalEnds")(281095 call - globalBin 1))
                    } else
                    { scopeless
                      start_n
                    } ))
                    if(281152 call _cond_test debug)
                    {
                      if(281147 call _cond_test(281115 call !=(281113 call(281108 call . state c"globalCounts") globalBin) 0))
                      {
                        (281144 call writeln "tid " tid " nextOffsets[" bin "] = "(281143 call nextOffsets bin))
                      }
                    }
                  }
                  label _continueLabel[281161]
                  _indexOfInterest[281156]
                  _iterator[281157]
                }
                label _breakLabel[281162]
              }
              {
                unknown _indexOfInterest[281307] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[281308] "expr temp" "temp"
                (281317 'move' _iterator[281308](281315 call _getIterator(281214 call(281205 call .(281202 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (281348 call _freeIterator _iterator[281308])
                  }
                }
                { scopeless type
                  (281323 'move' _indexOfInterest[281307](281320 call iteratorIndex _iterator[281308]))
                }
                ForLoop[281309]
                {
                  (281328 call _check_tuple_var_decl _indexOfInterest[281307] 2)
                  unknown i[281334] "index var" "insert auto destroy"
                  (281336 'move' i[281334](281332 call _indexOfInterest[281307] 0))
                  unknown bin[281341] "index var" "insert auto destroy"
                  (281343 'move' bin[281341](281339 call _indexOfInterest[281307] 1))
                  {
                    { scopeless
                      unknown next[281219] "ref var"(281218 call nextOffsets bin)
                      (281222 'end of statement')
                    }
                    if(281286 call _cond_test debug)
                    {
                      (281283 call writeln "tid " tid " dst[" next "] = src[" i "] bin " bin)
                    }
                    (281300 call(281291 call . ShallowCopy c"shallowCopy") dst next src i 1)
                    (281304 call += next 1)
                  }
                  label _continueLabel[281312]
                  _indexOfInterest[281307]
                  _iterator[281308]
                }
                label _breakLabel[281313]
              }
            }
            (281681 call _downEndCount _coforallCount[281678] nil[44])
            (281680 'coforall loop')
            (281008 'actuals list' tiMarkRef[294] state)
          }
          label _continueLabel[281691]
          _indexOfInterest[281686]
          _iterator[281687]
        }
        label _breakLabel[281692]
        Defer
        {
          {
            (281723 call _endCountFree _coforallCount[281678])
          }
        }
        (281728 call _waitEndCount _coforallCount[281678] 1)
      }
    }
    { scopeless
      unknown counts[281761] "ref var"(281758 call . state c"counts")
      (281764 'end of statement')
    }
    Forall {
      induction variables:
        
        unknown bin[281852] "index var" "insert auto destroy"
      iterated expressions:
        (281770 call #(281767 call chpl_build_low_bounded_range 0) nBuckets)
      shadow variables:
      other variables
        forall body
      {
        { scopeless
          unknown total[281773] 0
          (281776 'end of statement')
        }
        {
          unknown _indexOfInterest[281803] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[281804] "expr temp" "temp"
          (281813 'move' _iterator[281804](281811 call _getIterator(281820 call chpl_direct_counted_range_iter 0 nTasks)))
          Defer
          {
            {
              (281836 call _freeIterator _iterator[281804])
            }
          }
          { scopeless type
            (281825 'move' _indexOfInterest[281803](281822 call iteratorIndex _iterator[281804]))
          }
          ForLoop[281805]
          {
            unknown tid[281829] "index var" "insert auto destroy"
            (281831 'move' tid[281829] _indexOfInterest[281803])
            {
              (281799 call += total(281798 call(281787 call . state c"globalCounts")(281795 call +(281792 call * bin nTasks) tid)))
            }
            label _continueLabel[281808]
            _indexOfInterest[281803]
            _iterator[281804]
          }
          label _breakLabel[281809]
        }
        (281848 call =(281846 call counts bin) total)
      }
    }
  }
  function testBucketize[281864](arg start_n[281861] :
  int[13], arg end_n[281867] :
  int[13], arg dst[281873] :
  (281870 call chpl__buildArrayRuntimeType nil[44]), arg src[281879] :
  (281876 call chpl__buildArrayRuntimeType nil[44]), arg bucketizer[281882]:_any[178](?), arg criterion[281884]:_any[178](?), arg startbit[281887] :
  int[13]) : _unknown[51]
  {
    { scopeless
      unknown state[281896](281890 'new'(281895 call TwoArrayBucketizerSharedState(bucketizer = bucketizer)))
      (281899 'end of statement')
    }
    (281910 call bucketize start_n end_n dst src state criterion startbit)
    (281916 return(281913 call . state c"counts"))
  }
  function partitioningSortWithScratchSpaceHandleSampling[281926](arg start_n[281923] :
  int[13], arg end_n[281929] :
  int[13], arg A[281935] :
  (281932 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[281941] :
  (281938 call chpl__buildArrayRuntimeType nil[44]), ref arg state[281945] :
  TwoArrayBucketizerSharedState, arg criterion[281948]:_any[178](?), arg startbit[281951] :
  int[13]) : _unknown[51] "private"
  {
    if(282270 call _cond_test(281968 call isSubtype(281960 'typeof'(281957 call . state c"bucketizer"))(281965 call . SampleSortHelp c"SampleBucketizer")))
    {
      { scopeless
        unknown n[281976](281974 call -(281971 call + 1 end_n) start_n)
        (281979 'end of statement')
      }
      { scopeless
        unknown logNumBuckets[281990](281989 call(281984 call . SampleSortHelp c"computeLogBucketSize") n)
        (281993 'end of statement')
      }
      { scopeless
        unknown numBuckets[281998](281996 call << 1 logNumBuckets)
        (282001 'end of statement')
      }
      { scopeless
        unknown sampleStep[282012](282011 call(282005 call . SampleSortHelp c"chooseSampleStep") n logNumBuckets)
        (282015 'end of statement')
      }
      { scopeless
        unknown sampleSize[282023](282021 call -(282018 call * sampleStep numBuckets) 1)
        (282026 'end of statement')
      }
      if(282071 call _cond_test(282029 call >= sampleSize n))
      {
        if(282053 call _cond_test debug)
        {
          { scopeless
            (282051 call writeln "Reducing sample size because it was too big")
          }
        }
        (282068 call = sampleSize(282067 call max 1(282065 call / n 2)))
      }
      (282086 call(282078 call . SampleSortHelp c"putRandomSampleAtArrayStart") start_n end_n A sampleSize)
      if(282110 call _cond_test debug)
      {
        { scopeless
          (282108 call writeln "recursing to sort the sample")
        }
      }
      if(282165 call _cond_test(282120 call <= sampleSize(282118 call * 1024 1024)))
      {
        (282144 call msbRadixSort start_n(282130 call -(282127 call + start_n sampleSize) 1) A criterion startbit(282136 call . state c"endbit")(settings =(282139 'new'(282142 call MSBRadixSortSettings))))
      }
      {
        (282162 call partitioningSortWithScratchSpace start_n(282155 call -(282152 call + start_n sampleSize) 1) A Scratch state criterion startbit)
      }
      if(282191 call _cond_test debug)
      {
        (282188 call(282173 call . RadixSortHelp c"checkSorted") start_n(282183 call -(282180 call + start_n sampleSize) 1) A criterion startbit)
      }
      (282207 call createSplittersFromSample A(282199 call . state c"bucketizer") criterion start_n sampleSize sampleStep numBuckets)
      if(282266 call _cond_test debug)
      {
        (282233 call writeln "sample bucketizer "(282230 call . state c"bucketizer"))
        (282264 call writef "A %i %i A=%xt\n" start_n end_n(282263 call A(282260 call chpl_build_bounded_range start_n end_n)))
      }
    }
  }
  { scopeless type
    void[4]
  }
  function partitioningSortWithScratchSpace[282284](arg start_n[282281] :
  int[13], arg end_n[282287] :
  int[13], arg A[282293] :
  (282290 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[282299] :
  (282296 call chpl__buildArrayRuntimeType nil[44]), ref arg state[282303] :
  TwoArrayBucketizerSharedState, arg criterion[282306]:_any[178](?), arg startbit[282309] :
  int[13]) : _unknown[51]
  {
    if(282322 call _cond_test(282318 call > startbit(282315 call . state c"endbit")))
    {
      { scopeless
        (282320 return)
      }
    }
    if(282356 call _cond_test(282336 call <(282330 call - end_n start_n)(282333 call . state c"baseCaseSize")))
    {
      (282351 call(282341 call . ShellSort c"shellSort") A criterion(start = start_n)(end = end_n))
      (282354 return)
    }
    if(282401 call _cond_test debug)
    {
      (282384 call writeln "partitioningSortWithScratchSpace(" start_n "," end_n ")")
      (282399 call writef "A %i %i A=%xt\n" start_n end_n(282398 call A(282395 call chpl_build_bounded_range start_n end_n)))
    }
    { scopeless
      const n[282412] "const"(282410 call +(282407 call - end_n start_n) 1)
      (282415 'end of statement')
    }
    { scopeless
      const maxSequentialSize[282438] "const"(282437 call max(282422 call / n(282419 call . state c"nTasks"))(282435 call *(282426 call . state c"nTasks")(282432 call . state c"sequentialSizePerTask")))
      (282441 'end of statement')
    }
    (282463 call(282448 call .(282445 call . state c"bigTasks") c"append")(282451 'new'(282461 call TwoArraySortTask start_n n startbit(inA = 1)(doSort = 1))))
    (282477 call assert(282474 call ==(282470 call .(282467 call . state c"bigTasks") c"size") 1))
    (282493 call assert(282490 call ==(282486 call .(282483 call . state c"smallTasks") c"size") 0))
    {
      unknown tmp[283146] "temp"
      (283182 'move' tmp[283146](283171 call _cond_test(283173 call !(283181 call(283175 call .(283177 call . state c"bigTasks") c"isEmpty")))))
      WhileDo[283151]
      {
        {
          { scopeless
            const task[282517] "const"(282516 call(282512 call .(282507 call . state c"bigTasks") c"pop"))
            (282520 'end of statement')
          }
          { scopeless
            const taskEnd[282535] "const"(282533 call -(282530 call +(282523 call . task c"start")(282527 call . task c"size")) 1)
            (282538 'end of statement')
          }
          (282545 call assert(282541 call . task c"doSort"))
          if(282577 call _cond_test debug)
          {
            (282574 call writeln "doing big task "(282572 call chpl_build_bounded_range(282568 call . task c"start") taskEnd))
          }
          if(282739 call _cond_test(282582 call . task c"inA"))
          {
            (282600 call partitioningSortWithScratchSpaceHandleSampling(282587 call . task c"start") taskEnd A Scratch state criterion(282597 call . task c"startbit"))
            (282618 call bucketize(282605 call . task c"start") taskEnd Scratch A state criterion(282615 call . task c"startbit"))
            if(282658 call _cond_test debug)
            {
              (282655 call writef "pb %i %i Scratch=%xt\n"(282641 call . task c"start") taskEnd(282654 call Scratch(282651 call chpl_build_bounded_range(282647 call . task c"start") taskEnd)))
            }
          }
          {
            (282677 call partitioningSortWithScratchSpaceHandleSampling(282664 call . task c"start") taskEnd Scratch A state criterion(282674 call . task c"startbit"))
            (282695 call bucketize(282682 call . task c"start") taskEnd A Scratch state criterion(282692 call . task c"startbit"))
            if(282735 call _cond_test debug)
            {
              (282732 call writef "pb %i %i A=%xt\n"(282718 call . task c"start") taskEnd(282731 call A(282728 call chpl_build_bounded_range(282724 call . task c"start") taskEnd)))
            }
          }
          { scopeless
            const nowInA[282749] "const"(282747 call !(282744 call . task c"inA"))
            (282752 'end of statement')
          }
          (282804 call =(282756 call . state c"ends")(282802 call +(282797 call function chpl__scan4[282764](arg chpl_toScan[282766]:_any[178](?)) : _unknown[51] "compiler nested function" "ReduceScanOp" "fn returns iterator"
          {
            unknown chpl_eltType[282768] "maybe type" "temp"
            { scopeless type
              (282772 'move' chpl_eltType[282768](282774 'typeof'(282776 call chpl__initCopy(282778 call iteratorIndex(282780 call _getIterator chpl_toScan[282766])))))
            }
            const tmp[282769] "const" "temp"
            (282789 'move' tmp[282769](282788 'new'(282787 call SumReduceScanOp(eltType = chpl_eltType[282768])(_chpl_manager = unmanaged[220](?)))))
            (282791 return(282793 call chpl__scanIterator tmp[282769] chpl_toScan[282766]))
          }(282761 call . state c"counts"))(282799 call . task c"start")))
          { scopeless
            const nBuckets[282816] "const"(282815 call(282811 call .(282808 call . state c"bucketizer") c"getNumBuckets"))
            (282819 'end of statement')
          }
          {
            unknown _indexOfInterest[283106] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[283107] "expr temp" "temp"
            (283116 'move' _iterator[283107](283114 call _getIterator(283123 call chpl_direct_counted_range_iter 0 nBuckets)))
            Defer
            {
              {
                (283139 call _freeIterator _iterator[283107])
              }
            }
            { scopeless type
              (283128 'move' _indexOfInterest[283106](283125 call iteratorIndex _iterator[283107]))
            }
            ForLoop[283108]
            {
              unknown bin[283132] "index var" "insert auto destroy"
              (283134 'move' bin[283132] _indexOfInterest[283106])
              {
                { scopeless
                  const binSize[282834] "const"(282833 call(282828 call . state c"counts") bin)
                  (282837 'end of statement')
                }
                { scopeless
                  const binStart[282849] "const"(282847 call -(282845 call(282840 call . state c"ends") bin) binSize)
                  (282852 'end of statement')
                }
                { scopeless
                  const binEnd[282860] "const"(282858 call -(282855 call + binStart binSize) 1)
                  (282863 'end of statement')
                }
                { scopeless
                  const binStartBit[282879] "const"(282878 call(282870 call .(282865 call . state c"bucketizer") c"getNextStartBit")(282874 call . task c"startbit"))
                  (282882 'end of statement')
                }
                { scopeless
                  const sortit[282900] "const"(282899 call(282894 call .(282893 call(282889 call .(282884 call . state c"bucketizer") c"getBinsToRecursivelySort")) c"contains") bin)
                  (282903 'end of statement')
                }
                if(283101 call _cond_test(282906 call == binSize 0))
                {
                }
                {
                  { scopeless
                    if(283096 call _cond_test(282915 call &&(282910 call ! nowInA)(282913 call ! sortit)))
                    {
                      (282934 call(282921 call .(282918 call . state c"smallTasks") c"append")(282924 'new'(282932 call TwoArraySortTask binStart binSize binStartBit nowInA sortit)))
                    }
                    {
                      { scopeless
                        if(283092 call _cond_test(282954 call ||(282948 call ||(282942 call > binStartBit(282939 call . state c"endbit"))(282946 call >= binStart binEnd))(282952 call <= binSize maxSequentialSize)))
                        {
                          if(283008 call _cond_test(282961 call && debug(282959 call > binSize 0)))
                          {
                            (283005 call writeln "handling bin " bin " "(282986 call chpl_build_bounded_range binStart binEnd) " as small")
                          }
                          (283030 call(283017 call .(283014 call . state c"smallTasks") c"append")(283020 'new'(283028 call TwoArraySortTask binStart binSize binStartBit nowInA sortit)))
                        }
                        {
                          if(283068 call _cond_test(283037 call && debug(283035 call > binSize 0)))
                          {
                            (283065 call writeln "handling bin " bin " "(283046 call chpl_build_bounded_range binStart binEnd) " as big")
                          }
                          (283090 call(283077 call .(283074 call . state c"bigTasks") c"append")(283080 'new'(283088 call TwoArraySortTask binStart binSize binStartBit nowInA sortit)))
                        }
                      }
                    }
                  }
                }
              }
              label _continueLabel[283111]
              _indexOfInterest[283106]
              _iterator[283107]
            }
            label _breakLabel[283112]
          }
        }
        label _continueLabel[283149]
        (283166 'move' tmp[283146](283155 call _cond_test(283157 call !(283165 call(283159 call .(283161 call . state c"bigTasks") c"isEmpty")))))
        tmp[283146]
      }
      label _breakLabel[283150]
    }
    Forall {
      induction variables:
        
        unknown task[283329] "index var" "insert auto destroy"
      iterated expressions:
        (283187 call . state c"smallTasks")
      shadow variables:
      other variables
        forall body
      {
        { scopeless
          const size[283194] "const"(283191 call . task c"size")
          (283197 'end of statement')
        }
        { scopeless
          const taskEnd[283209] "const"(283207 call -(283204 call +(283200 call . task c"start") size) 1)
          (283212 'end of statement')
        }
        if(283324 call _cond_test(283215 call > size 0))
        {
          if(283242 call _cond_test(283221 call !(283218 call . task c"inA")))
          {
            (283239 call(283224 call . ShallowCopy c"shallowCopy") A(283230 call . task c"start") Scratch(283235 call . task c"start") size)
          }
          if(283285 call _cond_test debug)
          {
            (283282 call writef "doing small task %i %i A=%xt\n"(283268 call . task c"start") taskEnd(283281 call A(283278 call chpl_build_bounded_range(283274 call . task c"start") taskEnd)))
          }
          if(283320 call _cond_test(283290 call . task c"doSort"))
          {
            (283317 call msbRadixSort(283295 call . task c"start") taskEnd A criterion(283303 call . task c"startbit")(283307 call . state c"endbit")(settings =(283310 'new'(283315 call MSBRadixSortSettings(alwaysSerial = 1)))))
          }
        }
      }
    }
    if(283407 call _cond_test debug)
    {
      (283362 call writef "ps %i %i A=%xt\n" start_n end_n(283361 call A(283358 call chpl_build_bounded_range start_n end_n)))
      (283393 call writef "ps %i %i Scratch=%xt\n" start_n end_n(283392 call Scratch(283389 call chpl_build_bounded_range start_n end_n)))
      (283405 call(283396 call . RadixSortHelp c"checkSorted") start_n end_n A criterion startbit)
    }
  }
  { scopeless type
    void[4]
  }
  function distributedPartitioningSortWithScratchSpaceBaseCase[283420](arg start_n[283417] :
  int[13], arg end_n[283423] :
  int[13], arg A[283429] :
  (283426 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283435] :
  (283432 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283439] :
  TwoArrayDistributedBucketizerSharedState, arg criterion[283442]:_any[178](?), arg startbit[283445] :
  int[13]) : _unknown[51] "private"
  {
    if(283458 call _cond_test(283454 call > startbit(283451 call . state c"endbit")))
    {
      { scopeless
        (283456 return)
      }
    }
    { scopeless
      const n[283471] "const"(283469 call +(283466 call - end_n start_n) 1)
      (283474 'end of statement')
    }
    { scopeless
      const localSubdomain[283483] "const"(283482 call(283478 call . A c"localSubdomain"))
      (283486 'end of statement')
    }
    { scopeless
      const curDomain[283494] "const"(283492 call chpl__buildDomainExpr(283489 call chpl_build_bounded_range start_n end_n))
      (283497 'end of statement')
    }
    { scopeless
      const intersect[283502] "const"(283501 call curDomain localSubdomain)
      (283505 'end of statement')
    }
    if(283666 call _cond_test(283508 call == curDomain intersect))
    {
      if(283564 call _cond_test(283515 call > n(283512 call . state c"baseCaseSize")))
      {
        (283541 call msbRadixSort start_n end_n(283529 call(283524 call . A c"localSlice") curDomain) criterion startbit(283533 call . state c"endbit")(settings =(283536 'new'(283539 call MSBRadixSortSettings))))
      }
      {
        (283561 call(283545 call . ShellSort c"shellSort")(283554 call(283549 call . A c"localSlice") curDomain) criterion(start = start_n)(end = end_n))
      }
    }
    {
      { scopeless
        const size[283576] "const"(283574 call +(283571 call - end_n start_n) 1)
        (283579 'end of statement')
      }
      { scopeless
        unknown LocalA[283594](283592 call chpl__buildArrayRuntimeType(283590 call chpl__ensureDomainExpr(283583 call chpl_build_bounded_range start_n end_n))(283587 call . A c"eltType"))
        (283597 'end of statement')
      }
      (283608 call(283599 call . ShallowCopy c"shallowCopy") LocalA start_n A start_n size)
      if(283650 call _cond_test(283615 call > n(283612 call . state c"baseCaseSize")))
      {
        (283633 call msbRadixSort start_n end_n LocalA criterion startbit(283625 call . state c"endbit")(settings =(283628 'new'(283631 call MSBRadixSortSettings))))
      }
      {
        (283647 call(283637 call . ShellSort c"shellSort") LocalA criterion(start = start_n)(end = end_n))
      }
      (283664 call(283655 call . ShallowCopy c"shallowCopy") A start_n LocalA start_n size)
    }
    if(283683 call _cond_test debug)
    {
      (283680 call(283672 call . RadixSortHelp c"checkSorted") start_n end_n A criterion)
    }
    (283687 return)
  }
  { scopeless type
    void[4]
  }
  function distributedPartitioningSortWithScratchSpaceHandleSampling[283698](arg start_n[283695] :
  int[13], arg end_n[283701] :
  int[13], arg A[283707] :
  (283704 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[283713] :
  (283710 call chpl__buildArrayRuntimeType nil[44]), ref arg state[283717] :
  TwoArrayDistributedBucketizerSharedState, arg criterion[283720]:_any[178](?), arg startbit[283723] :
  int[13]) : _unknown[51] "private"
  {
    if(284065 call _cond_test(283749 call isSubtype(283743 'typeof'(283740 call .(283737 call .(283736 call(283731 call . state c"perLocale") 0) c"compat") c"bucketizer"))(283746 call . SampleSortHelp c"SampleBucketizer")))
    {
      { scopeless
        unknown n[283757](283755 call -(283752 call + 1 end_n) start_n)
        (283760 'end of statement')
      }
      { scopeless
        unknown logNumBuckets[283769](283768 call(283763 call . SampleSortHelp c"computeLogBucketSize") n)
        (283772 'end of statement')
      }
      { scopeless
        unknown numBuckets[283777](283775 call << 1 logNumBuckets)
        (283780 'end of statement')
      }
      { scopeless
        unknown sampleStep[283789](283788 call(283782 call . SampleSortHelp c"chooseSampleStep") n logNumBuckets)
        (283792 'end of statement')
      }
      { scopeless
        unknown sampleSize[283800](283798 call -(283795 call * sampleStep numBuckets) 1)
        (283803 'end of statement')
      }
      if(283832 call _cond_test(283806 call >= sampleSize n))
      {
        if(283814 call _cond_test debug)
        {
          { scopeless
            (283812 call writeln "Reducing sample size because it was too big")
          }
        }
        (283829 call = sampleSize(283828 call max 1(283826 call / n 2)))
      }
      (283845 call(283837 call . SampleSortHelp c"putRandomSampleAtArrayStart") start_n end_n A sampleSize)
      if(283853 call _cond_test debug)
      {
        { scopeless
          (283851 call writeln "recursing to sort the sample")
        }
      }
      if(283901 call _cond_test(283863 call <= sampleSize(283861 call * 1024 1024)))
      {
        (283880 call distributedPartitioningSortWithScratchSpaceBaseCase start_n(283873 call -(283870 call + start_n sampleSize) 1) A Scratch state criterion startbit)
      }
      {
        (283898 call distributedPartitioningSortWithScratchSpace start_n(283891 call -(283888 call + start_n sampleSize) 1) A Scratch state criterion startbit)
      }
      if(283925 call _cond_test debug)
      {
        (283922 call(283907 call . RadixSortHelp c"checkSorted") start_n(283917 call -(283914 call + start_n sampleSize) 1) A criterion startbit)
      }
      (283950 call createSplittersFromSample A(283942 call .(283939 call .(283938 call(283933 call . state c"perLocale") 0) c"compat") c"bucketizer") criterion start_n sampleSize sampleStep numBuckets)
      if(283986 call _cond_test debug)
      {
        (283969 call writeln "sample bucketizer "(283966 call .(283963 call .(283962 call(283957 call . state c"perLocale") 0) c"compat") c"bucketizer"))
        (283984 call writef "A %i %i A=%xt\n" start_n end_n(283983 call A(283980 call chpl_build_bounded_range start_n end_n)))
      }
      {
        unknown _indexOfInterest[284024] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[284025] "expr temp" "temp"
        (284034 'move' _iterator[284025](284032 call _getIterator(284042 call chpl_direct_range_iter 1(284039 call . state c"numLocales") 1)))
        Defer
        {
          {
            (284058 call _freeIterator _iterator[284025])
          }
        }
        { scopeless type
          (284047 'move' _indexOfInterest[284024](284044 call iteratorIndex _iterator[284025]))
        }
        ForLoop[284026]
        {
          unknown lid[284051] "index var" "insert auto destroy"
          (284053 'move' lid[284051] _indexOfInterest[284024])
          {
            (284020 call =(284007 call .(284006 call(284001 call . state c"perLocale") lid) c"bucketizer")(284017 call .(284016 call(284011 call . state c"perLocale") 0) c"bucketizer"))
          }
          label _continueLabel[284029]
          _indexOfInterest[284024]
          _iterator[284025]
        }
        label _breakLabel[284030]
      }
    }
  }
  { scopeless type
    void[4]
  }
  function distributedPartitioningSortWithScratchSpace[284079](arg start_n[284076] :
  int[13], arg end_n[284082] :
  int[13], arg A[284088] :
  (284085 call chpl__buildArrayRuntimeType nil[44]), arg Scratch[284094] :
  (284091 call chpl__buildArrayRuntimeType nil[44]), ref arg state[284098] :
  TwoArrayDistributedBucketizerSharedState, arg criterion[284101]:_any[178](?), arg startbit[284104] :
  int[13]) : _unknown[51]
  {
    if(284140 call _cond_test(284116 call !(284115 call(284111 call . A c"hasSingleLocalSubdomain"))))
    {
      (284137 call compilerError "distributedPartitioningSortWithScratchSpace needs single local subdomain")
    }
    if(284154 call _cond_test(284150 call > startbit(284147 call . state c"endbit")))
    {
      { scopeless
        (284152 return)
      }
    }
    if(284183 call _cond_test(284167 call <(284161 call - end_n start_n)(284164 call . state c"baseCaseSize")))
    {
      (284178 call distributedPartitioningSortWithScratchSpaceBaseCase start_n end_n A Scratch state criterion startbit)
      (284181 return)
    }
    if(284252 call _cond_test debug)
    {
      (284249 call writeln "in distributed radix sort " start_n ".." end_n " startbit " startbit " endbit "(284246 call . state c"endbit"))
    }
    { scopeless
      const n[284263] "const"(284261 call +(284258 call - end_n start_n) 1)
      (284266 'end of statement')
    }
    (284286 call(284273 call .(284270 call . state c"distTasks") c"append")(284276 'new'(284284 call TwoArraySortTask start_n n startbit 1 1)))
    (284300 call assert(284297 call ==(284293 call .(284290 call . state c"distTasks") c"size") 1))
    {
      unknown tmp[286926] "temp"
      (286962 'move' tmp[286926](286951 call _cond_test(286953 call !(286961 call(286955 call .(286957 call . state c"distTasks") c"isEmpty")))))
      WhileDo[286931]
      {
        {
          { scopeless
            const task[284322] "const"(284321 call(284317 call .(284314 call . state c"distTasks") c"pop"))
            (284325 'end of statement')
          }
          { scopeless
            const taskStart[284331] "const"(284328 call . task c"start")
            (284334 'end of statement')
          }
          { scopeless
            const taskEnd[284348] "const"(284346 call -(284343 call +(284336 call . task c"start")(284340 call . task c"size")) 1)
            (284351 'end of statement')
          }
          (284358 call assert(284354 call . task c"doSort"))
          (284366 call assert(284362 call . task c"inA"))
          (284383 call distributedPartitioningSortWithScratchSpaceHandleSampling(284370 call . task c"start") taskEnd A Scratch state criterion(284380 call . task c"startbit"))
          { scopeless
            const nBuckets[284403] "const"(284402 call(284398 call .(284395 call .(284392 call .(284391 call(284386 call . state c"perLocale") 0) c"compat") c"bucketizer") c"getNumBuckets"))
            (284406 'end of statement')
          }
          { scopeless
            const nTasks[284411] "const"(284408 call . state c"numLocales")
            (284414 'end of statement')
          }
          {
            unknown tmpIter[284747] "expr temp" "maybe ref" "no copy" "temp"
            (284750 'move' tmpIter[284747](284432 call _build_tuple(284427 call(284423 call . A c"targetLocales"))(284430 call chpl_build_low_bounded_range 0)))
            unknown isRngDomArr[285147] "maybe param" "temp"
            (285162 'move' isRngDomArr[285147](285160 call ||(285149 call isBoundedRange tmpIter[284747])(285158 call ||(285152 call isDomain tmpIter[284747])(285155 call isArray tmpIter[284747]))))
            if isRngDomArr[285147]
            {
              const _coforallCount[284991] "const" "end count" "temp"
              (285070 'move' _coforallCount[284991](285067 call _endCountAlloc 0))
              unknown numTasks[284992] "temp"
              (285054 'move' numTasks[284992](285050 call . tmpIter[284747] c"size"))
              (285045 call _upEndCount _coforallCount[284991] 0 numTasks[284992])
              unknown _indexOfInterest[284998] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[284999] "expr temp" "temp"
              (285008 'move' _iterator[284999](285006 call _getIteratorZip tmpIter[284747]))
              Defer
              {
                {
                  (285038 call _freeIterator _iterator[284999])
                }
              }
              { scopeless type
                (285013 'move' _indexOfInterest[284998](285010 call iteratorIndex _iterator[284999]))
              }
              ForLoop[285000]
              {
                (285018 call _check_tuple_var_decl _indexOfInterest[284998] 2)
                unknown loc[285024] "coforall index var" "index var" "insert auto destroy"
                (285026 'move' loc[285024](285022 call _indexOfInterest[284998] 0))
                unknown tid[285031] "coforall index var" "index var" "insert auto destroy"
                (285033 'move' tid[285031](285029 call _indexOfInterest[284998] 1))
                { scopeless
                  { scopeless
                    const tmp[284756] "const" "temp"
                    (284758 'move' tmp[284756](284760 'deref'(284761 '_wide_get_locale' loc)))
                    {
                      {
                        { scopeless
                          const localDomain[284769] "const"(284775 call(284774 call(284771 call . A c"localSubdomain"))(284777 call chpl_build_bounded_range(284779 call . task c"start") taskEnd))
                          (284784 'end of statement')
                        }
                        { scopeless
                          unknown localSrc[284786] "ref var"(284791 call(284788 call . A c"localSlice") localDomain)
                          (284794 'end of statement')
                        }
                        { scopeless
                          unknown localDst[284796] "ref var"(284801 call(284798 call . Scratch c"localSlice") localDomain)
                          (284804 'end of statement')
                        }
                        (284806 call bucketize(284808 call . localDomain c"alignedLow")(284812 call . localDomain c"alignedHigh") localDst localSrc(284818 call .(284823 call(284820 call . state c"perLocale") tid) c"compat") criterion(284828 call . task c"startbit"))
                        { scopeless
                          unknown localCounts[284832] "ref var"(284834 call .(284836 call .(284841 call(284838 call . state c"perLocale") tid) c"compat") c"counts")
                          (284846 'end of statement')
                        }
                        if(284848 call _cond_test debug)
                        {
                          { scopeless
                            unknown total[284852] 0
                            (284855 'end of statement')
                          }
                          {
                            unknown _indexOfInterest[284857] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[284859] "expr temp" "temp"
                            (284861 'move' _iterator[284859](284864 call _getIterator(284866 call chpl_direct_counted_range_iter 0 nBuckets)))
                            Defer
                            {
                              {
                                (284871 call _freeIterator _iterator[284859])
                              }
                            }
                            { scopeless type
                              (284875 'move' _indexOfInterest[284857](284878 call iteratorIndex _iterator[284859]))
                            }
                            ForLoop[284880]
                            {
                              unknown bin[284883] "index var" "insert auto destroy"
                              (284885 'move' bin[284883] _indexOfInterest[284857])
                              {
                                if(284890 call _cond_test(284892 call >(284894 call localCounts bin) 0))
                                {
                                  (284899 call writeln "localCounts[" bin "]="(284904 call localCounts bin))
                                  (284907 call += total(284910 call localCounts bin))
                                }
                              }
                              label _continueLabel[284913]
                              _indexOfInterest[284857]
                              _iterator[284859]
                            }
                            label _breakLabel[284915]
                          }
                          (284918 call assert(284920 call == total(284923 call . localDomain c"size")))
                        }
                        {
                          unknown _indexOfInterest[284928] "an _indexOfInterest or chpl__followIdx variable" "temp"
                          unknown _iterator[284930] "expr temp" "temp"
                          (284932 'move' _iterator[284930](284935 call _getIterator(284937 call vectorizeOnly(284939 call #(284941 call chpl_build_low_bounded_range 0) nBuckets))))
                          Defer
                          {
                            {
                              (284946 call _freeIterator _iterator[284930])
                            }
                          }
                          { scopeless type
                            (284950 'move' _indexOfInterest[284928](284953 call iteratorIndex _iterator[284930]))
                          }
                          ForLoop[284955]
                          {
                            unknown bin[284958] "index var" "insert auto destroy"
                            (284960 'move' bin[284958] _indexOfInterest[284928])
                            {
                              (284965 call =(284975 call(284967 call .(284972 call(284969 call . state c"perLocale") 0) c"globalCounts")(284977 call +(284979 call * bin nTasks) tid))(284984 call localCounts bin))
                            }
                            label _continueLabel[284986]
                            _indexOfInterest[284928]
                            _iterator[284930]
                          }
                          label _breakLabel[284988]
                        }
                      }
                      (284993 call _downEndCount _coforallCount[284991] nil[44])
                      (284764 'coforall on block' 0 tmp[284756])
                      (284752 'actuals list' tiMarkRef[294] state)
                    }
                  }
                }
                label _continueLabel[285003]
                _indexOfInterest[284998]
                _iterator[284999]
              }
              label _breakLabel[285004]
              Defer
              {
                {
                  (285057 call _endCountFree _coforallCount[284991])
                }
              }
              (285062 call _waitEndCount _coforallCount[284991] 0 numTasks[284992])
            }
            {
              const _coforallCount[285074] "const" "end count" "temp"
              (285144 'move' _coforallCount[285074](285141 call _endCountAlloc 0))
              unknown _indexOfInterest[285081] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[285082] "expr temp" "temp"
              (285091 'move' _iterator[285082](285089 call _getIteratorZip tmpIter[284747]))
              Defer
              {
                {
                  (285121 call _freeIterator _iterator[285082])
                }
              }
              { scopeless type
                (285096 'move' _indexOfInterest[285081](285093 call iteratorIndex _iterator[285082]))
              }
              ForLoop[285083]
              {
                (285101 call _check_tuple_var_decl _indexOfInterest[285081] 2)
                unknown loc[285107] "coforall index var" "index var" "insert auto destroy"
                (285109 'move' loc[285107](285105 call _indexOfInterest[285081] 0))
                unknown tid[285114] "coforall index var" "index var" "insert auto destroy"
                (285116 'move' tid[285114](285112 call _indexOfInterest[285081] 1))
                (285128 call _upEndCount _coforallCount[285074] 0)
                { scopeless
                  { scopeless
                    const tmp[284737] "const" "temp"
                    (284739 'move' tmp[284737](284735 'deref'(284734 '_wide_get_locale' loc)))
                    {
                      {
                        { scopeless
                          const localDomain[284457] "const"(284456 call(284447 call(284443 call . A c"localSubdomain"))(284453 call chpl_build_bounded_range(284449 call . task c"start") taskEnd))
                          (284460 'end of statement')
                        }
                        { scopeless
                          unknown localSrc[284469] "ref var"(284468 call(284463 call . A c"localSlice") localDomain)
                          (284472 'end of statement')
                        }
                        { scopeless
                          unknown localDst[284480] "ref var"(284479 call(284474 call . Scratch c"localSlice") localDomain)
                          (284483 'end of statement')
                        }
                        (284511 call bucketize(284486 call . localDomain c"alignedLow")(284491 call . localDomain c"alignedHigh") localDst localSrc(284503 call .(284502 call(284497 call . state c"perLocale") tid) c"compat") criterion(284508 call . task c"startbit"))
                        { scopeless
                          unknown localCounts[284526] "ref var"(284523 call .(284520 call .(284519 call(284514 call . state c"perLocale") tid) c"compat") c"counts")
                          (284529 'end of statement')
                        }
                        if(284659 call _cond_test debug)
                        {
                          { scopeless
                            unknown total[284532] 0
                            (284535 'end of statement')
                          }
                          {
                            unknown _indexOfInterest[284608] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[284609] "expr temp" "temp"
                            (284618 'move' _iterator[284609](284616 call _getIterator(284625 call chpl_direct_counted_range_iter 0 nBuckets)))
                            Defer
                            {
                              {
                                (284641 call _freeIterator _iterator[284609])
                              }
                            }
                            { scopeless type
                              (284630 'move' _indexOfInterest[284608](284627 call iteratorIndex _iterator[284609]))
                            }
                            ForLoop[284610]
                            {
                              unknown bin[284634] "index var" "insert auto destroy"
                              (284636 'move' bin[284634] _indexOfInterest[284608])
                              {
                                if(284603 call _cond_test(284549 call >(284547 call localCounts bin) 0))
                                {
                                  (284592 call writeln "localCounts[" bin "]="(284591 call localCounts bin))
                                  (284600 call += total(284599 call localCounts bin))
                                }
                              }
                              label _continueLabel[284613]
                              _indexOfInterest[284608]
                              _iterator[284609]
                            }
                            label _breakLabel[284614]
                          }
                          (284657 call assert(284654 call == total(284651 call . localDomain c"size")))
                        }
                        {
                          unknown _indexOfInterest[284700] "an _indexOfInterest or chpl__followIdx variable" "temp"
                          unknown _iterator[284701] "expr temp" "temp"
                          (284710 'move' _iterator[284701](284708 call _getIterator(284672 call vectorizeOnly(284669 call #(284666 call chpl_build_low_bounded_range 0) nBuckets))))
                          Defer
                          {
                            {
                              (284727 call _freeIterator _iterator[284701])
                            }
                          }
                          { scopeless type
                            (284716 'move' _indexOfInterest[284700](284713 call iteratorIndex _iterator[284701]))
                          }
                          ForLoop[284702]
                          {
                            unknown bin[284720] "index var" "insert auto destroy"
                            (284722 'move' bin[284720] _indexOfInterest[284700])
                            {
                              (284696 call =(284691 call(284680 call .(284679 call(284674 call . state c"perLocale") 0) c"globalCounts")(284688 call +(284685 call * bin nTasks) tid))(284695 call localCounts bin))
                            }
                            label _continueLabel[284705]
                            _indexOfInterest[284700]
                            _iterator[284701]
                          }
                          label _breakLabel[284706]
                        }
                      }
                      (285076 call _downEndCount _coforallCount[285074] nil[44])
                      (284742 'coforall on block' 0 tmp[284737])
                      (284438 'actuals list' tiMarkRef[294] state)
                    }
                  }
                }
                label _continueLabel[285086]
                _indexOfInterest[285081]
                _iterator[285082]
              }
              label _breakLabel[285087]
              Defer
              {
                {
                  (285132 call _endCountFree _coforallCount[285074])
                }
              }
              (285137 call _waitEndCount _coforallCount[285074] 0)
            }
          }
          if(285199 call _cond_test debug)
          {
            (285196 call writef "after bucketize local portions, Scratch is %xt\n"(285195 call Scratch(285192 call chpl_build_bounded_range(285188 call . task c"start") taskEnd)))
          }
          (285264 call =(285210 call .(285209 call(285204 call . state c"perLocale") 0) c"globalEnds")(285262 call +(285257 call function chpl__scan5[285224](arg chpl_toScan[285226]:_any[178](?)) : _unknown[51] "compiler nested function" "ReduceScanOp" "fn returns iterator"
          {
            unknown chpl_eltType[285228] "maybe type" "temp"
            { scopeless type
              (285232 'move' chpl_eltType[285228](285234 'typeof'(285236 call chpl__initCopy(285238 call iteratorIndex(285240 call _getIterator chpl_toScan[285226])))))
            }
            const tmp[285229] "const" "temp"
            (285249 'move' tmp[285229](285248 'new'(285247 call SumReduceScanOp(eltType = chpl_eltType[285228])(_chpl_manager = unmanaged[220](?)))))
            (285251 return(285253 call chpl__scanIterator tmp[285229] chpl_toScan[285226]))
          }(285221 call .(285220 call(285215 call . state c"perLocale") 0) c"globalCounts"))(285259 call . task c"start")))
          Forall {
            induction variables:
              
              unknown loc[285346] "index var" "insert auto destroy"
              
              unknown tid[285348] "index var" "insert auto destroy"
            iterated expressions:
              (285277 call(285273 call . A c"targetLocales"))
              (285280 call chpl_build_low_bounded_range 0)
            shadow variables:
              state[285284] 'ref' intent
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              if(285340 call _cond_test(285291 call != tid 0))
              {
                (285313 call =(285300 call .(285299 call(285294 call . state c"perLocale") tid) c"globalCounts")(285310 call .(285309 call(285304 call . state c"perLocale") 0) c"globalCounts"))
                (285337 call =(285324 call .(285323 call(285318 call . state c"perLocale") tid) c"globalEnds")(285334 call .(285333 call(285328 call . state c"perLocale") 0) c"globalEnds"))
              }
            }
          }
          if(285534 call _cond_test debug)
          {
            { scopeless
              unknown total[285354] 0
              (285357 'end of statement')
            }
            {
              unknown _indexOfInterest[285480] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[285481] "expr temp" "temp"
              (285490 'move' _iterator[285481](285488 call _getIterator(285500 call chpl_direct_counted_range_iter 0(285496 call . state c"countsSize"))))
              Defer
              {
                {
                  (285516 call _freeIterator _iterator[285481])
                }
              }
              { scopeless type
                (285505 'move' _indexOfInterest[285480](285502 call iteratorIndex _iterator[285481]))
              }
              ForLoop[285482]
              {
                unknown i[285509] "index var" "insert auto destroy"
                (285511 'move' i[285509] _indexOfInterest[285480])
                {
                  if(285475 call _cond_test(285383 call !=(285381 call(285376 call .(285375 call(285370 call . state c"perLocale") 0) c"globalCounts") i) 0))
                  {
                    (285399 call += total(285398 call(285393 call .(285392 call(285387 call . state c"perLocale") 0) c"globalCounts") i))
                    (285437 call writeln "state.globalCounts[" i "]="(285436 call(285431 call .(285430 call(285425 call . state c"perLocale") 0) c"globalCounts") i))
                    (285473 call writeln "state.globalEnds[" i "]="(285472 call(285467 call .(285466 call(285461 call . state c"perLocale") 0) c"globalEnds") i))
                  }
                }
                label _continueLabel[285485]
                _indexOfInterest[285480]
                _iterator[285481]
              }
              label _breakLabel[285486]
            }
            (285532 call assert(285529 call == total(285526 call . task c"size")))
          }
          {
            unknown tmpIter[286013] "expr temp" "maybe ref" "no copy" "temp"
            (286016 'move' tmpIter[286013](285553 call _build_tuple(285548 call(285544 call . A c"targetLocales"))(285551 call chpl_build_low_bounded_range 0)))
            unknown isRngDomArr[286504] "maybe param" "temp"
            (286519 'move' isRngDomArr[286504](286517 call ||(286506 call isBoundedRange tmpIter[286013])(286515 call ||(286509 call isDomain tmpIter[286013])(286512 call isArray tmpIter[286013]))))
            if isRngDomArr[286504]
            {
              const _coforallCount[286348] "const" "end count" "temp"
              (286427 'move' _coforallCount[286348](286424 call _endCountAlloc 0))
              unknown numTasks[286349] "temp"
              (286411 'move' numTasks[286349](286407 call . tmpIter[286013] c"size"))
              (286402 call _upEndCount _coforallCount[286348] 0 numTasks[286349])
              unknown _indexOfInterest[286355] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[286356] "expr temp" "temp"
              (286365 'move' _iterator[286356](286363 call _getIteratorZip tmpIter[286013]))
              Defer
              {
                {
                  (286395 call _freeIterator _iterator[286356])
                }
              }
              { scopeless type
                (286370 'move' _indexOfInterest[286355](286367 call iteratorIndex _iterator[286356]))
              }
              ForLoop[286357]
              {
                (286375 call _check_tuple_var_decl _indexOfInterest[286355] 2)
                unknown loc[286381] "coforall index var" "index var" "insert auto destroy"
                (286383 'move' loc[286381](286379 call _indexOfInterest[286355] 0))
                unknown tid[286388] "coforall index var" "index var" "insert auto destroy"
                (286390 'move' tid[286388](286386 call _indexOfInterest[286355] 1))
                { scopeless
                  { scopeless
                    const tmp[286022] "const" "temp"
                    (286024 'move' tmp[286022](286026 'deref'(286027 '_wide_get_locale' loc)))
                    {
                      {
                        { scopeless
                          const globalCounts[286035] "const" "ref var"(286037 call .(286042 call(286039 call . state c"perLocale") tid) c"globalCounts")
                          (286046 'end of statement')
                        }
                        { scopeless
                          const globalEnds[286048] "const" "ref var"(286050 call .(286055 call(286052 call . state c"perLocale") tid) c"globalEnds")
                          (286059 'end of statement')
                        }
                        { scopeless
                          const localSubdomain[286061] "const"(286067 call(286066 call(286063 call . A c"localSubdomain"))(286069 call chpl_build_bounded_range(286071 call . task c"start") taskEnd))
                          (286076 'end of statement')
                        }
                        { scopeless
                          unknown localOffsets[286078] "ref var"(286080 call .(286082 call .(286087 call(286084 call . state c"perLocale") tid) c"compat") c"counts")
                          (286092 'end of statement')
                        }
                        {
                          { scopeless
                            unknown offset[286095](286097 call . localSubdomain c"low")
                            (286101 'end of statement')
                          }
                          {
                            unknown _indexOfInterest[286103] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[286105] "expr temp" "temp"
                            (286107 'move' _iterator[286105](286110 call _getIterator(286112 call chpl_direct_counted_range_iter 0 nBuckets)))
                            Defer
                            {
                              {
                                (286117 call _freeIterator _iterator[286105])
                              }
                            }
                            { scopeless type
                              (286121 'move' _indexOfInterest[286103](286124 call iteratorIndex _iterator[286105]))
                            }
                            ForLoop[286126]
                            {
                              unknown bin[286129] "index var" "insert auto destroy"
                              (286131 'move' bin[286129] _indexOfInterest[286103])
                              {
                                (286136 call =(286138 call localOffsets bin) offset)
                                (286142 call += offset(286145 call globalCounts(286147 call +(286149 call * bin nTasks) tid)))
                              }
                              label _continueLabel[286153]
                              _indexOfInterest[286103]
                              _iterator[286105]
                            }
                            label _breakLabel[286155]
                          }
                        }
                        Forall {
                          induction variables:
                            
                            unknown bin[286339] "index var" "insert auto destroy"
                          iterated expressions:
                            (286342 call #(286344 call chpl_build_low_bounded_range 0) nBuckets)
                          shadow variables:
                          other variables
                            forall body
                          {
                            { scopeless
                              unknown size[286159](286161 call globalCounts(286163 call +(286165 call * bin nTasks) tid))
                              (286170 'end of statement')
                            }
                            if(286172 call _cond_test(286174 call > size 0))
                            {
                              { scopeless
                                unknown localStart[286179](286181 call localOffsets bin)
                                (286184 'end of statement')
                              }
                              { scopeless
                                unknown localEnd[286186](286188 call -(286190 call + localStart size) 1)
                                (286195 'end of statement')
                              }
                              { scopeless
                                unknown globalStart[286197](286223 IfExpr (286199 call >(286201 call +(286203 call * bin nTasks) tid) 0) then
                                { scopeless
                                  (286210 call globalEnds(286212 call -(286214 call +(286216 call * bin nTasks) tid) 1))
                                } else
                                { scopeless
                                  taskStart
                                } )
                                (286225 'end of statement')
                              }
                              { scopeless
                                unknown globalEnd[286227](286229 call -(286231 call globalEnds(286233 call +(286235 call * bin nTasks) tid)) 1)
                                (286241 'end of statement')
                              }
                              if(286243 call _cond_test debug)
                              {
                                (286247 call writeln "bin " bin " tid " tid " range "(286254 call chpl_build_bounded_range taskStart taskEnd) " A[" globalStart ".." globalEnd "] = Scratch[" localStart ".." localEnd "]")
                                (286267 call assert(286269 call ==(286271 call globalCounts(286273 call +(286275 call * bin nTasks) tid))(286288 call(286280 call .(286285 call(286282 call . state c"perLocale") 0) c"globalCounts")(286290 call +(286292 call * bin nTasks) tid))))
                                (286297 call assert(286299 call ==(286301 call globalEnds(286303 call +(286305 call * bin nTasks) tid))(286318 call(286310 call .(286315 call(286312 call . state c"perLocale") 0) c"globalEnds")(286320 call +(286322 call * bin nTasks) tid))))
                              }
                              (286331 call(286328 call . ShallowCopy c"shallowCopy") A globalStart Scratch localStart size)
                            }
                          }
                        }
                      }
                      (286350 call _downEndCount _coforallCount[286348] nil[44])
                      (286030 'coforall on block' 0 tmp[286022])
                      (286018 'actuals list' tiMarkRef[294] state)
                    }
                  }
                }
                label _continueLabel[286360]
                _indexOfInterest[286355]
                _iterator[286356]
              }
              label _breakLabel[286361]
              Defer
              {
                {
                  (286414 call _endCountFree _coforallCount[286348])
                }
              }
              (286419 call _waitEndCount _coforallCount[286348] 0 numTasks[286349])
            }
            {
              const _coforallCount[286431] "const" "end count" "temp"
              (286501 'move' _coforallCount[286431](286498 call _endCountAlloc 0))
              unknown _indexOfInterest[286438] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[286439] "expr temp" "temp"
              (286448 'move' _iterator[286439](286446 call _getIteratorZip tmpIter[286013]))
              Defer
              {
                {
                  (286478 call _freeIterator _iterator[286439])
                }
              }
              { scopeless type
                (286453 'move' _indexOfInterest[286438](286450 call iteratorIndex _iterator[286439]))
              }
              ForLoop[286440]
              {
                (286458 call _check_tuple_var_decl _indexOfInterest[286438] 2)
                unknown loc[286464] "coforall index var" "index var" "insert auto destroy"
                (286466 'move' loc[286464](286462 call _indexOfInterest[286438] 0))
                unknown tid[286471] "coforall index var" "index var" "insert auto destroy"
                (286473 'move' tid[286471](286469 call _indexOfInterest[286438] 1))
                (286485 call _upEndCount _coforallCount[286431] 0)
                { scopeless
                  { scopeless
                    const tmp[286003] "const" "temp"
                    (286005 'move' tmp[286003](286001 'deref'(286000 '_wide_get_locale' loc)))
                    {
                      {
                        { scopeless
                          const globalCounts[285573] "const" "ref var"(285570 call .(285569 call(285564 call . state c"perLocale") tid) c"globalCounts")
                          (285576 'end of statement')
                        }
                        { scopeless
                          const globalEnds[285588] "const" "ref var"(285585 call .(285584 call(285579 call . state c"perLocale") tid) c"globalEnds")
                          (285591 'end of statement')
                        }
                        { scopeless
                          const localSubdomain[285607] "const"(285606 call(285597 call(285593 call . A c"localSubdomain"))(285603 call chpl_build_bounded_range(285599 call . task c"start") taskEnd))
                          (285610 'end of statement')
                        }
                        { scopeless
                          unknown localOffsets[285624] "ref var"(285621 call .(285618 call .(285617 call(285612 call . state c"perLocale") tid) c"compat") c"counts")
                          (285627 'end of statement')
                        }
                        {
                          { scopeless
                            unknown offset[285632](285629 call . localSubdomain c"low")
                            (285635 'end of statement')
                          }
                          {
                            unknown _indexOfInterest[285667] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[285668] "expr temp" "temp"
                            (285677 'move' _iterator[285668](285675 call _getIterator(285684 call chpl_direct_counted_range_iter 0 nBuckets)))
                            Defer
                            {
                              {
                                (285700 call _freeIterator _iterator[285668])
                              }
                            }
                            { scopeless type
                              (285689 'move' _indexOfInterest[285667](285686 call iteratorIndex _iterator[285668]))
                            }
                            ForLoop[285669]
                            {
                              unknown bin[285693] "index var" "insert auto destroy"
                              (285695 'move' bin[285693] _indexOfInterest[285667])
                              {
                                (285649 call =(285647 call localOffsets bin) offset)
                                (285664 call += offset(285663 call globalCounts(285660 call +(285657 call * bin nTasks) tid)))
                              }
                              label _continueLabel[285672]
                              _indexOfInterest[285667]
                              _iterator[285668]
                            }
                            label _breakLabel[285673]
                          }
                        }
                        Forall {
                          induction variables:
                            
                            unknown bin[285996] "index var" "insert auto destroy"
                          iterated expressions:
                            (285712 call #(285709 call chpl_build_low_bounded_range 0) nBuckets)
                          shadow variables:
                          other variables
                            forall body
                          {
                            { scopeless
                              unknown size[285724](285723 call globalCounts(285720 call +(285717 call * bin nTasks) tid))
                              (285727 'end of statement')
                            }
                            if(285991 call _cond_test(285731 call > size 0))
                            {
                              { scopeless
                                unknown localStart[285737](285736 call localOffsets bin)
                                (285740 'end of statement')
                              }
                              { scopeless
                                unknown localEnd[285749](285747 call -(285744 call + localStart size) 1)
                                (285752 'end of statement')
                              }
                              { scopeless
                                unknown globalStart[285780](285777 IfExpr (285761 call >(285758 call +(285755 call * bin nTasks) tid) 0) then
                                { scopeless
                                  (285775 call globalEnds(285772 call -(285769 call +(285766 call * bin nTasks) tid) 1))
                                } else
                                { scopeless
                                  taskStart
                                } )
                                (285783 'end of statement')
                              }
                              { scopeless
                                unknown globalEnd[285797](285795 call -(285793 call globalEnds(285790 call +(285787 call * bin nTasks) tid)) 1)
                                (285800 'end of statement')
                              }
                              if(285975 call _cond_test debug)
                              {
                                (285902 call writeln "bin " bin " tid " tid " range "(285859 call chpl_build_bounded_range taskStart taskEnd) " A[" globalStart ".." globalEnd "] = Scratch[" localStart ".." localEnd "]")
                                (285938 call assert(285935 call ==(285915 call globalCounts(285912 call +(285909 call * bin nTasks) tid))(285934 call(285923 call .(285922 call(285917 call . state c"perLocale") 0) c"globalCounts")(285931 call +(285928 call * bin nTasks) tid))))
                                (285973 call assert(285970 call ==(285950 call globalEnds(285947 call +(285944 call * bin nTasks) tid))(285969 call(285958 call .(285957 call(285952 call . state c"perLocale") 0) c"globalEnds")(285966 call +(285963 call * bin nTasks) tid))))
                              }
                              (285989 call(285980 call . ShallowCopy c"shallowCopy") A globalStart Scratch localStart size)
                            }
                          }
                        }
                      }
                      (286433 call _downEndCount _coforallCount[286431] nil[44])
                      (286008 'coforall on block' 0 tmp[286003])
                      (285559 'actuals list' tiMarkRef[294] state)
                    }
                  }
                }
                label _continueLabel[286443]
                _indexOfInterest[286438]
                _iterator[286439]
              }
              label _breakLabel[286444]
              Defer
              {
                {
                  (286489 call _endCountFree _coforallCount[286431])
                }
              }
              (286494 call _waitEndCount _coforallCount[286431] 0)
            }
          }
          if(286556 call _cond_test debug)
          {
            (286553 call writef "after distribute, A is %xt\n"(286552 call A(286549 call chpl_build_bounded_range(286545 call . task c"start") taskEnd)))
          }
          {
            unknown _indexOfInterest[286892] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[286893] "expr temp" "temp"
            (286902 'move' _iterator[286893](286900 call _getIterator(286578 call(286574 call .(286571 call .(286568 call .(286567 call(286562 call . state c"perLocale") 0) c"compat") c"bucketizer") c"getBinsToRecursivelySort"))))
            Defer
            {
              {
                (286919 call _freeIterator _iterator[286893])
              }
            }
            { scopeless type
              (286908 'move' _indexOfInterest[286892](286905 call iteratorIndex _iterator[286893]))
            }
            ForLoop[286894]
            {
              unknown bin[286912] "index var" "insert auto destroy"
              (286914 'move' bin[286912] _indexOfInterest[286892])
              {
                { scopeless
                  const binStart[286612] "const"(286609 IfExpr (286584 call >(286581 call * bin nTasks) 0) then
                  { scopeless
                    (286604 call(286593 call .(286592 call(286587 call . state c"perLocale") 0) c"globalEnds")(286601 call -(286598 call * bin nTasks) 1))
                  } else
                  { scopeless
                    (286606 call . task c"start")
                  } )
                  (286615 'end of statement')
                }
                { scopeless
                  const binEnd[286642] "const"(286640 call -(286638 call(286624 call .(286623 call(286618 call . state c"perLocale") 0) c"globalEnds")(286635 call -(286632 call +(286629 call * bin nTasks) nTasks) 1)) 1)
                  (286645 'end of statement')
                }
                { scopeless
                  const binSize[286653] "const"(286651 call +(286648 call - binEnd binStart) 1)
                  (286656 'end of statement')
                }
                { scopeless
                  const binStartBit[286679] "const"(286678 call(286670 call .(286667 call .(286664 call .(286663 call(286658 call . state c"perLocale") 0) c"compat") c"bucketizer") c"getNextStartBit")(286674 call . task c"startbit"))
                  (286682 'end of statement')
                }
                if(286888 call _cond_test(286685 call > binSize 1))
                {
                  { scopeless
                    unknown isOnOneLocale[286688] 0
                    (286691 'end of statement')
                  }
                  { scopeless
                    unknown theLocaleId[286696](286694 call - 1)
                    (286699 'end of statement')
                  }
                  {
                    unknown _indexOfInterest[286775] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[286776] "expr temp" "temp"
                    (286798 'move' _iterator[286776](286715 call _build_tuple(286789 call _getIterator(286788 call(286785 call . A c"targetLocales")))(286795 call _getIterator(286793 call chpl_build_low_bounded_range 0))))
                    Defer
                    {
                      {
                        (286828 call _freeIterator _iterator[286776])
                      }
                    }
                    { scopeless type
                      (286803 'move' _indexOfInterest[286775](286800 call iteratorIndex _iterator[286776]))
                    }
                    ForLoop[286777]
                    {
                      (286808 call _check_tuple_var_decl _indexOfInterest[286775] 2)
                      unknown loc[286814] "index var" "insert auto destroy"
                      (286816 'move' loc[286814](286812 call _indexOfInterest[286775] 0))
                      unknown tid[286821] "index var" "insert auto destroy"
                      (286823 'move' tid[286821](286819 call _indexOfInterest[286775] 1))
                      {
                        { scopeless
                          const localSubdomain[286732] "const"(286731 call(286722 call(286717 call . A c"localSubdomain") loc)(286728 call chpl_build_bounded_range(286724 call . task c"start") taskEnd))
                          (286735 'end of statement')
                        }
                        { scopeless
                          const curDomain[286744] "const"(286742 call chpl__buildDomainExpr(286739 call chpl_build_bounded_range binStart binEnd))
                          (286747 'end of statement')
                        }
                        { scopeless
                          const intersect[286752] "const"(286751 call curDomain localSubdomain)
                          (286755 'end of statement')
                        }
                        if(286771 call _cond_test(286758 call == curDomain intersect))
                        {
                          (286762 call = isOnOneLocale 1)
                          (286768 call = theLocaleId tid)
                        }
                      }
                      label _continueLabel[286780]
                      _indexOfInterest[286775]
                      _iterator[286776]
                    }
                    label _breakLabel[286781]
                  }
                  if(286884 call _cond_test isOnOneLocale)
                  {
                    (286861 call(286848 call .(286845 call .(286844 call(286839 call . state c"localTasks") theLocaleId) c"localTasks") c"append")(286851 'new'(286859 call TwoArraySortTask binStart binSize binStartBit 1 1)))
                  }
                  {
                    (286881 call(286868 call .(286865 call . state c"distTasks") c"append")(286871 'new'(286879 call TwoArraySortTask binStart binSize binStartBit 1 1)))
                  }
                }
              }
              label _continueLabel[286897]
              _indexOfInterest[286892]
              _iterator[286893]
            }
            label _breakLabel[286898]
          }
        }
        label _continueLabel[286929]
        (286946 'move' tmp[286926](286935 call _cond_test(286937 call !(286945 call(286939 call .(286941 call . state c"distTasks") c"isEmpty")))))
        tmp[286926]
      }
      label _breakLabel[286930]
    }
    {
      unknown tmpIter[287225] "expr temp" "maybe ref" "no copy" "temp"
      (287228 'move' tmpIter[287225](286980 call _build_tuple(286975 call(286971 call . A c"targetLocales"))(286978 call chpl_build_low_bounded_range 0)))
      unknown isRngDomArr[287587] "maybe param" "temp"
      (287602 'move' isRngDomArr[287587](287600 call ||(287589 call isBoundedRange tmpIter[287225])(287598 call ||(287592 call isDomain tmpIter[287225])(287595 call isArray tmpIter[287225]))))
      if isRngDomArr[287587]
      {
        const _coforallCount[287431] "const" "end count" "temp"
        (287510 'move' _coforallCount[287431](287507 call _endCountAlloc 0))
        unknown numTasks[287432] "temp"
        (287494 'move' numTasks[287432](287490 call . tmpIter[287225] c"size"))
        (287485 call _upEndCount _coforallCount[287431] 0 numTasks[287432])
        unknown _indexOfInterest[287438] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[287439] "expr temp" "temp"
        (287448 'move' _iterator[287439](287446 call _getIteratorZip tmpIter[287225]))
        Defer
        {
          {
            (287478 call _freeIterator _iterator[287439])
          }
        }
        { scopeless type
          (287453 'move' _indexOfInterest[287438](287450 call iteratorIndex _iterator[287439]))
        }
        ForLoop[287440]
        {
          (287458 call _check_tuple_var_decl _indexOfInterest[287438] 2)
          unknown loc[287464] "coforall index var" "index var" "insert auto destroy"
          (287466 'move' loc[287464](287462 call _indexOfInterest[287438] 0))
          unknown tid[287471] "coforall index var" "index var" "insert auto destroy"
          (287473 'move' tid[287471](287469 call _indexOfInterest[287438] 1))
          { scopeless
            { scopeless
              const tmp[287234] "const" "temp"
              (287236 'move' tmp[287234](287238 'deref'(287239 '_wide_get_locale' loc)))
              {
                {
                  { scopeless
                    unknown myTasks[287247](287249 call .(287254 call(287251 call . state c"localTasks") tid) c"localTasks")
                    (287258 'end of statement')
                  }
                  { scopeless
                    unknown baseCaseSize[287260](287262 call . state c"baseCaseSize")
                    (287266 'end of statement')
                  }
                  { scopeless
                    unknown compat[287268] "ref var"(287270 call .(287275 call(287272 call . state c"perLocale") tid) c"compat")
                    (287279 'end of statement')
                  }
                  {
                    unknown _indexOfInterest[287281] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[287283] "expr temp" "temp"
                    (287285 'move' _iterator[287283](287288 call _getIterator myTasks))
                    Defer
                    {
                      {
                        (287292 call _freeIterator _iterator[287283])
                      }
                    }
                    { scopeless type
                      (287296 'move' _indexOfInterest[287281](287299 call iteratorIndex _iterator[287283]))
                    }
                    ForLoop[287301]
                    {
                      unknown task[287304] "index var" "insert auto destroy"
                      (287306 'move' task[287304] _indexOfInterest[287281])
                      {
                        { scopeless
                          const taskEnd[287311] "const"(287313 call -(287315 call +(287317 call . task c"start")(287321 call . task c"size")) 1)
                          (287326 'end of statement')
                        }
                        { scopeless
                          const curDomain[287328] "const"(287330 call chpl__buildDomainExpr(287332 call chpl_build_bounded_range(287334 call . task c"start") taskEnd))
                          (287339 'end of statement')
                        }
                        if(287341 call _cond_test(287343 call > n baseCaseSize))
                        {
                          (287354 call(287348 call .(287350 call . compat c"bigTasks") c"clear"))
                          (287362 call(287356 call .(287358 call . compat c"smallTasks") c"clear"))
                          (287364 call partitioningSortWithScratchSpace(287366 call . task c"start") taskEnd(287374 call(287371 call . A c"localSlice") curDomain)(287380 call(287377 call . Scratch c"localSlice") curDomain) compat criterion(287385 call . task c"startbit"))
                        }
                        {
                          (287393 call(287390 call . ShellSort c"shellSort")(287398 call(287395 call . A c"localSlice") curDomain) criterion(start =(287402 call . task c"start"))(end = taskEnd))
                        }
                        if(287410 call _cond_test debug)
                        {
                          (287414 call writef "after recursive sorts, dst is %xt\n"(287417 call A(287419 call chpl_build_bounded_range(287421 call . task c"start") taskEnd)))
                        }
                      }
                      label _continueLabel[287426]
                      _indexOfInterest[287281]
                      _iterator[287283]
                    }
                    label _breakLabel[287428]
                  }
                }
                (287433 call _downEndCount _coforallCount[287431] nil[44])
                (287242 'coforall on block' 0 tmp[287234])
                (287230 'actuals list' tiMarkRef[294] state)
              }
            }
          }
          label _continueLabel[287443]
          _indexOfInterest[287438]
          _iterator[287439]
        }
        label _breakLabel[287444]
        Defer
        {
          {
            (287497 call _endCountFree _coforallCount[287431])
          }
        }
        (287502 call _waitEndCount _coforallCount[287431] 0 numTasks[287432])
      }
      {
        const _coforallCount[287514] "const" "end count" "temp"
        (287584 'move' _coforallCount[287514](287581 call _endCountAlloc 0))
        unknown _indexOfInterest[287521] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[287522] "expr temp" "temp"
        (287531 'move' _iterator[287522](287529 call _getIteratorZip tmpIter[287225]))
        Defer
        {
          {
            (287561 call _freeIterator _iterator[287522])
          }
        }
        { scopeless type
          (287536 'move' _indexOfInterest[287521](287533 call iteratorIndex _iterator[287522]))
        }
        ForLoop[287523]
        {
          (287541 call _check_tuple_var_decl _indexOfInterest[287521] 2)
          unknown loc[287547] "coforall index var" "index var" "insert auto destroy"
          (287549 'move' loc[287547](287545 call _indexOfInterest[287521] 0))
          unknown tid[287554] "coforall index var" "index var" "insert auto destroy"
          (287556 'move' tid[287554](287552 call _indexOfInterest[287521] 1))
          (287568 call _upEndCount _coforallCount[287514] 0)
          { scopeless
            { scopeless
              const tmp[287215] "const" "temp"
              (287217 'move' tmp[287215](287213 'deref'(287212 '_wide_get_locale' loc)))
              {
                {
                  { scopeless
                    unknown myTasks[287000](286997 call .(286996 call(286991 call . state c"localTasks") tid) c"localTasks")
                    (287003 'end of statement')
                  }
                  { scopeless
                    unknown baseCaseSize[287009](287006 call . state c"baseCaseSize")
                    (287012 'end of statement')
                  }
                  { scopeless
                    unknown compat[287023] "ref var"(287020 call .(287019 call(287014 call . state c"perLocale") tid) c"compat")
                    (287026 'end of statement')
                  }
                  {
                    unknown _indexOfInterest[287179] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[287180] "expr temp" "temp"
                    (287189 'move' _iterator[287180](287187 call _getIterator myTasks))
                    Defer
                    {
                      {
                        (287205 call _freeIterator _iterator[287180])
                      }
                    }
                    { scopeless type
                      (287194 'move' _indexOfInterest[287179](287191 call iteratorIndex _iterator[287180]))
                    }
                    ForLoop[287181]
                    {
                      unknown task[287198] "index var" "insert auto destroy"
                      (287200 'move' task[287198] _indexOfInterest[287179])
                      {
                        { scopeless
                          const taskEnd[287042] "const"(287040 call -(287037 call +(287030 call . task c"start")(287034 call . task c"size")) 1)
                          (287045 'end of statement')
                        }
                        { scopeless
                          const curDomain[287057] "const"(287055 call chpl__buildDomainExpr(287052 call chpl_build_bounded_range(287048 call . task c"start") taskEnd))
                          (287060 'end of statement')
                        }
                        if(287138 call _cond_test(287063 call > n baseCaseSize))
                        {
                          (287073 call(287069 call .(287066 call . compat c"bigTasks") c"clear"))
                          (287084 call(287080 call .(287077 call . compat c"smallTasks") c"clear"))
                          (287113 call partitioningSortWithScratchSpace(287088 call . task c"start") taskEnd(287099 call(287094 call . A c"localSlice") curDomain)(287106 call(287101 call . Scratch c"localSlice") curDomain) compat criterion(287110 call . task c"startbit"))
                        }
                        {
                          (287135 call(287116 call . ShellSort c"shellSort")(287125 call(287120 call . A c"localSlice") curDomain) criterion(start =(287129 call . task c"start"))(end = taskEnd))
                        }
                        if(287175 call _cond_test debug)
                        {
                          (287172 call writef "after recursive sorts, dst is %xt\n"(287171 call A(287168 call chpl_build_bounded_range(287164 call . task c"start") taskEnd)))
                        }
                      }
                      label _continueLabel[287184]
                      _indexOfInterest[287179]
                      _iterator[287180]
                    }
                    label _breakLabel[287185]
                  }
                }
                (287516 call _downEndCount _coforallCount[287514] nil[44])
                (287220 'coforall on block' 0 tmp[287215])
                (286986 'actuals list' tiMarkRef[294] state)
              }
            }
          }
          label _continueLabel[287526]
          _indexOfInterest[287521]
          _iterator[287522]
        }
        label _breakLabel[287527]
        Defer
        {
          {
            (287572 call _endCountFree _coforallCount[287514])
          }
        }
        (287577 call _waitEndCount _coforallCount[287514] 0)
      }
    }
  }
  { scopeless type
    void[4]
  }
}