AST dump for LayoutCS after pass scopeResolve.
Module use list: ChapelStandard RangeChunk DSIUtil Search Sort 

{ unknown debugCS[336091] "config" "no doc" "param" 0(336094 'end of statement') unknown LayoutCSDefaultToSorted[336096] "config" "param" 1(336099 'end of statement') function _ColumnComparator[336126].key[336107](arg _mt[336130]:_MT[238], arg this[336128]:_ColumnComparator[336126], arg idx[336104] : _tuple[56202](?)) : _unknown[51] "method" "primary method"
  {(336120 return(336118 call _build_tuple(336112 call idx[336104] 1)(336116 call idx[336104] 0)))
  } type _ColumnComparator[336126] const _columnComparator[336134] "const" "no doc" _ColumnComparator[336126](336137 'end of statement') function isCSType[336142](arg t[336140]:_any[178](?)) param : _unknown[51] "no doc"
  {(336152 return(354973 'is_subtype' CS[411933](?)(336148 call _to_borrowed t[336140])))
  } function CS[336292](?).dsiNewSparseDom[336178](arg _mt[336296]:_MT[238], arg this[336294]:CS[336292](?), param arg rank[336175] : int(64)[13], arg idxType[336180]:_any[178](?), arg dom[336183] : _domain[125908](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(336215 return(336188 'new'(_chpl_manager = unmanaged[220](?))(336214 call CSDom[411939](?) rank[336175] idxType[336180](336196 call . this[336294] c"compressRows")(336202 call . this[336294] c"sortedIndices")(336206 call . dom[336183] c"stridable")(336212 call _to_unmanaged this[336294]) dom[336183])))
  } function CS[336292](?).dsiClone[336222](arg _mt[336300]:_MT[238], arg this[336298]:CS[336292](?)) : _unknown[51] "method" "primary method"
  {(336240 return(336226 'new'(_chpl_manager = unmanaged[220](?))(336239 call CS[411933](?)(compressRows =(336229 call . this[336298] c"compressRows"))(sortedIndices =(336235 call . this[336298] c"sortedIndices")))))
  } function CS[336292](?).dsiEqualDMaps[336261](arg _mt[336304]:_MT[238], arg this[336302]:CS[336292](?), arg that[336258] :(336257 call CS[411933](?)(336249 call . this[336302] c"compressRows")(336254 call . this[336302] c"sortedIndices"))) param : _unknown[51] "method" "primary method"
  {(336264 return 1)
  } function CS[336292](?).dsiEqualDMaps[336273](arg _mt[336308]:_MT[238], arg this[336306]:CS[336292](?), arg that[336271]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {(336276 return 0)
  } function CS[336292](?).dsiIsLayout[336283](arg _mt[336312]:_MT[238], arg this[336310]:CS[336292](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {(336286 return 1)
  } type CS[336292](?) val super[355834]:BaseDist[145968] "super class" unknown compressRows[336162] "param" 1 bool[10] unknown sortedIndices[336168] "param" LayoutCSDefaultToSorted[336096] bool[10] type unmanaged CS[415596](?) type CS[411933](?) function CSDom[340954](?).init[336401](arg _mt[340958]:_MT[238], arg this[340956]:CSDom[340954](?), param arg rank[336399]:_any[178](?), arg idxType[336403]:_any[178](?), param arg compressRows[336405]:_any[178](?), param arg sortedIndices[336407]:_any[178](?), param arg stridable[336409]:_any[178](?), arg dist[336417] :(336415 call unmanaged CS[415596](?) compressRows[336405] sortedIndices[336407]), arg parentDom[336421] : _domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(336458 call _cond_test(336435 call ||(336426 call != rank[336399] 2)(336433 call !=(336429 call . parentDom[336421] c"rank") 2)))
    {(336456 call compilerError "Only 2D sparse domains are supported by the CS distribution")
    }
    if(336510 call _cond_test(336469 call !=(336465 call . parentDom[336421] c"idxType") idxType[336403]))
    {(336508 call compilerError(336505 call +(336496 call +(336493 call + "idxType mismatch in CSDom.init(): "(336491 call _cast string[26] idxType[336403])) " != ")(336503 call _cast string[26](336499 call . parentDom[336421] c"idxType"))))
    }(336523 call(336516 call .(366175 call . this[340956] c"super") c"init") rank[336399] idxType[336403] parentDom[336421])(336530 call =(336526 call . this[340956] c"compressRows") compressRows[336405])(336538 call =(336534 call . this[340956] c"sortedIndices") sortedIndices[336407])(336546 call =(336542 call . this[340956] c"stridable") stridable[336409])(336554 call =(336550 call . this[340956] c"dist") dist[336417])(336565 call =(411979 call . this[340956] c"rowRange")(336564 call(336559 call . parentDom[336421] c"dim") 0))(336576 call =(411984 call . this[340956] c"colRange")(336575 call(336570 call . parentDom[336421] c"dim") 1))(336616 call =(411989 call . this[340956] c"startIdxDom")(336613 IfExpr  compressRows[336405] then
    { scopeless(336595 call chpl__buildDomainExpr(336592 call chpl_build_bounded_range(336582 call .(366186 call . this[340956] c"rowRange") c"low")(336590 call +(336586 call .(366191 call . this[340956] c"rowRange") c"high") 1)))
    } else
    { scopeless(336611 call chpl__buildDomainExpr(336608 call chpl_build_bounded_range(336598 call .(366196 call . this[340956] c"colRange") c"low")(336606 call +(336602 call .(366201 call . this[340956] c"colRange") c"high") 1)))
    } ))(336624 call(336620 call . this[340956] c"complete"))(336634 call =(411995 call . this[340956] c"nnzDom")(336632 call chpl__buildDomainExpr(336629 call chpl_build_bounded_range 1(412000 call . this[340956] c"_nnz"))))(336639 call(412004 call . this[340956] c"dsiClear"))
  } function CSDom[340954](?).getNNZ[336645](arg _mt[340962]:_MT[238], arg this[340960]:CSDom[340954](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(336649 return(412009 call . this[340960] c"_nnz"))
  }
  { scopeless type int(64)[13]
  } function CSDom[340954](?).dsiMyDist[336657](arg _mt[340966]:_MT[238], arg this[340964]:CSDom[340954](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(336660 return(412014 call . this[340964] c"dist"))
  } function CSDom[340954](?).dsiAssignDomain[336671](arg _mt[340970]:_MT[238], arg this[340968]:CSDom[340954](?), arg rhs[336668] : _domain[125908](?), arg lhsPrivate[336674] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(336806 call _cond_test(336696 call &&(336687 call ==(336684 call _to_borrowed(336682 'typeof'(336679 call . rhs[336668] c"_instance")))(336686 'typeof' this[340968]))(336694 call ==(336690 call . this[340968] c"dsiNumIndices") 0)))
    {(336706 call =(336699 call . this[340968] c"_nnz")(336703 call . rhs[336668] c"_nnz"))(336718 call =(336711 call . this[340968] c"nnzDom")(336715 call . rhs[336668] c"nnzDom"))(336731 call =(336724 call . this[340968] c"startIdx")(336728 call . rhs[336668] c"startIdx"))(336742 call =(336735 call . this[340968] c"idx")(336739 call . rhs[336668] c"idx"))
    }
    {
      if(336802 call _cond_test(336754 call <(336752 call _to_borrowed(336750 'typeof'(336747 call . rhs[336668] c"_instance"))) DefaultSparseDom[378074](?)))
      {(336792 call(336757 call . this[340968] c"dsiBulkAdd")(336783 call(336764 call .(336761 call . rhs[336668] c"_instance") c"_indices")(336780 call #(336774 call chpl_build_low_bounded_range(336771 call .(336768 call . rhs[336668] c"nnzDom") c"low"))(336777 call . rhs[336668] c"_nnz")))(dataSorted =(336786 call . this[340968] c"compressRows"))(isUnique = 1))
      }
      {(336799 call chpl_assignDomainWithIndsIterSafeForRemoving this[340968] rhs[336668])
      }
    }
  } function CSDom[340954](?).dsiBuildArray[336818](arg _mt[340974]:_MT[238], arg this[340972]:CSDom[340954](?), arg eltType[336816]:_any[178](?), param arg initElts[336821] : bool[10]) : _unknown[51] "method" "primary method"
  {(336843 return(336826 'new'(_chpl_manager = unmanaged[220](?))(336842 call CSArr[412023](?)(eltType = eltType[336816])(rank =(412029 call . this[340972] c"rank"))(idxType =(412034 call . this[340972] c"idxType"))(dom =(336838 call _to_unmanaged this[340972]))(initElts = initElts[336821]))))
  } function CSDom[340954](?).dsiIndsIterSafeForRemoving[336850](arg _mt[340978]:_MT[238], arg this[340976]:CSDom[340954](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown cursor[336867](336864 IfExpr (336853 call . this[340976] c"compressRows") then
    { scopeless(336857 call .(366224 call . this[340976] c"rowRange") c"high")
    } else
    { scopeless(336861 call .(366229 call . this[340976] c"colRange") c"high")
    } )(336870 'end of statement')
    { unknown _indexOfInterest[336957] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[336958] "expr temp" "temp"(336967 'move' _iterator[336958](336965 call _getIterator(336978 call chpl_direct_range_iter 1(412070 call . this[340976] c"_nnz")(336974 call - 1))))
      Defer
      {
        {(336994 call _freeIterator _iterator[336958])
        }
      }
      { scopeless type(336983 'move' _indexOfInterest[336957](336980 call iteratorIndex _iterator[336958]))
      }
      ForLoop[336959]
      { unknown i[336987] "index var" "insert auto destroy"(336989 'move' i[336987] _indexOfInterest[336957])
        {
          { unknown tmp[336895] "temp"(336923 'move' tmp[336895](336916 call _cond_test(336918 call >(336920 call(412049 call . this[340976] c"startIdx") cursor[336867]) i[336987])))
            WhileDo[336900]
            {
              {(336891 call -= cursor[336867] 1)
              } label _continueLabel[336898](336911 'move' tmp[336895](336904 call _cond_test(336906 call >(336908 call(412042 call . this[340976] c"startIdx") cursor[336867]) i[336987]))) tmp[336895]
            } label _breakLabel[336899]
          }
          if(336953 call _cond_test(336928 call . this[340976] c"compressRows"))
          {(336939 yield(336937 call _build_tuple cursor[336867](336935 call(412057 call . this[340976] c"idx") i[336987])))
          }
          {(336950 yield(336948 call _build_tuple(336945 call(412063 call . this[340976] c"idx") i[336987]) cursor[336867]))
          }
        } label _continueLabel[336962] _indexOfInterest[336957] _iterator[336958]
      } label _breakLabel[336963]
    }
  } function CSDom[340954](?).these[337005](arg _mt[340982]:_MT[238], arg this[340980]:CSDom[340954](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown cursor[337022](337019 IfExpr (337008 call . this[340980] c"compressRows") then
    { scopeless(337012 call .(366236 call . this[340980] c"rowRange") c"low")
    } else
    { scopeless(337016 call .(366241 call . this[340980] c"colRange") c"low")
    } )(337025 'end of statement')
    { unknown _indexOfInterest[337116] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337117] "expr temp" "temp"(337126 'move' _iterator[337117](337124 call _getIterator(337131 call chpl_direct_range_iter 1(412104 call . this[340980] c"_nnz") 1)))
      Defer
      {
        {(337147 call _freeIterator _iterator[337117])
        }
      }
      { scopeless type(337136 'move' _indexOfInterest[337116](337133 call iteratorIndex _iterator[337117]))
      }
      ForLoop[337118]
      { unknown i[337140] "index var" "insert auto destroy"(337142 'move' i[337140] _indexOfInterest[337116])
        {
          { unknown tmp[337048] "temp"(337082 'move' tmp[337048](337072 call _cond_test(337074 call <=(337076 call(412083 call . this[340980] c"startIdx")(337078 call + cursor[337022] 1)) i[337140])))
            WhileDo[337053]
            {
              {(337044 call += cursor[337022] 1)
              } label _continueLabel[337051](337067 'move' tmp[337048](337057 call _cond_test(337059 call <=(337061 call(412076 call . this[340980] c"startIdx")(337063 call + cursor[337022] 1)) i[337140]))) tmp[337048]
            } label _breakLabel[337052]
          }
          if(337110 call _cond_test(337087 call . this[340980] c"compressRows"))
          {(337098 yield(337096 call _build_tuple cursor[337022](337094 call(412091 call . this[340980] c"idx") i[337140])))
          }
          {(337108 yield(337106 call _build_tuple(337103 call(412097 call . this[340980] c"idx") i[337140]) cursor[337022]))
          }
        } label _continueLabel[337121] _indexOfInterest[337116] _iterator[337117]
      } label _breakLabel[337122]
    }
  } function CSDom[340954](?).these[337162](arg _mt[340986]:_MT[238], arg this[340984]:CSDom[340954](?), param arg tag[337159] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { const numElems[337176] "const"(412111 call . this[340984] c"_nnz")(337179 'end of statement') const numChunks[337184] "const"(337183 call _computeNumChunks numElems[337176])(337187 'end of statement')
    if(337214 call _cond_test debugCS[336091])
    {(337212 call writeln "CSDom leader: " numChunks[337184] " chunks, " numElems[337176] " elems")
    }
    if(337428 call _cond_test(337221 call == numChunks[337184] 1))
    {(337229 yield(337227 call _build_tuple this[340984] 1 numElems[337176]))
    }
    { unknown tmpIter[337257] "expr temp" "maybe ref" "no copy" "temp"(337260 'move' tmpIter[337257](337242 call chunks module=[255] RangeChunk[266477](337238 call chpl_build_bounded_range 1 numElems[337176]) numChunks[337184])) unknown isRngDomArr[337409] "maybe param" "temp"(337424 'move' isRngDomArr[337409](337422 call ||(337411 call isBoundedRange tmpIter[337257])(337420 call ||(337414 call isDomain tmpIter[337257])(337417 call isArray tmpIter[337257]))))
      if isRngDomArr[337409]
      { const _coforallCount[337276] "const" "end count" "temp"(337345 'move' _coforallCount[337276](337342 call _endCountAlloc 1)) unknown numTasks[337277] "temp"(337329 'move' numTasks[337277](337325 call . tmpIter[337257] c"size"))(337320 call _upEndCount _coforallCount[337276] 1 numTasks[337277])(337317 call chpl_resetTaskSpawn numTasks[337277]) unknown _indexOfInterest[337284] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337285] "expr temp" "temp"(337294 'move' _iterator[337285](337292 call _getIterator tmpIter[337257]))
        Defer
        {
          {(337310 call _freeIterator _iterator[337285])
          }
        }
        { scopeless type(337299 'move' _indexOfInterest[337284](337296 call iteratorIndex _iterator[337285]))
        }
        ForLoop[337286]
        { unknown chunk[337303] "coforall index var" "index var" "insert auto destroy"(337305 'move' chunk[337303] _indexOfInterest[337284])
          {(337263 yield(337265 call _build_tuple this[340984](337268 call . chunk[337303] c"first")(337272 call . chunk[337303] c"last")))(337279 call _downEndCount _coforallCount[337276] nil[44])(337278 'coforall loop')
          } label _continueLabel[337289] _indexOfInterest[337284] _iterator[337285]
        } label _breakLabel[337290]
        Defer
        {
          {(337332 call _endCountFree _coforallCount[337276])
          }
        }(337337 call _waitEndCount _coforallCount[337276] 1 numTasks[337277])
      }
      { const _coforallCount[337349] "const" "end count" "temp"(337406 'move' _coforallCount[337349](337403 call _endCountAlloc 1)) unknown _indexOfInterest[337357] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337358] "expr temp" "temp"(337367 'move' _iterator[337358](337365 call _getIterator tmpIter[337257]))
        Defer
        {
          {(337383 call _freeIterator _iterator[337358])
          }
        }
        { scopeless type(337372 'move' _indexOfInterest[337357](337369 call iteratorIndex _iterator[337358]))
        }
        ForLoop[337359]
        { unknown chunk[337376] "coforall index var" "index var" "insert auto destroy"(337378 'move' chunk[337376] _indexOfInterest[337357])(337390 call _upEndCount _coforallCount[337349] 1)
          {(337255 yield(337253 call _build_tuple this[340984](337245 call . chunk[337376] c"first")(337250 call . chunk[337376] c"last")))(337352 call _downEndCount _coforallCount[337349] nil[44])(337351 'coforall loop')
          } label _continueLabel[337362] _indexOfInterest[337357] _iterator[337358]
        } label _breakLabel[337363]
        Defer
        {
          {(337394 call _endCountFree _coforallCount[337349])
          }
        }(337399 call _waitEndCount _coforallCount[337349] 1)
      }(366247 'referenced modules list' RangeChunk[266477])
    }(355620 'used modules list'(337172 'use' DSIUtil[230907]))
  }
  {(337169 call == tag[337159] leader[447])
  } function CSDom[340954](?).these[337442](arg _mt[340990]:_MT[238], arg this[340988]:CSDom[340954](?), param arg tag[337439] : iterKind[453], arg followThis[337450] :(337448 call _build_tuple ?[260] ?[260] ?[260])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[337468] "temp" followThis[337450](337478 call _check_tuple_var_decl tmp[337468] 3) unknown followThisDom[337460](337469 call tmp[337468] 0) unknown startIx[337462](337472 call tmp[337468] 1) unknown endIx[337464](337475 call tmp[337468] 2)(337483 'end of statement')
    if(337511 call _cond_test 1)
    {(337509 call assert(337489 call <= startIx[337462] endIx[337464]) "CSDom follower - got nothing to iterate over")
    }
    if(337543 call _cond_test(337518 call != followThisDom[337460] this[340988]))
    {(337541 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays (CS layout)")
    } unknown cursor[337552](337551 call(412136 call . this[340988] c"_private_findStart") startIx[337462])(337555 'end of statement')
    if(337620 call _cond_test debugCS[336091])
    {(337618 call writeln "CSDom follower: " startIx[337462] ".." endIx[337464] "  startIdx(" cursor[337552] ")="(337617 call(412146 call . this[340988] c"startIdx") cursor[337552]))
    }
    { unknown _indexOfInterest[337713] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337714] "expr temp" "temp"(337723 'move' _iterator[337714](337721 call _getIterator(337728 call chpl_direct_range_iter startIx[337462] endIx[337464] 1)))
      Defer
      {
        {(337744 call _freeIterator _iterator[337714])
        }
      }
      { scopeless type(337733 'move' _indexOfInterest[337713](337730 call iteratorIndex _iterator[337714]))
      }
      ForLoop[337715]
      { unknown i[337737] "index var" "insert auto destroy"(337739 'move' i[337737] _indexOfInterest[337713])
        {
          { unknown tmp[337645] "temp"(337679 'move' tmp[337645](337669 call _cond_test(337671 call <=(337673 call(412160 call . this[340988] c"startIdx")(337675 call + cursor[337552] 1)) i[337737])))
            WhileDo[337650]
            {(337642 call += cursor[337552] 1) label _continueLabel[337648](337664 'move' tmp[337645](337654 call _cond_test(337656 call <=(337658 call(412153 call . this[340988] c"startIdx")(337660 call + cursor[337552] 1)) i[337737]))) tmp[337645]
            } label _breakLabel[337649]
          }
          if(337707 call _cond_test(337684 call . this[340988] c"compressRows"))
          {(337695 yield(337693 call _build_tuple cursor[337552](337691 call(412168 call . this[340988] c"idx") i[337737])))
          }
          {(337705 yield(337703 call _build_tuple(337700 call(412174 call . this[340988] c"idx") i[337737]) cursor[337552]))
          }
        } label _continueLabel[337718] _indexOfInterest[337713] _iterator[337714]
      } label _breakLabel[337719]
    }
  }
  {(337458 call == tag[337439] follower[449])
  } function CSDom[340954](?).these[337760](arg _mt[340994]:_MT[238], arg this[340992]:CSDom[340954](?), param arg tag[337757] : iterKind[453], arg followThis[337762]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {(337790 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")(337794 yield 0)
  }
  {(337769 call == tag[337757] follower[449])
  } function CSDom[340954](?)._private_findStart[337803](arg _mt[340998]:_MT[238], arg this[340996]:CSDom[340954](?), arg startIx[337801]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(337817 return(337816 call(412184 call . this[340996] c"_private_findStart") startIx[337801](337809 call .(366263 call . this[340996] c"startIdxDom") c"low")(337813 call .(366268 call . this[340996] c"startIdxDom") c"high")))
  } function CSDom[340954](?)._private_findStart[337826](arg _mt[341002]:_MT[238], arg this[341000]:CSDom[340954](?), arg startIx[337824]:_any[178](?), arg low[337828]:_any[178](?), arg high[337830]:_any[178](?)) : _unknown[51] "method" "primary method"
  { unknown approx[337833] 2(337836 'end of statement') unknown l[337839] low[337828] unknown h[337843] high[337830](337846 'end of statement')
    { unknown tmp[337889] "temp"(337919 'move' tmp[337889](337911 call _cond_test(337913 call > h[337843](337916 call + l[337839] approx[337833]))))
      WhileDo[337894]
      {
        { unknown m[337861](337859 call /(337856 call + h[337843] l[337839]) 2)(337864 'end of statement')
          if(337883 call _cond_test(337871 call <=(337869 call(412194 call . this[341000] c"startIdx") m[337861]) startIx[337824]))
          {(337875 call = l[337839] m[337861])
          }
          {(337880 call = h[337843] m[337861])
          }
        } label _continueLabel[337892](337906 'move' tmp[337889](337898 call _cond_test(337900 call > h[337843](337903 call + l[337839] approx[337833])))) tmp[337889]
      } label _breakLabel[337893]
    } unknown hh[337930](337929 call min(337925 call + l[337839] approx[337833]) high[337830])(337933 'end of statement')
    if(337992 call _cond_test 1)
    {(337961 call assert(337941 call <=(337939 call(412215 call . this[341000] c"startIdx") l[337839]) startIx[337824]) "CSDom.findStart-1")(337990 call assert(337970 call < startIx[337824](337969 call(412223 call . this[341000] c"startIdx") hh[337930])) "CSDom.findStart-2")
    }(337997 return l[337839])
  } function CSDom[340954](?).stopIdx[338005](arg _mt[341006]:_MT[238], arg this[341004]:CSDom[340954](?), arg i[338003]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(338017 return(338015 call -(338013 call(412230 call . this[341004] c"startIdx")(338010 call + i[338003] 1)) 1))
  } function CSDom[340954](?).find[338031](arg _mt[341010]:_MT[238], arg this[341008]:CSDom[340954](?), arg ind[338028] :(338026 call *(412236 call . this[341008] c"rank")(412241 call . this[341008] c"idxType"))) : _unknown[51] "method" "primary method"
  { const tmp[338043] "const" "temp" ind[338028](338050 call _check_tuple_var_decl tmp[338043] 2) const row[338037] "const"(338044 call tmp[338043] 0) const col[338039] "const"(338047 call tmp[338043] 1)(338055 'end of statement') unknown ret[338061](338059 call _build_tuple bool[10](412247 call . this[341008] c"idxType"))(338064 'end of statement')
    if(338167 call _cond_test(338066 call . this[341008] c"compressRows"))
    {
      if(338112 call _cond_test(338070 call . this[341008] c"sortedIndices"))
      {(338089 call = ret[338061](338088 call binarySearch(412253 call . this[341008] c"idx") col[338039](lo =(338081 call(412259 call . this[341008] c"startIdx") row[338037]))(hi =(338086 call(412264 call . this[341008] c"stopIdx") row[338037]))))
      }
      {(338108 call = ret[338061](338107 call linearSearch(412271 call . this[341008] c"idx") col[338039](lo =(338100 call(412277 call . this[341008] c"startIdx") row[338037]))(hi =(338105 call(412282 call . this[341008] c"stopIdx") row[338037]))))
      }
    }
    {
      if(338161 call _cond_test(338119 call . this[341008] c"sortedIndices"))
      {(338138 call = ret[338061](338137 call binarySearch(412289 call . this[341008] c"idx") row[338037](lo =(338130 call(412295 call . this[341008] c"startIdx") col[338039]))(hi =(338135 call(412300 call . this[341008] c"stopIdx") col[338039]))))
      }
      {(338157 call = ret[338061](338156 call linearSearch(412307 call . this[341008] c"idx") row[338037](lo =(338149 call(412313 call . this[341008] c"startIdx") col[338039]))(hi =(338154 call(412318 call . this[341008] c"stopIdx") col[338039]))))
      }
    }(338172 return ret[338061])(355622 'used modules list'(338034 'use' Search[291260]))
  } function CSDom[340954](?).dsiMember[338185](arg _mt[341014]:_MT[238], arg this[341012]:CSDom[340954](?), arg ind[338182] :(338180 call *(412325 call . this[341012] c"rank")(412330 call . this[341012] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    if(338220 call _cond_test(338193 call(338188 call .(366276 call . this[341012] c"parentDom") c"contains") ind[338182]))
    { const tmp[338203] "const" "temp"(338202 call(412335 call . this[341012] c"find") ind[338182])(338210 call _check_tuple_var_decl tmp[338203] 2) const found[338194] "const"(338204 call tmp[338203] 0) const loc[338196] "const"(338207 call tmp[338203] 1)(338215 'end of statement')(338218 return found[338194])
    }(338226 return 0)
  } function CSDom[340954](?).dsiFirst[338232](arg _mt[341018]:_MT[238], arg this[341016]:CSDom[340954](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338251 call _cond_test(338236 call ==(412342 call . this[341016] c"_nnz") 0))
    {(338249 return(338247 call -(338239 call .(366281 call . this[341016] c"parentDom") c"low")(338245 call _build_tuple 1 1)))
    } const _low[338261] "const"(338258 call .(366286 call . this[341016] c"nnzDom") c"low")(338264 'end of statement')
    { unknown _indexOfInterest[338328] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338329] "expr temp" "temp"(338338 'move' _iterator[338329](338336 call _getIterator(412347 call . this[341016] c"startIdxDom")))
      Defer
      {
        {(338354 call _freeIterator _iterator[338329])
        }
      }
      { scopeless type(338343 'move' _indexOfInterest[338328](338340 call iteratorIndex _iterator[338329]))
      }
      ForLoop[338330]
      { unknown i[338347] "index var" "insert auto destroy"(338349 'move' i[338347] _indexOfInterest[338328])
        {
          if(338323 call _cond_test(338272 call >(338270 call(412352 call . this[341016] c"startIdx") i[338347]) _low[338261]))
          {
            if(338316 call _cond_test(338275 call . this[341016] c"compressRows"))
            {(338295 return(338293 call _build_tuple(338280 call - i[338347] 1)(338291 call(412360 call . this[341016] c"idx")(338287 call .(338284 call .(366292 call . this[341016] c"idx") c"_dom") c"low"))))
            }
            {(338314 return(338312 call _build_tuple(338306 call(412365 call . this[341016] c"idx")(338302 call .(338299 call .(366297 call . this[341016] c"idx") c"_dom") c"low"))(338309 call - i[338347] 1)))
            }
          }
        } label _continueLabel[338333] _indexOfInterest[338328] _iterator[338329]
      } label _breakLabel[338334]
    }(338380 call halt "Something went wrong in dsiFirst")(338387 return(338385 call _build_tuple 0 0))
  } function CSDom[340954](?).dsiLast[338393](arg _mt[341022]:_MT[238], arg this[341020]:CSDom[340954](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338412 call _cond_test(338397 call ==(412371 call . this[341020] c"_nnz") 0))
    {(338410 return(338408 call -(338400 call .(366302 call . this[341020] c"parentDom") c"low")(338406 call _build_tuple 1 1)))
    } unknown _last[338428](338426 call -(338424 call(338419 call .(366307 call . this[341020] c"parentDom") c"low") 1) 1)(338431 'end of statement')
    { unknown _indexOfInterest[338454] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338455] "expr temp" "temp"(338464 'move' _iterator[338455](338462 call _getIterator(412376 call . this[341020] c"startIdxDom")))
      Defer
      {
        {(338480 call _freeIterator _iterator[338455])
        }
      }
      { scopeless type(338469 'move' _indexOfInterest[338454](338466 call iteratorIndex _iterator[338455]))
      }
      ForLoop[338456]
      { unknown i[338473] "index var" "insert auto destroy"(338475 'move' i[338473] _indexOfInterest[338454])
        if(338449 call _cond_test(338439 call >(338437 call(412381 call . this[341020] c"startIdx") i[338473]) _last[338428]))
        {(338446 call = _last[338428](338444 call - i[338473] 1))
        } label _continueLabel[338459] _indexOfInterest[338454] _iterator[338455]
      } label _breakLabel[338460]
    }
    if(338511 call _cond_test(338488 call . this[341020] c"compressRows"))
    {(338499 return(338497 call _build_tuple _last[338428](338495 call(412391 call . this[341020] c"idx")(412396 call . this[341020] c"_nnz"))))
    }
    {(338509 return(338507 call _build_tuple(338504 call(412401 call . this[341020] c"idx")(412406 call . this[341020] c"_nnz")) _last[338428]))
    }
  } function CSDom[340954](?).dsiAdd[338528](arg _mt[341026]:_MT[238], arg this[341024]:CSDom[340954](?), arg ind[338525] :(338523 call *(412412 call . this[341024] c"rank")(412417 call . this[341024] c"idxType"))) : _unknown[51] "method" "primary method"
  {(338533 call(412421 call . this[341024] c"boundsCheck") ind[338525]) const tmp[338545] "const" "temp"(338544 call(412426 call . this[341024] c"find") ind[338525])(338552 call _check_tuple_var_decl tmp[338545] 2) const found[338536] "const"(338546 call tmp[338545] 0) const insertPt[338538] "const"(338549 call tmp[338545] 1)(338557 'end of statement')
    if(338562 call _cond_test found[338536])
    {(338560 return 0)
    }(338569 call +=(412433 call . this[341024] c"_nnz") 1) unknown oldNNZDomSize[338576](338573 call .(366313 call . this[341024] c"nnzDom") c"size")(338579 'end of statement')(338583 call(412437 call . this[341024] c"_grow")(412442 call . this[341024] c"_nnz")) const tmp[338591] "const" "temp" ind[338525](338598 call _check_tuple_var_decl tmp[338591] 2) const row[338585] "const"(338592 call tmp[338591] 0) const col[338587] "const"(338595 call tmp[338591] 1)(338603 'end of statement')
    { unknown _indexOfInterest[338632] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338633] "expr temp" "temp"(338642 'move' _iterator[338633](338640 call _getIterator(338659 call chpl_direct_range_iter insertPt[338538](338656 call -(412461 call . this[341024] c"_nnz") 1)(338652 call - 1))))
      Defer
      {
        {(338675 call _freeIterator _iterator[338633])
        }
      }
      { scopeless type(338664 'move' _indexOfInterest[338632](338661 call iteratorIndex _iterator[338633]))
      }
      ForLoop[338634]
      { unknown i[338668] "index var" "insert auto destroy"(338670 'move' i[338668] _indexOfInterest[338632])
        {(338628 call =(338623 call(412448 call . this[341024] c"idx")(338620 call + i[338668] 1))(338627 call(412454 call . this[341024] c"idx") i[338668]))
        } label _continueLabel[338637] _indexOfInterest[338632] _iterator[338633]
      } label _breakLabel[338638]
    }
    if(338702 call _cond_test(338683 call . this[341024] c"compressRows"))
    {(338691 call =(338689 call(412466 call . this[341024] c"idx") insertPt[338538]) col[338587])
    }
    {(338699 call =(338697 call(412473 call . this[341024] c"idx") insertPt[338538]) row[338585])
    } unknown start[338717](338714 IfExpr (338709 call . this[341024] c"compressRows") then
    { scopeless row[338585]
    } else
    { scopeless col[338587]
    } )(338720 'end of statement')
    { unknown _indexOfInterest[338741] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338742] "expr temp" "temp"(338751 'move' _iterator[338742](338749 call _getIterator(338762 call chpl_direct_range_iter(338755 call + start[338717] 1)(338759 call .(366320 call . this[341024] c"startIdxDom") c"high") 1)))
      Defer
      {
        {(338778 call _freeIterator _iterator[338742])
        }
      }
      { scopeless type(338767 'move' _indexOfInterest[338741](338764 call iteratorIndex _iterator[338742]))
      }
      ForLoop[338743]
      { unknown rc[338771] "index var" "insert auto destroy"(338773 'move' rc[338771] _indexOfInterest[338741])
        {(338737 call +=(338735 call(412482 call . this[341024] c"startIdx") rc[338771]) 1)
        } label _continueLabel[338746] _indexOfInterest[338741] _iterator[338742]
      } label _breakLabel[338747]
    }
    { unknown _indexOfInterest[338812] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338813] "expr temp" "temp"(338822 'move' _iterator[338813](338820 call _getIterator(412489 call . this[341024] c"_arrs")))
      Defer
      {
        {(338838 call _freeIterator _iterator[338813])
        }
      }
      { scopeless type(338827 'move' _indexOfInterest[338812](338824 call iteratorIndex _iterator[338813]))
      }
      ForLoop[338814]
      { unknown a[338831] "index var" "insert auto destroy"(338833 'move' a[338831] _indexOfInterest[338812])
        {(338809 call(338788 call . a[338831] c"sparseShiftArray")(338796 call chpl_build_bounded_range insertPt[338538](338794 call -(412495 call . this[341024] c"_nnz") 1))(338807 call chpl_build_bounded_range(338801 call + oldNNZDomSize[338576] 1)(338804 call .(366326 call . this[341024] c"nnzDom") c"size")))
        } label _continueLabel[338817] _indexOfInterest[338812] _iterator[338813]
      } label _breakLabel[338818]
    }(338846 return 1)
  } function CSDom[340954](?).bulkAdd_help[338864](arg _mt[341030]:_MT[238], arg this[341028]:CSDom[340954](?), arg inds[338861] :(338859 call chpl__buildArrayRuntimeType unknown indsDom[338852](338857 call *(412501 call . this[341028] c"rank")(412506 call . this[341028] c"idxType"))), arg dataSorted[338867] = 0, arg isUnique[338871] = 0, arg addOn[338875] = nilLocale[89942]) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(338920 call _cond_test(338884 call != addOn[338875] nilLocale[89942]))
    {
      if(338915 call _cond_test(338891 call != addOn[338875](338889 call chpl_localeID_to_locale(338888 '_wide_get_locale' this[341028]))))
      {(338912 call halt "Bulk index addition is only possible on the locale where the\n            sparse domain is created")
      }
    }
    if(338950 call _cond_test(338925 call . this[341028] c"compressRows"))
    {(338938 call(412515 call . this[341028] c"bulkAdd_prepareInds") inds[338861] dataSorted[338867] isUnique[338871](cmp = defaultComparator[267996]))(366331 'referenced modules list' Sort[267987])
    }
    {(338947 call(412522 call . this[341028] c"bulkAdd_prepareInds") inds[338861] dataSorted[338867] isUnique[338871](cmp = _columnComparator[336134]))
    }
    if(339383 call _cond_test(338957 call ==(412531 call . this[341028] c"_nnz") 0))
    { const dupCount[338968] "const"(338965 IfExpr  isUnique[338871] then
      { scopeless 0
      } else
      { scopeless(338964 call(412536 call . this[341028] c"_countDuplicates") inds[338861])
      } )(338971 'end of statement')(338981 call +=(412542 call . this[341028] c"_nnz")(338979 call -(338975 call . inds[338861] c"size") dupCount[338968]))(338986 call(412547 call . this[341028] c"_bulkGrow")) unknown idxIdx[338989] 1(338992 'end of statement') unknown prevIdx[339004](339002 call -(338994 call .(366337 call . this[341028] c"parentDom") c"low")(339000 call _build_tuple 1 1))(339007 'end of statement') unknown current[339009](412552 call . this[341028] c"idxType")(339012 'end of statement')
      if(339045 call _cond_test(339014 call . this[341028] c"compressRows"))
      {(339028 call = current[339009](339025 call .(339024 call(339019 call .(366343 call . this[341028] c"parentDom") c"dim") 0) c"low"))
      }
      {(339042 call = current[339009](339039 call .(339038 call(339033 call .(366348 call . this[341028] c"parentDom") c"dim") 1) c"low"))
      }
      { unknown _indexOfInterest[339249] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339250] "expr temp" "temp"(339259 'move' _iterator[339250](339257 call _getIterator inds[338861]))
        Defer
        {
          {(339289 call _freeIterator _iterator[339250])
          }
        }
        { scopeless type(339264 'move' _indexOfInterest[339249](339261 call iteratorIndex _iterator[339250]))
        }
        ForLoop[339251]
        {(339269 call _check_tuple_var_decl _indexOfInterest[339249] 2) unknown i[339275] "index var" "insert auto destroy"(339277 'move' i[339275](339273 call _indexOfInterest[339249] 0)) unknown j[339282] "index var" "insert auto destroy"(339284 'move' j[339282](339280 call _indexOfInterest[339249] 1))
          {
            if(339082 call _cond_test(339068 call &&(339058 call ! isUnique[338871])(339066 call ==(339063 call _build_tuple i[339275] j[339282]) prevIdx[339004])))
            {
              continue _continueLabel[339254] _continueLabel[339254]
            }
            {(339079 call = prevIdx[339004](339077 call _build_tuple i[339275] j[339282]))
            }
            if(339245 call _cond_test(339090 call . this[341028] c"compressRows"))
            {
              { unknown tmp[339117] "temp"(339141 'move' tmp[339117](339136 call _cond_test(339138 call != i[339275] current[339009])))
                WhileDo[339122]
                {
                  {(339099 call += current[339009] 1)(339114 call =(339109 call(412568 call . this[341028] c"startIdx")(339106 call + current[339009] 1))(339113 call(412574 call . this[341028] c"startIdx") current[339009]))
                  } label _continueLabel[339120](339131 'move' tmp[339117](339126 call _cond_test(339128 call != i[339275] current[339009]))) tmp[339117]
                } label _breakLabel[339121]
              }(339153 call +=(339151 call(412584 call . this[341028] c"startIdx")(339148 call + i[339275] 1)) 1)(339161 call =(339159 call(412590 call . this[341028] c"idx") idxIdx[338989]) j[339282])(339166 call += idxIdx[338989] 1)
            }
            {
              { unknown tmp[339193] "temp"(339217 'move' tmp[339193](339212 call _cond_test(339214 call != j[339282] current[339009])))
                WhileDo[339198]
                {
                  {(339175 call += current[339009] 1)(339190 call =(339185 call(412599 call . this[341028] c"startIdx")(339182 call + current[339009] 1))(339189 call(412605 call . this[341028] c"startIdx") current[339009]))
                  } label _continueLabel[339196](339207 'move' tmp[339193](339202 call _cond_test(339204 call != j[339282] current[339009]))) tmp[339193]
                } label _breakLabel[339197]
              }(339229 call +=(339227 call(412615 call . this[341028] c"startIdx")(339224 call + j[339282] 1)) 1)(339237 call =(339235 call(412621 call . this[341028] c"idx") idxIdx[338989]) i[339275])(339242 call += idxIdx[338989] 1)
            }
          } label _continueLabel[339254] _indexOfInterest[339249] _iterator[339250]
        } label _breakLabel[339255]
      } const startIdxHigh[339303] "const"(339302 call(412629 call . this[341028] c"startIdx")(339299 call + current[339009] 1))(339306 'end of statement')
      { unknown _indexOfInterest[339330] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339331] "expr temp" "temp"(339340 'move' _iterator[339331](339338 call _getIterator(339354 call chpl_direct_range_iter(339344 call + current[339009] 2)(339348 call .(339350 call .(366354 call . this[341028] c"startIdx") c"_dom") c"high") 1)))
        Defer
        {
          {(339370 call _freeIterator _iterator[339331])
          }
        }
        { scopeless type(339359 'move' _indexOfInterest[339330](339356 call iteratorIndex _iterator[339331]))
        }
        ForLoop[339332]
        { unknown r[339363] "index var" "insert auto destroy"(339365 'move' r[339363] _indexOfInterest[339330])
          {(339326 call =(339324 call(412635 call . this[341028] c"startIdx") r[339363]) startIdxHigh[339303])
          } label _continueLabel[339335] _indexOfInterest[339330] _iterator[339331]
        } label _breakLabel[339336]
      }(339381 return(339379 call - idxIdx[338989] 1))
    } const tmp[339398] "const" "temp"(339397 call(412643 call . this[341028] c"__getActualInsertPts") this[341028] inds[338861] isUnique[338871])(339405 call _check_tuple_var_decl tmp[339398] 2) const actualInsertPts[339387] "const"(339399 call tmp[339398] 0) const actualAddCnt[339389] "const"(339402 call tmp[339398] 1)(339410 'end of statement') const oldnnz[339412] "const"(412651 call . this[341028] c"_nnz")(339415 'end of statement')(339418 call +=(412656 call . this[341028] c"_nnz") actualAddCnt[339389])(339423 call(412661 call . this[341028] c"_bulkGrow")) unknown newIndIdx[339429](339426 call . indsDom[338852] c"high")(339432 'end of statement') unknown oldIndIdx[339434] oldnnz[339412](339437 'end of statement') unknown newLoc[339442](339441 call actualInsertPts[339387] newIndIdx[339429])(339445 'end of statement')
    { unknown tmp[339484] "temp"(339512 'move' tmp[339484](339505 call _cond_test(339507 call == newLoc[339442](339510 call - 1))))
      WhileDo[339489]
      {
        {(339454 call -= newIndIdx[339429] 1)
          if(339471 call _cond_test(339466 call == newIndIdx[339429](339464 call -(339460 call . indsDom[338852] c"low") 1)))
          {
            break _breakLabel[339488] _breakLabel[339488]
          }(339481 call = newLoc[339442](339480 call actualInsertPts[339387] newIndIdx[339429]))
        } label _continueLabel[339487](339500 'move' tmp[339484](339493 call _cond_test(339495 call == newLoc[339442](339498 call - 1)))) tmp[339484]
      } label _breakLabel[339488]
    } unknown arrShiftMap[339528](339526 call chpl__buildArrayRuntimeType(339524 call chpl__ensureDomainExpr(339520 call chpl__buildDomainExpr(339517 call chpl_build_bounded_range 1 oldnnz[339412]))) int(64)[13])(339531 'end of statement')
    { unknown _indexOfInterest[339747] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339748] "expr temp" "temp"(339757 'move' _iterator[339748](339755 call _getIterator(339768 call chpl_direct_range_iter 1(412728 call . this[341028] c"_nnz")(339764 call - 1))))
      Defer
      {
        {(339784 call _freeIterator _iterator[339748])
        }
      }
      { scopeless type(339773 'move' _indexOfInterest[339747](339770 call iteratorIndex _iterator[339748]))
      }
      ForLoop[339749]
      { unknown i[339777] "index var" "insert auto destroy"(339779 'move' i[339777] _indexOfInterest[339747])
        {
          if(339741 call _cond_test(339550 call &&(339544 call >= oldIndIdx[339434] 1)(339548 call > i[339777] newLoc[339442])))
          {(339560 call =(339555 call(412680 call . this[341028] c"idx") i[339777])(339559 call(412686 call . this[341028] c"idx") oldIndIdx[339434]))(339569 call =(339567 call arrShiftMap[339528] oldIndIdx[339434]) i[339777])(339574 call -= oldIndIdx[339434] 1)
          }
          {
            if(339736 call _cond_test(339588 call &&(339582 call >= newIndIdx[339429](339579 call . indsDom[338852] c"low"))(339586 call == i[339777] newLoc[339442])))
            {
              if(339624 call _cond_test(339591 call . this[341028] c"compressRows"))
              {(339605 call =(339597 call(412699 call . this[341028] c"idx") i[339777])(339604 call(339601 call inds[338861] newIndIdx[339429]) 1))
              }
              {(339620 call =(339612 call(412707 call . this[341028] c"idx") i[339777])(339619 call(339616 call inds[338861] newIndIdx[339429]) 0))
              }(339631 call -= newIndIdx[339429] 1)
              if(339656 call _cond_test(339639 call >= newIndIdx[339429](339636 call . indsDom[338852] c"low")))
              {(339646 call = newLoc[339442](339645 call actualInsertPts[339387] newIndIdx[339429]))
              }
              {(339653 call = newLoc[339442](339651 call - 2))
              }
              { unknown tmp[339700] "temp"(339728 'move' tmp[339700](339721 call _cond_test(339723 call == newLoc[339442](339726 call - 1))))
                WhileDo[339705]
                {
                  {(339670 call -= newIndIdx[339429] 1)
                    if(339687 call _cond_test(339682 call == newIndIdx[339429](339680 call -(339676 call . indsDom[338852] c"low") 1)))
                    {
                      break _breakLabel[339704] _breakLabel[339704]
                    }(339697 call = newLoc[339442](339696 call actualInsertPts[339387] newIndIdx[339429]))
                  } label _continueLabel[339703](339716 'move' tmp[339700](339709 call _cond_test(339711 call == newLoc[339442](339714 call - 1)))) tmp[339700]
                } label _breakLabel[339704]
              }
            }
            {(339734 call halt "Something went wrong")
            }
          }
        } label _continueLabel[339752] _indexOfInterest[339747] _iterator[339748]
      } label _breakLabel[339753]
    } unknown prevCursor[339818](339815 IfExpr (339792 call . this[341028] c"compressRows") then
    { scopeless(339802 call .(339801 call(339796 call .(366366 call . this[341028] c"parentDom") c"dim") 0) c"low")
    } else
    { scopeless(339812 call .(339811 call(339806 call .(366371 call . this[341028] c"parentDom") c"dim") 1) c"low")
    } )(339821 'end of statement') unknown cursor[339823] int(64)[13](339826 'end of statement') unknown cursorCnt[339828] 0(339831 'end of statement')
    { unknown _indexOfInterest[339988] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339989] "expr temp" "temp"(340003 'move' _iterator[339989](339840 call _build_tuple(339998 call _getIterator inds[338861])(340001 call _getIterator actualInsertPts[339387])))
      Defer
      {
        {(340033 call _freeIterator _iterator[339989])
        }
      }
      { scopeless type(340008 'move' _indexOfInterest[339988](340005 call iteratorIndex _iterator[339989]))
      }
      ForLoop[339990]
      {(340013 call _check_tuple_var_decl _indexOfInterest[339988] 2) unknown ind[340019] "index var" "insert auto destroy"(340021 'move' ind[340019](340017 call _indexOfInterest[339988] 0)) unknown p[340026] "index var" "insert auto destroy"(340028 'move' p[340026](340024 call _indexOfInterest[339988] 1))
        {
          if(339850 call _cond_test(339845 call == p[340026](339843 call - 1)))
          {
            continue _continueLabel[339993] _continueLabel[339993]
          }
          if(339878 call _cond_test(339857 call . this[341028] c"compressRows"))
          {(339865 call = cursor[339823](339864 call ind[340019] 0))
          }
          {(339874 call = cursor[339823](339873 call ind[340019] 1))
          }
          if(339983 call _cond_test(339884 call == cursor[339823] prevCursor[339818]))
          {(339888 call += cursorCnt[339828] 1)
          }
          {(339899 call +=(339897 call(412741 call . this[341028] c"startIdx")(339894 call + prevCursor[339818] 1)) cursorCnt[339828])
            if(339969 call _cond_test(339908 call >(339905 call - cursor[339823] prevCursor[339818]) 1))
            {
              { unknown _indexOfInterest[339927] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339928] "expr temp" "temp"(339937 'move' _iterator[339928](339935 call _getIterator(339945 call chpl_direct_range_iter(339941 call + prevCursor[339818] 2) cursor[339823] 1)))
                Defer
                {
                  {(339961 call _freeIterator _iterator[339928])
                  }
                }
                { scopeless type(339950 'move' _indexOfInterest[339927](339947 call iteratorIndex _iterator[339928]))
                }
                ForLoop[339929]
                { unknown i[339954] "index var" "insert auto destroy"(339956 'move' i[339954] _indexOfInterest[339927])
                  {(339923 call +=(339921 call(412750 call . this[341028] c"startIdx") i[339954]) cursorCnt[339828])
                  } label _continueLabel[339932] _indexOfInterest[339927] _iterator[339928]
                } label _breakLabel[339933]
              }
            }(339975 call += cursorCnt[339828] 1)(339980 call = prevCursor[339818] cursor[339823])
          }
        } label _continueLabel[339993] _indexOfInterest[339988] _iterator[339989]
      } label _breakLabel[339994]
    }
    { unknown _indexOfInterest[340060] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340061] "expr temp" "temp"(340070 'move' _iterator[340061](340068 call _getIterator(340081 call chpl_direct_range_iter(340074 call + prevCursor[339818] 1)(340078 call .(366377 call . this[341028] c"startIdxDom") c"high") 1)))
      Defer
      {
        {(340097 call _freeIterator _iterator[340061])
        }
      }
      { scopeless type(340086 'move' _indexOfInterest[340060](340083 call iteratorIndex _iterator[340061]))
      }
      ForLoop[340062]
      { unknown i[340090] "index var" "insert auto destroy"(340092 'move' i[340090] _indexOfInterest[340060])
        {(340056 call +=(340054 call(412764 call . this[341028] c"startIdx") i[340090]) cursorCnt[339828])
        } label _continueLabel[340065] _indexOfInterest[340060] _iterator[340061]
      } label _breakLabel[340066]
    }
    { unknown _indexOfInterest[340115] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340116] "expr temp" "temp"(340125 'move' _iterator[340116](340123 call _getIterator(412772 call . this[341028] c"_arrs")))
      Defer
      {
        {(340141 call _freeIterator _iterator[340116])
        }
      }
      { scopeless type(340130 'move' _indexOfInterest[340115](340127 call iteratorIndex _iterator[340116]))
      }
      ForLoop[340117]
      { unknown a[340134] "index var" "insert auto destroy"(340136 'move' a[340134] _indexOfInterest[340115])(340113 call(340107 call . a[340134] c"sparseBulkShiftArray") arrShiftMap[339528] oldnnz[339412]) label _continueLabel[340120] _indexOfInterest[340115] _iterator[340116]
      } label _breakLabel[340121]
    }(340149 return actualAddCnt[339389])(355624 'used modules list'(338879 'import' Sort[267987]))
  } function CSDom[340954](?).dsiRemove[340162](arg _mt[341034]:_MT[238], arg this[341032]:CSDom[340954](?), arg ind[340159] :(340157 call *(412780 call . this[341032] c"rank")(412785 call . this[341032] c"idxType"))) : _unknown[51] "method" "primary method"
  { const tmp[340173] "const" "temp"(340172 call(412789 call . this[341032] c"find") ind[340159])(340180 call _check_tuple_var_decl tmp[340173] 2) const found[340164] "const"(340174 call tmp[340173] 0) const insertPt[340166] "const"(340177 call tmp[340173] 1)(340185 'end of statement')
    if(340193 call _cond_test(340188 call ! found[340164]))
    {(340191 return 0)
    }(340200 call -=(412796 call . this[341032] c"_nnz") 1)(340206 call(412802 call . this[341032] c"_shrink")(412807 call . this[341032] c"_nnz")) const tmp[340214] "const" "temp" ind[340159](340221 call _check_tuple_var_decl tmp[340214] 2) const row[340208] "const"(340215 call tmp[340214] 0) const col[340210] "const"(340218 call tmp[340214] 1)(340226 'end of statement')
    { unknown _indexOfInterest[340247] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340248] "expr temp" "temp"(340257 'move' _iterator[340248](340255 call _getIterator(340262 call chpl_direct_range_iter insertPt[340166](412826 call . this[341032] c"_nnz") 1)))
      Defer
      {
        {(340278 call _freeIterator _iterator[340248])
        }
      }
      { scopeless type(340267 'move' _indexOfInterest[340247](340264 call iteratorIndex _iterator[340248]))
      }
      ForLoop[340249]
      { unknown i[340271] "index var" "insert auto destroy"(340273 'move' i[340271] _indexOfInterest[340247])
        {(340243 call =(340235 call(412813 call . this[341032] c"idx") i[340271])(340242 call(412819 call . this[341032] c"idx")(340239 call + i[340271] 1)))
        } label _continueLabel[340252] _indexOfInterest[340247] _iterator[340248]
      } label _breakLabel[340253]
    }
    if(340419 call _cond_test(340286 call . this[341032] c"compressRows"))
    {
      { unknown _indexOfInterest[340309] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340310] "expr temp" "temp"(340319 'move' _iterator[340310](340317 call _getIterator(340330 call chpl_direct_range_iter(340323 call + row[340208] 1)(340327 call .(366384 call . this[341032] c"startIdxDom") c"high") 1)))
        Defer
        {
          {(340346 call _freeIterator _iterator[340310])
          }
        }
        { scopeless type(340335 'move' _indexOfInterest[340309](340332 call iteratorIndex _iterator[340310]))
        }
        ForLoop[340311]
        { unknown r[340339] "index var" "insert auto destroy"(340341 'move' r[340339] _indexOfInterest[340309])
          {(340305 call -=(340303 call(412831 call . this[341032] c"startIdx") r[340339]) 1)
          } label _continueLabel[340314] _indexOfInterest[340309] _iterator[340310]
        } label _breakLabel[340315]
      }
    }
    {
      { unknown _indexOfInterest[340374] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340375] "expr temp" "temp"(340384 'move' _iterator[340375](340382 call _getIterator(340395 call chpl_direct_range_iter(340388 call + col[340210] 1)(340392 call .(366389 call . this[341032] c"startIdxDom") c"high") 1)))
        Defer
        {
          {(340411 call _freeIterator _iterator[340375])
          }
        }
        { scopeless type(340400 'move' _indexOfInterest[340374](340397 call iteratorIndex _iterator[340375]))
        }
        ForLoop[340376]
        { unknown r[340404] "index var" "insert auto destroy"(340406 'move' r[340404] _indexOfInterest[340374])
          {(340370 call -=(340368 call(412838 call . this[341032] c"startIdx") r[340404]) 1)
          } label _continueLabel[340379] _indexOfInterest[340374] _iterator[340375]
        } label _breakLabel[340380]
      }
    }
    { unknown _indexOfInterest[340440] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340441] "expr temp" "temp"(340450 'move' _iterator[340441](340448 call _getIterator(412845 call . this[341032] c"_arrs")))
      Defer
      {
        {(340466 call _freeIterator _iterator[340441])
        }
      }
      { scopeless type(340455 'move' _indexOfInterest[340440](340452 call iteratorIndex _iterator[340441]))
      }
      ForLoop[340442]
      { unknown a[340459] "index var" "insert auto destroy"(340461 'move' a[340459] _indexOfInterest[340440])
        {(340437 call(340426 call . a[340459] c"sparseShiftArrayBack")(340434 call chpl_build_bounded_range insertPt[340166](340432 call -(412851 call . this[341032] c"_nnz") 1)))
        } label _continueLabel[340445] _indexOfInterest[340440] _iterator[340441]
      } label _breakLabel[340446]
    }(340474 return 1)
  } function CSDom[340954](?).dsiClear[340480](arg _mt[341038]:_MT[238], arg this[341036]:CSDom[340954](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {(340484 call =(412856 call . this[341036] c"_nnz") 0)(340490 call =(412861 call . this[341036] c"startIdx") 1)
  } function CSDom[340954](?).dimIter[340499](arg _mt[341042]:_MT[238], arg this[341040]:CSDom[340954](?), param arg d[340497]:_any[178](?), arg ind[340501]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(340573 call _cond_test(340511 call &&(340505 call != d[340497] 1)(340508 call . this[341040] c"compressRows")))
    {(340532 call compilerError "dimIter(0, ..) not supported on CS(compressRows=true) domains")
    }
    {
      if(340569 call _cond_test(340545 call &&(340537 call != d[340497] 0)(340543 call !(340540 call . this[341040] c"compressRows"))))
      {(340566 call compilerError "dimIter(1, ..) not supported on CS(compressRows=false) domains")
      }
    }
    { unknown _indexOfInterest[340596] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340597] "expr temp" "temp"(340606 'move' _iterator[340597](340604 call _getIterator(340615 call chpl_direct_range_iter(340610 call(412874 call . this[341040] c"startIdx") ind[340501])(340613 call(412879 call . this[341040] c"stopIdx") ind[340501]) 1)))
      Defer
      {
        {(340631 call _freeIterator _iterator[340597])
        }
      }
      { scopeless type(340620 'move' _indexOfInterest[340596](340617 call iteratorIndex _iterator[340597]))
      }
      ForLoop[340598]
      { unknown i[340624] "index var" "insert auto destroy"(340626 'move' i[340624] _indexOfInterest[340596])(340594 yield(340593 call(412868 call . this[341040] c"idx") i[340624])) label _continueLabel[340601] _indexOfInterest[340596] _iterator[340597]
      } label _breakLabel[340602]
    }
  } function CSDom[340954](?).dsiSerialWrite[340644](arg _mt[341046]:_MT[238], arg this[341044]:CSDom[340954](?), arg f[340642]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(340648 call <~> f[340642] "{\n")
    if(340942 call _cond_test(340653 call . this[341044] c"compressRows"))
    {
      { unknown _indexOfInterest[340765] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340766] "expr temp" "temp"(340775 'move' _iterator[340766](340773 call _getIterator(412886 call . this[341044] c"rowRange")))
        Defer
        {
          {(340791 call _freeIterator _iterator[340766])
          }
        }
        { scopeless type(340780 'move' _indexOfInterest[340765](340777 call iteratorIndex _iterator[340766]))
        }
        ForLoop[340767]
        { unknown r[340784] "index var" "insert auto destroy"(340786 'move' r[340784] _indexOfInterest[340765])
          { const lo[340662] "const"(340661 call(412891 call . this[341044] c"startIdx") r[340784]) const hi[340669] "const"(340668 call(412896 call . this[341044] c"stopIdx") r[340784])(340672 'end of statement')
            { unknown _indexOfInterest[340727] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340728] "expr temp" "temp"(340737 'move' _iterator[340728](340735 call _getIterator(340742 call chpl_direct_range_iter lo[340662] hi[340669] 1)))
              Defer
              {
                {(340758 call _freeIterator _iterator[340728])
                }
              }
              { scopeless type(340747 'move' _indexOfInterest[340727](340744 call iteratorIndex _iterator[340728]))
              }
              ForLoop[340729]
              { unknown c[340751] "index var" "insert auto destroy"(340753 'move' c[340751] _indexOfInterest[340727])
                {(340723 call <~>(340696 call <~>(340693 call <~>(340687 call <~>(340684 call <~>(340681 call <~> f[340642] " (") r[340784]) ", ")(340692 call(412904 call . this[341044] c"idx") c[340751])) ")")(340720 IfExpr (340700 call == c[340751] hi[340669]) then
                  { scopeless "\n"
                  } else
                  { scopeless ""
                  } ))
                } label _continueLabel[340732] _indexOfInterest[340727] _iterator[340728]
              } label _breakLabel[340733]
            }
          } label _continueLabel[340770] _indexOfInterest[340765] _iterator[340766]
        } label _breakLabel[340771]
      }
    }
    {
      { unknown _indexOfInterest[340908] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340909] "expr temp" "temp"(340918 'move' _iterator[340909](340916 call _getIterator(412914 call . this[341044] c"colRange")))
        Defer
        {
          {(340934 call _freeIterator _iterator[340909])
          }
        }
        { scopeless type(340923 'move' _indexOfInterest[340908](340920 call iteratorIndex _iterator[340909]))
        }
        ForLoop[340910]
        { unknown c[340927] "index var" "insert auto destroy"(340929 'move' c[340927] _indexOfInterest[340908])
          { const lo[340805] "const"(340804 call(412919 call . this[341044] c"startIdx") c[340927]) const hi[340812] "const"(340811 call(412924 call . this[341044] c"stopIdx") c[340927])(340815 'end of statement')
            { unknown _indexOfInterest[340870] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340871] "expr temp" "temp"(340880 'move' _iterator[340871](340878 call _getIterator(340885 call chpl_direct_range_iter lo[340805] hi[340812] 1)))
              Defer
              {
                {(340901 call _freeIterator _iterator[340871])
                }
              }
              { scopeless type(340890 'move' _indexOfInterest[340870](340887 call iteratorIndex _iterator[340871]))
              }
              ForLoop[340872]
              { unknown r[340894] "index var" "insert auto destroy"(340896 'move' r[340894] _indexOfInterest[340870])
                {(340866 call <~>(340839 call <~>(340836 call <~>(340833 call <~>(340830 call <~>(340824 call <~> f[340642] " (")(340829 call(412931 call . this[341044] c"idx") r[340894])) ", ") c[340927]) ")")(340863 IfExpr (340843 call == r[340894] hi[340812]) then
                  { scopeless "\n"
                  } else
                  { scopeless ""
                  } ))
                } label _continueLabel[340875] _indexOfInterest[340870] _iterator[340871]
              } label _breakLabel[340876]
            }
          } label _continueLabel[340913] _indexOfInterest[340908] _iterator[340909]
        } label _breakLabel[340914]
      }
    }(340948 call <~> f[340642] "}\n")
  } type CSDom[340954](?) val super[355836]:BaseSparseDomImpl[148004](?) "super class" unknown compressRows[336318] "param" unknown sortedIndices[336322] "param" unknown stridable[336326] "param" unknown dist[336336](336334 call unmanaged CS[415596](?) compressRows[336318] sortedIndices[336322]) unknown rowRange[336346](336345 call range[64319](?) idxType[148258](stridable = stridable[336326])) unknown colRange[336356](336355 call range[64319](?) idxType[148258](stridable = stridable[336326])) unknown startIdxDom[336366](336364 call chpl__buildDomainRuntimeType defaultDist[94053] 1 idxType[148258]) unknown _nnz[336371] 0 unknown startIdx[336382] "local field"(336380 call chpl__buildArrayRuntimeType(336378 call chpl__ensureDomainExpr startIdxDom[336366]) idxType[148258]) unknown idx[336393] "local field"(336391 call chpl__buildArrayRuntimeType(336389 call chpl__ensureDomainExpr nnzDom[146964]) idxType[148258]) type CSDom[411939](?) function CSArr[341882](?).init[341056](arg _mt[341886]:_MT[238], arg this[341884]:CSArr[341882](?), arg eltType[341054]:_any[178](?), param arg rank[341059] : int(64)[13], arg idxType[341062]:_any[178](?), arg dom[341064]:_any[178](?), param arg initElts[341067] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(341080 call(341071 call .(366398 call . this[341884] c"super") c"init") eltType[341054] rank[341059] idxType[341062] dom[341064] initElts[341067])
  } function CSArr[341882](?).dsiAccess[341094](arg _mt[341890]:_MT[238], arg this[341888]:CSArr[341882](?), arg ind[341091] :(341089 call *(412948 call . this[341888] c"rank")(412953 call . this[341888] c"idxType"))) ref : _unknown[51] "method" "primary method"
  {(341102 call(341097 call .(366403 call . this[341888] c"dom") c"boundsCheck") ind[341091]) const tmp[341117] "const" "temp"(341116 call(341111 call .(366408 call . this[341888] c"dom") c"find") ind[341091])(341124 call _check_tuple_var_decl tmp[341117] 2) const found[341105] "const"(341118 call tmp[341117] 0) const loc[341107] "const"(341121 call tmp[341117] 1)(341129 'end of statement')
    if(341143 call _cond_test found[341105])
    {(341135 return(341134 call(412961 call . this[341888] c"data") loc[341107]))
    }
    {(341141 call halt "attempting to assign a 'zero' value in a sparse array: " ind[341091])
    }
  } function CSArr[341882](?).dsiAccess[341160](arg _mt[341894]:_MT[238], arg this[341892]:CSArr[341882](?), arg ind[341157] :(341155 call *(412968 call . this[341892] c"rank")(412973 call . this[341892] c"idxType"))) : _unknown[51] "method" "primary method"
  {(341172 call(341167 call .(366413 call . this[341892] c"dom") c"boundsCheck") ind[341157]) const tmp[341187] "const" "temp"(341186 call(341181 call .(366418 call . this[341892] c"dom") c"find") ind[341157])(341194 call _check_tuple_var_decl tmp[341187] 2) const found[341175] "const"(341188 call tmp[341187] 0) const loc[341177] "const"(341191 call tmp[341187] 1)(341199 'end of statement')
    if(341210 call _cond_test found[341175])
    {(341205 return(341204 call(412986 call . this[341892] c"data") loc[341177]))
    }
    {(341208 return(412992 call . this[341892] c"irv"))
    }
  }
  {(341165 call shouldReturnRvalueByValue(412978 call . this[341892] c"eltType"))
  } function CSArr[341882](?).dsiAccess[341228](arg _mt[341898]:_MT[238], arg this[341896]:CSArr[341882](?), arg ind[341225] :(341223 call *(412997 call . this[341896] c"rank")(413002 call . this[341896] c"idxType"))) const ref : _unknown[51] "method" "primary method"
  {(341240 call(341235 call .(366423 call . this[341896] c"dom") c"boundsCheck") ind[341225]) const tmp[341255] "const" "temp"(341254 call(341249 call .(366428 call . this[341896] c"dom") c"find") ind[341225])(341262 call _check_tuple_var_decl tmp[341255] 2) const found[341243] "const"(341256 call tmp[341255] 0) const loc[341245] "const"(341259 call tmp[341255] 1)(341267 'end of statement')
    if(341278 call _cond_test found[341243])
    {(341273 return(341272 call(413015 call . this[341896] c"data") loc[341245]))
    }
    {(341276 return(413021 call . this[341896] c"irv"))
    }
  }
  {(341233 call shouldReturnRvalueByConstRef(413007 call . this[341896] c"eltType"))
  } function CSArr[341882](?).these[341289](arg _mt[341902]:_MT[238], arg this[341900]:CSArr[341882](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[341305] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341306] "expr temp" "temp"(341315 'move' _iterator[341306](341313 call _getIterator(341323 call chpl_direct_range_iter 1(341320 call .(366433 call . this[341900] c"dom") c"_nnz") 1)))
      Defer
      {
        {(341339 call _freeIterator _iterator[341306])
        }
      }
      { scopeless type(341328 'move' _indexOfInterest[341305](341325 call iteratorIndex _iterator[341306]))
      }
      ForLoop[341307]
      { unknown i[341332] "index var" "insert auto destroy"(341334 'move' i[341332] _indexOfInterest[341305])(341303 yield(341302 call(413026 call . this[341900] c"data") i[341332])) label _continueLabel[341310] _indexOfInterest[341305] _iterator[341306]
      } label _breakLabel[341311]
    }
  } function CSArr[341882](?).these[341355](arg _mt[341906]:_MT[238], arg this[341904]:CSArr[341882](?), param arg tag[341352] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[341375] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341376] "expr temp" "temp"(341385 'move' _iterator[341376](341383 call _getIterator(341371 call(341366 call .(366439 call . this[341904] c"dom") c"these") tag[341352])))
      Defer
      {
        {(341402 call _freeIterator _iterator[341376])
        }
      }
      { scopeless type(341391 'move' _indexOfInterest[341375](341388 call iteratorIndex _iterator[341376]))
      }
      ForLoop[341377]
      { unknown followThis[341395] "index var" "insert auto destroy"(341397 'move' followThis[341395] _indexOfInterest[341375])(341373 yield followThis[341395]) label _continueLabel[341380] _indexOfInterest[341375] _iterator[341376]
      } label _breakLabel[341381]
    }
  }
  {(341362 call == tag[341352] leader[447])
  } function CSArr[341882](?).these[341419](arg _mt[341910]:_MT[238], arg this[341908]:CSArr[341882](?), param arg tag[341416] : iterKind[453], arg followThis[341427] :(341425 call _build_tuple ?[260] ?[260] ?[260])) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[341445] "temp" followThis[341427](341455 call _check_tuple_var_decl tmp[341445] 3) unknown followThisDom[341437](341446 call tmp[341445] 0) unknown startIx[341439](341449 call tmp[341445] 1) unknown endIx[341441](341452 call tmp[341445] 2)(341460 'end of statement')
    if(341490 call _cond_test(341467 call != followThisDom[341437](341464 call . this[341908] c"dom")))
    {(341488 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays (CS layout)")
    }
    if(341520 call _cond_test debugCS[336091])
    {(341518 call writeln "CSArr follower: " startIx[341439] ".." endIx[341441])
    }
    { unknown _indexOfInterest[341536] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341537] "expr temp" "temp"(341546 'move' _iterator[341537](341544 call _getIterator(341551 call chpl_direct_range_iter startIx[341439] endIx[341441] 1)))
      Defer
      {
        {(341567 call _freeIterator _iterator[341537])
        }
      }
      { scopeless type(341556 'move' _indexOfInterest[341536](341553 call iteratorIndex _iterator[341537]))
      }
      ForLoop[341538]
      { unknown i[341560] "index var" "insert auto destroy"(341562 'move' i[341560] _indexOfInterest[341536])(341534 yield(341533 call(413043 call . this[341908] c"data") i[341560])) label _continueLabel[341541] _indexOfInterest[341536] _iterator[341537]
      } label _breakLabel[341542]
    }
  }
  {(341435 call == tag[341416] follower[449])
  } function CSArr[341882](?).these[341583](arg _mt[341914]:_MT[238], arg this[341912]:CSArr[341882](?), param arg tag[341580] : iterKind[453], arg followThis[341585]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {(341597 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")(341601 yield 0)
  }
  {(341592 call == tag[341580] follower[449])
  } function CSArr[341882](?).dsiSerialWrite[341610](arg _mt[341918]:_MT[238], arg this[341916]:CSArr[341882](?), arg f[341608]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(341874 call _cond_test(341613 call .(366447 call . this[341916] c"dom") c"compressRows"))
    {
      { unknown _indexOfInterest[341711] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341712] "expr temp" "temp"(341721 'move' _iterator[341712](341719 call _getIterator(341620 call .(366452 call . this[341916] c"dom") c"rowRange")))
        Defer
        {
          {(341738 call _freeIterator _iterator[341712])
          }
        }
        { scopeless type(341727 'move' _indexOfInterest[341711](341724 call iteratorIndex _iterator[341712]))
        }
        ForLoop[341713]
        { unknown r[341731] "index var" "insert auto destroy"(341733 'move' r[341731] _indexOfInterest[341711])
          { const lo[341630] "const"(341629 call(341624 call .(366457 call . this[341916] c"dom") c"startIdx") r[341731])(341633 'end of statement') const hi[341644] "const"(341643 call(341638 call .(366462 call . this[341916] c"dom") c"stopIdx") r[341731])(341647 'end of statement')
            { unknown _indexOfInterest[341673] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341674] "expr temp" "temp"(341683 'move' _iterator[341674](341681 call _getIterator(341688 call chpl_direct_range_iter lo[341630] hi[341644] 1)))
              Defer
              {
                {(341704 call _freeIterator _iterator[341674])
                }
              }
              { scopeless type(341693 'move' _indexOfInterest[341673](341690 call iteratorIndex _iterator[341674]))
              }
              ForLoop[341675]
              { unknown c[341697] "index var" "insert auto destroy"(341699 'move' c[341697] _indexOfInterest[341673])
                {(341669 call <~>(341658 call <~> f[341608](341657 call(413056 call . this[341916] c"data") c[341697]))(341666 IfExpr (341662 call == c[341697] hi[341644]) then
                  { scopeless "\n"
                  } else
                  { scopeless " "
                  } ))
                } label _continueLabel[341678] _indexOfInterest[341673] _iterator[341674]
              } label _breakLabel[341679]
            }
          } label _continueLabel[341716] _indexOfInterest[341711] _iterator[341712]
        } label _breakLabel[341717]
      }
    }
    {
      { unknown _indexOfInterest[341839] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341840] "expr temp" "temp"(341849 'move' _iterator[341840](341847 call _getIterator(341750 call .(366467 call . this[341916] c"dom") c"colRange")))
        Defer
        {
          {(341866 call _freeIterator _iterator[341840])
          }
        }
        { scopeless type(341855 'move' _indexOfInterest[341839](341852 call iteratorIndex _iterator[341840]))
        }
        ForLoop[341841]
        { unknown c[341859] "index var" "insert auto destroy"(341861 'move' c[341859] _indexOfInterest[341839])
          { const lo[341760] "const"(341759 call(341754 call .(366472 call . this[341916] c"dom") c"startIdx") c[341859])(341763 'end of statement') const hi[341772] "const"(341771 call(341766 call .(366477 call . this[341916] c"dom") c"stopIdx") c[341859])(341775 'end of statement')
            { unknown _indexOfInterest[341801] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341802] "expr temp" "temp"(341811 'move' _iterator[341802](341809 call _getIterator(341816 call chpl_direct_range_iter lo[341760] hi[341772] 1)))
              Defer
              {
                {(341832 call _freeIterator _iterator[341802])
                }
              }
              { scopeless type(341821 'move' _indexOfInterest[341801](341818 call iteratorIndex _iterator[341802]))
              }
              ForLoop[341803]
              { unknown r[341825] "index var" "insert auto destroy"(341827 'move' r[341825] _indexOfInterest[341801])
                {(341797 call <~>(341786 call <~> f[341608](341785 call(413069 call . this[341916] c"data") r[341825]))(341794 IfExpr (341790 call == r[341825] hi[341772]) then
                  { scopeless "\n"
                  } else
                  { scopeless " "
                  } ))
                } label _continueLabel[341806] _indexOfInterest[341801] _iterator[341802]
              } label _breakLabel[341807]
            }
          } label _continueLabel[341844] _indexOfInterest[341839] _iterator[341840]
        } label _breakLabel[341845]
      }
    }
  } type CSArr[341882](?) val super[355838]:BaseSparseArrImpl[150571](?) "super class" type CSArr[412023](?)(355617 'used modules list'(353118 'use' ChapelStandard[20267])(336088 'import' RangeChunk[266477]))
}