AST dump for LayoutCS after pass scopeResolve.
Module use list: ChapelStandard RangeChunk DSIUtil Search Sort 

{ unknown debugCS[336053] "config" "no doc" "param" 0(336056 'end of statement') unknown LayoutCSDefaultToSorted[336058] "config" "param" 1(336061 'end of statement') function _ColumnComparator[336088].key[336069](arg _mt[336092]:_MT[238], arg this[336090]:_ColumnComparator[336088], arg idx[336066] : _tuple[56199](?)) : _unknown[51] "method" "primary method"
  {(336082 return(336080 call _build_tuple(336074 call idx[336066] 1)(336078 call idx[336066] 0)))
  } type _ColumnComparator[336088] const _columnComparator[336096] "const" "no doc" _ColumnComparator[336088](336099 'end of statement') function isCSType[336104](arg t[336102]:_any[178](?)) param : _unknown[51] "no doc"
  {(336114 return(354933 'is_subtype' CS[411895](?)(336110 call _to_borrowed t[336102])))
  } function CS[336254](?).dsiNewSparseDom[336140](arg _mt[336258]:_MT[238], arg this[336256]:CS[336254](?), param arg rank[336137] : int(64)[13], arg idxType[336142]:_any[178](?), arg dom[336145] : _domain[125902](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(336177 return(336150 'new'(_chpl_manager = unmanaged[220](?))(336176 call CSDom[411901](?) rank[336137] idxType[336142](336158 call . this[336256] c"compressRows")(336164 call . this[336256] c"sortedIndices")(336168 call . dom[336145] c"stridable")(336174 call _to_unmanaged this[336256]) dom[336145])))
  } function CS[336254](?).dsiClone[336184](arg _mt[336262]:_MT[238], arg this[336260]:CS[336254](?)) : _unknown[51] "method" "primary method"
  {(336202 return(336188 'new'(_chpl_manager = unmanaged[220](?))(336201 call CS[411895](?)(compressRows =(336191 call . this[336260] c"compressRows"))(sortedIndices =(336197 call . this[336260] c"sortedIndices")))))
  } function CS[336254](?).dsiEqualDMaps[336223](arg _mt[336266]:_MT[238], arg this[336264]:CS[336254](?), arg that[336220] :(336219 call CS[411895](?)(336211 call . this[336264] c"compressRows")(336216 call . this[336264] c"sortedIndices"))) param : _unknown[51] "method" "primary method"
  {(336226 return 1)
  } function CS[336254](?).dsiEqualDMaps[336235](arg _mt[336270]:_MT[238], arg this[336268]:CS[336254](?), arg that[336233]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {(336238 return 0)
  } function CS[336254](?).dsiIsLayout[336245](arg _mt[336274]:_MT[238], arg this[336272]:CS[336254](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {(336248 return 1)
  } type CS[336254](?) val super[355794]:BaseDist[145926] "super class" unknown compressRows[336124] "param" 1 bool[10] unknown sortedIndices[336130] "param" LayoutCSDefaultToSorted[336058] bool[10] type unmanaged CS[415558](?) type CS[411895](?) function CSDom[340916](?).init[336363](arg _mt[340920]:_MT[238], arg this[340918]:CSDom[340916](?), param arg rank[336361]:_any[178](?), arg idxType[336365]:_any[178](?), param arg compressRows[336367]:_any[178](?), param arg sortedIndices[336369]:_any[178](?), param arg stridable[336371]:_any[178](?), arg dist[336379] :(336377 call unmanaged CS[415558](?) compressRows[336367] sortedIndices[336369]), arg parentDom[336383] : _domain[125902](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(336420 call _cond_test(336397 call ||(336388 call != rank[336361] 2)(336395 call !=(336391 call . parentDom[336383] c"rank") 2)))
    {(336418 call compilerError "Only 2D sparse domains are supported by the CS distribution")
    }
    if(336472 call _cond_test(336431 call !=(336427 call . parentDom[336383] c"idxType") idxType[336365]))
    {(336470 call compilerError(336467 call +(336458 call +(336455 call + "idxType mismatch in CSDom.init(): "(336453 call _cast string[26] idxType[336365])) " != ")(336465 call _cast string[26](336461 call . parentDom[336383] c"idxType"))))
    }(336485 call(336478 call .(366135 call . this[340918] c"super") c"init") rank[336361] idxType[336365] parentDom[336383])(336492 call =(336488 call . this[340918] c"compressRows") compressRows[336367])(336500 call =(336496 call . this[340918] c"sortedIndices") sortedIndices[336369])(336508 call =(336504 call . this[340918] c"stridable") stridable[336371])(336516 call =(336512 call . this[340918] c"dist") dist[336379])(336527 call =(411941 call . this[340918] c"rowRange")(336526 call(336521 call . parentDom[336383] c"dim") 0))(336538 call =(411946 call . this[340918] c"colRange")(336537 call(336532 call . parentDom[336383] c"dim") 1))(336578 call =(411951 call . this[340918] c"startIdxDom")(336575 IfExpr  compressRows[336367] then
    { scopeless(336557 call chpl__buildDomainExpr(336554 call chpl_build_bounded_range(336544 call .(366146 call . this[340918] c"rowRange") c"low")(336552 call +(336548 call .(366151 call . this[340918] c"rowRange") c"high") 1)))
    } else
    { scopeless(336573 call chpl__buildDomainExpr(336570 call chpl_build_bounded_range(336560 call .(366156 call . this[340918] c"colRange") c"low")(336568 call +(336564 call .(366161 call . this[340918] c"colRange") c"high") 1)))
    } ))(336586 call(336582 call . this[340918] c"complete"))(336596 call =(411957 call . this[340918] c"nnzDom")(336594 call chpl__buildDomainExpr(336591 call chpl_build_bounded_range 1(411962 call . this[340918] c"_nnz"))))(336601 call(411966 call . this[340918] c"dsiClear"))
  } function CSDom[340916](?).getNNZ[336607](arg _mt[340924]:_MT[238], arg this[340922]:CSDom[340916](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(336611 return(411971 call . this[340922] c"_nnz"))
  }
  { scopeless type int(64)[13]
  } function CSDom[340916](?).dsiMyDist[336619](arg _mt[340928]:_MT[238], arg this[340926]:CSDom[340916](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(336622 return(411976 call . this[340926] c"dist"))
  } function CSDom[340916](?).dsiAssignDomain[336633](arg _mt[340932]:_MT[238], arg this[340930]:CSDom[340916](?), arg rhs[336630] : _domain[125902](?), arg lhsPrivate[336636] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(336768 call _cond_test(336658 call &&(336649 call ==(336646 call _to_borrowed(336644 'typeof'(336641 call . rhs[336630] c"_instance")))(336648 'typeof' this[340930]))(336656 call ==(336652 call . this[340930] c"dsiNumIndices") 0)))
    {(336668 call =(336661 call . this[340930] c"_nnz")(336665 call . rhs[336630] c"_nnz"))(336680 call =(336673 call . this[340930] c"nnzDom")(336677 call . rhs[336630] c"nnzDom"))(336693 call =(336686 call . this[340930] c"startIdx")(336690 call . rhs[336630] c"startIdx"))(336704 call =(336697 call . this[340930] c"idx")(336701 call . rhs[336630] c"idx"))
    }
    {
      if(336764 call _cond_test(336716 call <(336714 call _to_borrowed(336712 'typeof'(336709 call . rhs[336630] c"_instance"))) DefaultSparseDom[378034](?)))
      {(336754 call(336719 call . this[340930] c"dsiBulkAdd")(336745 call(336726 call .(336723 call . rhs[336630] c"_instance") c"_indices")(336742 call #(336736 call chpl_build_low_bounded_range(336733 call .(336730 call . rhs[336630] c"nnzDom") c"low"))(336739 call . rhs[336630] c"_nnz")))(dataSorted =(336748 call . this[340930] c"compressRows"))(isUnique = 1))
      }
      {(336761 call chpl_assignDomainWithIndsIterSafeForRemoving this[340930] rhs[336630])
      }
    }
  } function CSDom[340916](?).dsiBuildArray[336780](arg _mt[340936]:_MT[238], arg this[340934]:CSDom[340916](?), arg eltType[336778]:_any[178](?), param arg initElts[336783] : bool[10]) : _unknown[51] "method" "primary method"
  {(336805 return(336788 'new'(_chpl_manager = unmanaged[220](?))(336804 call CSArr[411985](?)(eltType = eltType[336778])(rank =(411991 call . this[340934] c"rank"))(idxType =(411996 call . this[340934] c"idxType"))(dom =(336800 call _to_unmanaged this[340934]))(initElts = initElts[336783]))))
  } function CSDom[340916](?).dsiIndsIterSafeForRemoving[336812](arg _mt[340940]:_MT[238], arg this[340938]:CSDom[340916](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown cursor[336829](336826 IfExpr (336815 call . this[340938] c"compressRows") then
    { scopeless(336819 call .(366184 call . this[340938] c"rowRange") c"high")
    } else
    { scopeless(336823 call .(366189 call . this[340938] c"colRange") c"high")
    } )(336832 'end of statement')
    { unknown _indexOfInterest[336919] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[336920] "expr temp" "temp"(336929 'move' _iterator[336920](336927 call _getIterator(336940 call chpl_direct_range_iter 1(412032 call . this[340938] c"_nnz")(336936 call - 1))))
      Defer
      {
        {(336956 call _freeIterator _iterator[336920])
        }
      }
      { scopeless type(336945 'move' _indexOfInterest[336919](336942 call iteratorIndex _iterator[336920]))
      }
      ForLoop[336921]
      { unknown i[336949] "index var" "insert auto destroy"(336951 'move' i[336949] _indexOfInterest[336919])
        {
          { unknown tmp[336857] "temp"(336885 'move' tmp[336857](336878 call _cond_test(336880 call >(336882 call(412011 call . this[340938] c"startIdx") cursor[336829]) i[336949])))
            WhileDo[336862]
            {
              {(336853 call -= cursor[336829] 1)
              } label _continueLabel[336860](336873 'move' tmp[336857](336866 call _cond_test(336868 call >(336870 call(412004 call . this[340938] c"startIdx") cursor[336829]) i[336949]))) tmp[336857]
            } label _breakLabel[336861]
          }
          if(336915 call _cond_test(336890 call . this[340938] c"compressRows"))
          {(336901 yield(336899 call _build_tuple cursor[336829](336897 call(412019 call . this[340938] c"idx") i[336949])))
          }
          {(336912 yield(336910 call _build_tuple(336907 call(412025 call . this[340938] c"idx") i[336949]) cursor[336829]))
          }
        } label _continueLabel[336924] _indexOfInterest[336919] _iterator[336920]
      } label _breakLabel[336925]
    }
  } function CSDom[340916](?).these[336967](arg _mt[340944]:_MT[238], arg this[340942]:CSDom[340916](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown cursor[336984](336981 IfExpr (336970 call . this[340942] c"compressRows") then
    { scopeless(336974 call .(366196 call . this[340942] c"rowRange") c"low")
    } else
    { scopeless(336978 call .(366201 call . this[340942] c"colRange") c"low")
    } )(336987 'end of statement')
    { unknown _indexOfInterest[337078] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337079] "expr temp" "temp"(337088 'move' _iterator[337079](337086 call _getIterator(337093 call chpl_direct_range_iter 1(412066 call . this[340942] c"_nnz") 1)))
      Defer
      {
        {(337109 call _freeIterator _iterator[337079])
        }
      }
      { scopeless type(337098 'move' _indexOfInterest[337078](337095 call iteratorIndex _iterator[337079]))
      }
      ForLoop[337080]
      { unknown i[337102] "index var" "insert auto destroy"(337104 'move' i[337102] _indexOfInterest[337078])
        {
          { unknown tmp[337010] "temp"(337044 'move' tmp[337010](337034 call _cond_test(337036 call <=(337038 call(412045 call . this[340942] c"startIdx")(337040 call + cursor[336984] 1)) i[337102])))
            WhileDo[337015]
            {
              {(337006 call += cursor[336984] 1)
              } label _continueLabel[337013](337029 'move' tmp[337010](337019 call _cond_test(337021 call <=(337023 call(412038 call . this[340942] c"startIdx")(337025 call + cursor[336984] 1)) i[337102]))) tmp[337010]
            } label _breakLabel[337014]
          }
          if(337072 call _cond_test(337049 call . this[340942] c"compressRows"))
          {(337060 yield(337058 call _build_tuple cursor[336984](337056 call(412053 call . this[340942] c"idx") i[337102])))
          }
          {(337070 yield(337068 call _build_tuple(337065 call(412059 call . this[340942] c"idx") i[337102]) cursor[336984]))
          }
        } label _continueLabel[337083] _indexOfInterest[337078] _iterator[337079]
      } label _breakLabel[337084]
    }
  } function CSDom[340916](?).these[337124](arg _mt[340948]:_MT[238], arg this[340946]:CSDom[340916](?), param arg tag[337121] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { const numElems[337138] "const"(412073 call . this[340946] c"_nnz")(337141 'end of statement') const numChunks[337146] "const"(337145 call _computeNumChunks numElems[337138])(337149 'end of statement')
    if(337176 call _cond_test debugCS[336053])
    {(337174 call writeln "CSDom leader: " numChunks[337146] " chunks, " numElems[337138] " elems")
    }
    if(337390 call _cond_test(337183 call == numChunks[337146] 1))
    {(337191 yield(337189 call _build_tuple this[340946] 1 numElems[337138]))
    }
    { unknown tmpIter[337219] "expr temp" "maybe ref" "no copy" "temp"(337222 'move' tmpIter[337219](337204 call chunks module=[255] RangeChunk[266458](337200 call chpl_build_bounded_range 1 numElems[337138]) numChunks[337146])) unknown isRngDomArr[337371] "maybe param" "temp"(337386 'move' isRngDomArr[337371](337384 call ||(337373 call isBoundedRange tmpIter[337219])(337382 call ||(337376 call isDomain tmpIter[337219])(337379 call isArray tmpIter[337219]))))
      if isRngDomArr[337371]
      { const _coforallCount[337238] "const" "end count" "temp"(337307 'move' _coforallCount[337238](337304 call _endCountAlloc 1)) unknown numTasks[337239] "temp"(337291 'move' numTasks[337239](337287 call . tmpIter[337219] c"size"))(337282 call _upEndCount _coforallCount[337238] 1 numTasks[337239])(337279 call chpl_resetTaskSpawn numTasks[337239]) unknown _indexOfInterest[337246] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337247] "expr temp" "temp"(337256 'move' _iterator[337247](337254 call _getIterator tmpIter[337219]))
        Defer
        {
          {(337272 call _freeIterator _iterator[337247])
          }
        }
        { scopeless type(337261 'move' _indexOfInterest[337246](337258 call iteratorIndex _iterator[337247]))
        }
        ForLoop[337248]
        { unknown chunk[337265] "coforall index var" "index var" "insert auto destroy"(337267 'move' chunk[337265] _indexOfInterest[337246])
          {(337225 yield(337227 call _build_tuple this[340946](337230 call . chunk[337265] c"first")(337234 call . chunk[337265] c"last")))(337241 call _downEndCount _coforallCount[337238] nil[44])(337240 'coforall loop')
          } label _continueLabel[337251] _indexOfInterest[337246] _iterator[337247]
        } label _breakLabel[337252]
        Defer
        {
          {(337294 call _endCountFree _coforallCount[337238])
          }
        }(337299 call _waitEndCount _coforallCount[337238] 1 numTasks[337239])
      }
      { const _coforallCount[337311] "const" "end count" "temp"(337368 'move' _coforallCount[337311](337365 call _endCountAlloc 1)) unknown _indexOfInterest[337319] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337320] "expr temp" "temp"(337329 'move' _iterator[337320](337327 call _getIterator tmpIter[337219]))
        Defer
        {
          {(337345 call _freeIterator _iterator[337320])
          }
        }
        { scopeless type(337334 'move' _indexOfInterest[337319](337331 call iteratorIndex _iterator[337320]))
        }
        ForLoop[337321]
        { unknown chunk[337338] "coforall index var" "index var" "insert auto destroy"(337340 'move' chunk[337338] _indexOfInterest[337319])(337352 call _upEndCount _coforallCount[337311] 1)
          {(337217 yield(337215 call _build_tuple this[340946](337207 call . chunk[337338] c"first")(337212 call . chunk[337338] c"last")))(337314 call _downEndCount _coforallCount[337311] nil[44])(337313 'coforall loop')
          } label _continueLabel[337324] _indexOfInterest[337319] _iterator[337320]
        } label _breakLabel[337325]
        Defer
        {
          {(337356 call _endCountFree _coforallCount[337311])
          }
        }(337361 call _waitEndCount _coforallCount[337311] 1)
      }(366207 'referenced modules list' RangeChunk[266458])
    }(355580 'used modules list'(337134 'use' DSIUtil[230888]))
  }
  {(337131 call == tag[337121] leader[447])
  } function CSDom[340916](?).these[337404](arg _mt[340952]:_MT[238], arg this[340950]:CSDom[340916](?), param arg tag[337401] : iterKind[453], arg followThis[337412] :(337410 call _build_tuple ?[260] ?[260] ?[260])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[337430] "temp" followThis[337412](337440 call _check_tuple_var_decl tmp[337430] 3) unknown followThisDom[337422](337431 call tmp[337430] 0) unknown startIx[337424](337434 call tmp[337430] 1) unknown endIx[337426](337437 call tmp[337430] 2)(337445 'end of statement')
    if(337473 call _cond_test 1)
    {(337471 call assert(337451 call <= startIx[337424] endIx[337426]) "CSDom follower - got nothing to iterate over")
    }
    if(337505 call _cond_test(337480 call != followThisDom[337422] this[340950]))
    {(337503 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays (CS layout)")
    } unknown cursor[337514](337513 call(412098 call . this[340950] c"_private_findStart") startIx[337424])(337517 'end of statement')
    if(337582 call _cond_test debugCS[336053])
    {(337580 call writeln "CSDom follower: " startIx[337424] ".." endIx[337426] "  startIdx(" cursor[337514] ")="(337579 call(412108 call . this[340950] c"startIdx") cursor[337514]))
    }
    { unknown _indexOfInterest[337675] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337676] "expr temp" "temp"(337685 'move' _iterator[337676](337683 call _getIterator(337690 call chpl_direct_range_iter startIx[337424] endIx[337426] 1)))
      Defer
      {
        {(337706 call _freeIterator _iterator[337676])
        }
      }
      { scopeless type(337695 'move' _indexOfInterest[337675](337692 call iteratorIndex _iterator[337676]))
      }
      ForLoop[337677]
      { unknown i[337699] "index var" "insert auto destroy"(337701 'move' i[337699] _indexOfInterest[337675])
        {
          { unknown tmp[337607] "temp"(337641 'move' tmp[337607](337631 call _cond_test(337633 call <=(337635 call(412122 call . this[340950] c"startIdx")(337637 call + cursor[337514] 1)) i[337699])))
            WhileDo[337612]
            {(337604 call += cursor[337514] 1) label _continueLabel[337610](337626 'move' tmp[337607](337616 call _cond_test(337618 call <=(337620 call(412115 call . this[340950] c"startIdx")(337622 call + cursor[337514] 1)) i[337699]))) tmp[337607]
            } label _breakLabel[337611]
          }
          if(337669 call _cond_test(337646 call . this[340950] c"compressRows"))
          {(337657 yield(337655 call _build_tuple cursor[337514](337653 call(412130 call . this[340950] c"idx") i[337699])))
          }
          {(337667 yield(337665 call _build_tuple(337662 call(412136 call . this[340950] c"idx") i[337699]) cursor[337514]))
          }
        } label _continueLabel[337680] _indexOfInterest[337675] _iterator[337676]
      } label _breakLabel[337681]
    }
  }
  {(337420 call == tag[337401] follower[449])
  } function CSDom[340916](?).these[337722](arg _mt[340956]:_MT[238], arg this[340954]:CSDom[340916](?), param arg tag[337719] : iterKind[453], arg followThis[337724]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {(337752 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")(337756 yield 0)
  }
  {(337731 call == tag[337719] follower[449])
  } function CSDom[340916](?)._private_findStart[337765](arg _mt[340960]:_MT[238], arg this[340958]:CSDom[340916](?), arg startIx[337763]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(337779 return(337778 call(412146 call . this[340958] c"_private_findStart") startIx[337763](337771 call .(366223 call . this[340958] c"startIdxDom") c"low")(337775 call .(366228 call . this[340958] c"startIdxDom") c"high")))
  } function CSDom[340916](?)._private_findStart[337788](arg _mt[340964]:_MT[238], arg this[340962]:CSDom[340916](?), arg startIx[337786]:_any[178](?), arg low[337790]:_any[178](?), arg high[337792]:_any[178](?)) : _unknown[51] "method" "primary method"
  { unknown approx[337795] 2(337798 'end of statement') unknown l[337801] low[337790] unknown h[337805] high[337792](337808 'end of statement')
    { unknown tmp[337851] "temp"(337881 'move' tmp[337851](337873 call _cond_test(337875 call > h[337805](337878 call + l[337801] approx[337795]))))
      WhileDo[337856]
      {
        { unknown m[337823](337821 call /(337818 call + h[337805] l[337801]) 2)(337826 'end of statement')
          if(337845 call _cond_test(337833 call <=(337831 call(412156 call . this[340962] c"startIdx") m[337823]) startIx[337786]))
          {(337837 call = l[337801] m[337823])
          }
          {(337842 call = h[337805] m[337823])
          }
        } label _continueLabel[337854](337868 'move' tmp[337851](337860 call _cond_test(337862 call > h[337805](337865 call + l[337801] approx[337795])))) tmp[337851]
      } label _breakLabel[337855]
    } unknown hh[337892](337891 call min(337887 call + l[337801] approx[337795]) high[337792])(337895 'end of statement')
    if(337954 call _cond_test 1)
    {(337923 call assert(337903 call <=(337901 call(412177 call . this[340962] c"startIdx") l[337801]) startIx[337786]) "CSDom.findStart-1")(337952 call assert(337932 call < startIx[337786](337931 call(412185 call . this[340962] c"startIdx") hh[337892])) "CSDom.findStart-2")
    }(337959 return l[337801])
  } function CSDom[340916](?).stopIdx[337967](arg _mt[340968]:_MT[238], arg this[340966]:CSDom[340916](?), arg i[337965]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(337979 return(337977 call -(337975 call(412192 call . this[340966] c"startIdx")(337972 call + i[337965] 1)) 1))
  } function CSDom[340916](?).find[337993](arg _mt[340972]:_MT[238], arg this[340970]:CSDom[340916](?), arg ind[337990] :(337988 call *(412198 call . this[340970] c"rank")(412203 call . this[340970] c"idxType"))) : _unknown[51] "method" "primary method"
  { const tmp[338005] "const" "temp" ind[337990](338012 call _check_tuple_var_decl tmp[338005] 2) const row[337999] "const"(338006 call tmp[338005] 0) const col[338001] "const"(338009 call tmp[338005] 1)(338017 'end of statement') unknown ret[338023](338021 call _build_tuple bool[10](412209 call . this[340970] c"idxType"))(338026 'end of statement')
    if(338129 call _cond_test(338028 call . this[340970] c"compressRows"))
    {
      if(338074 call _cond_test(338032 call . this[340970] c"sortedIndices"))
      {(338051 call = ret[338023](338050 call binarySearch(412215 call . this[340970] c"idx") col[338001](lo =(338043 call(412221 call . this[340970] c"startIdx") row[337999]))(hi =(338048 call(412226 call . this[340970] c"stopIdx") row[337999]))))
      }
      {(338070 call = ret[338023](338069 call linearSearch(412233 call . this[340970] c"idx") col[338001](lo =(338062 call(412239 call . this[340970] c"startIdx") row[337999]))(hi =(338067 call(412244 call . this[340970] c"stopIdx") row[337999]))))
      }
    }
    {
      if(338123 call _cond_test(338081 call . this[340970] c"sortedIndices"))
      {(338100 call = ret[338023](338099 call binarySearch(412251 call . this[340970] c"idx") row[337999](lo =(338092 call(412257 call . this[340970] c"startIdx") col[338001]))(hi =(338097 call(412262 call . this[340970] c"stopIdx") col[338001]))))
      }
      {(338119 call = ret[338023](338118 call linearSearch(412269 call . this[340970] c"idx") row[337999](lo =(338111 call(412275 call . this[340970] c"startIdx") col[338001]))(hi =(338116 call(412280 call . this[340970] c"stopIdx") col[338001]))))
      }
    }(338134 return ret[338023])(355582 'used modules list'(337996 'use' Search[291233]))
  } function CSDom[340916](?).dsiMember[338147](arg _mt[340976]:_MT[238], arg this[340974]:CSDom[340916](?), arg ind[338144] :(338142 call *(412287 call . this[340974] c"rank")(412292 call . this[340974] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    if(338182 call _cond_test(338155 call(338150 call .(366236 call . this[340974] c"parentDom") c"contains") ind[338144]))
    { const tmp[338165] "const" "temp"(338164 call(412297 call . this[340974] c"find") ind[338144])(338172 call _check_tuple_var_decl tmp[338165] 2) const found[338156] "const"(338166 call tmp[338165] 0) const loc[338158] "const"(338169 call tmp[338165] 1)(338177 'end of statement')(338180 return found[338156])
    }(338188 return 0)
  } function CSDom[340916](?).dsiFirst[338194](arg _mt[340980]:_MT[238], arg this[340978]:CSDom[340916](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338213 call _cond_test(338198 call ==(412304 call . this[340978] c"_nnz") 0))
    {(338211 return(338209 call -(338201 call .(366241 call . this[340978] c"parentDom") c"low")(338207 call _build_tuple 1 1)))
    } const _low[338223] "const"(338220 call .(366246 call . this[340978] c"nnzDom") c"low")(338226 'end of statement')
    { unknown _indexOfInterest[338290] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338291] "expr temp" "temp"(338300 'move' _iterator[338291](338298 call _getIterator(412309 call . this[340978] c"startIdxDom")))
      Defer
      {
        {(338316 call _freeIterator _iterator[338291])
        }
      }
      { scopeless type(338305 'move' _indexOfInterest[338290](338302 call iteratorIndex _iterator[338291]))
      }
      ForLoop[338292]
      { unknown i[338309] "index var" "insert auto destroy"(338311 'move' i[338309] _indexOfInterest[338290])
        {
          if(338285 call _cond_test(338234 call >(338232 call(412314 call . this[340978] c"startIdx") i[338309]) _low[338223]))
          {
            if(338278 call _cond_test(338237 call . this[340978] c"compressRows"))
            {(338257 return(338255 call _build_tuple(338242 call - i[338309] 1)(338253 call(412322 call . this[340978] c"idx")(338249 call .(338246 call .(366252 call . this[340978] c"idx") c"_dom") c"low"))))
            }
            {(338276 return(338274 call _build_tuple(338268 call(412327 call . this[340978] c"idx")(338264 call .(338261 call .(366257 call . this[340978] c"idx") c"_dom") c"low"))(338271 call - i[338309] 1)))
            }
          }
        } label _continueLabel[338295] _indexOfInterest[338290] _iterator[338291]
      } label _breakLabel[338296]
    }(338342 call halt "Something went wrong in dsiFirst")(338349 return(338347 call _build_tuple 0 0))
  } function CSDom[340916](?).dsiLast[338355](arg _mt[340984]:_MT[238], arg this[340982]:CSDom[340916](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338374 call _cond_test(338359 call ==(412333 call . this[340982] c"_nnz") 0))
    {(338372 return(338370 call -(338362 call .(366262 call . this[340982] c"parentDom") c"low")(338368 call _build_tuple 1 1)))
    } unknown _last[338390](338388 call -(338386 call(338381 call .(366267 call . this[340982] c"parentDom") c"low") 1) 1)(338393 'end of statement')
    { unknown _indexOfInterest[338416] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338417] "expr temp" "temp"(338426 'move' _iterator[338417](338424 call _getIterator(412338 call . this[340982] c"startIdxDom")))
      Defer
      {
        {(338442 call _freeIterator _iterator[338417])
        }
      }
      { scopeless type(338431 'move' _indexOfInterest[338416](338428 call iteratorIndex _iterator[338417]))
      }
      ForLoop[338418]
      { unknown i[338435] "index var" "insert auto destroy"(338437 'move' i[338435] _indexOfInterest[338416])
        if(338411 call _cond_test(338401 call >(338399 call(412343 call . this[340982] c"startIdx") i[338435]) _last[338390]))
        {(338408 call = _last[338390](338406 call - i[338435] 1))
        } label _continueLabel[338421] _indexOfInterest[338416] _iterator[338417]
      } label _breakLabel[338422]
    }
    if(338473 call _cond_test(338450 call . this[340982] c"compressRows"))
    {(338461 return(338459 call _build_tuple _last[338390](338457 call(412353 call . this[340982] c"idx")(412358 call . this[340982] c"_nnz"))))
    }
    {(338471 return(338469 call _build_tuple(338466 call(412363 call . this[340982] c"idx")(412368 call . this[340982] c"_nnz")) _last[338390]))
    }
  } function CSDom[340916](?).dsiAdd[338490](arg _mt[340988]:_MT[238], arg this[340986]:CSDom[340916](?), arg ind[338487] :(338485 call *(412374 call . this[340986] c"rank")(412379 call . this[340986] c"idxType"))) : _unknown[51] "method" "primary method"
  {(338495 call(412383 call . this[340986] c"boundsCheck") ind[338487]) const tmp[338507] "const" "temp"(338506 call(412388 call . this[340986] c"find") ind[338487])(338514 call _check_tuple_var_decl tmp[338507] 2) const found[338498] "const"(338508 call tmp[338507] 0) const insertPt[338500] "const"(338511 call tmp[338507] 1)(338519 'end of statement')
    if(338524 call _cond_test found[338498])
    {(338522 return 0)
    }(338531 call +=(412395 call . this[340986] c"_nnz") 1) unknown oldNNZDomSize[338538](338535 call .(366273 call . this[340986] c"nnzDom") c"size")(338541 'end of statement')(338545 call(412399 call . this[340986] c"_grow")(412404 call . this[340986] c"_nnz")) const tmp[338553] "const" "temp" ind[338487](338560 call _check_tuple_var_decl tmp[338553] 2) const row[338547] "const"(338554 call tmp[338553] 0) const col[338549] "const"(338557 call tmp[338553] 1)(338565 'end of statement')
    { unknown _indexOfInterest[338594] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338595] "expr temp" "temp"(338604 'move' _iterator[338595](338602 call _getIterator(338621 call chpl_direct_range_iter insertPt[338500](338618 call -(412423 call . this[340986] c"_nnz") 1)(338614 call - 1))))
      Defer
      {
        {(338637 call _freeIterator _iterator[338595])
        }
      }
      { scopeless type(338626 'move' _indexOfInterest[338594](338623 call iteratorIndex _iterator[338595]))
      }
      ForLoop[338596]
      { unknown i[338630] "index var" "insert auto destroy"(338632 'move' i[338630] _indexOfInterest[338594])
        {(338590 call =(338585 call(412410 call . this[340986] c"idx")(338582 call + i[338630] 1))(338589 call(412416 call . this[340986] c"idx") i[338630]))
        } label _continueLabel[338599] _indexOfInterest[338594] _iterator[338595]
      } label _breakLabel[338600]
    }
    if(338664 call _cond_test(338645 call . this[340986] c"compressRows"))
    {(338653 call =(338651 call(412428 call . this[340986] c"idx") insertPt[338500]) col[338549])
    }
    {(338661 call =(338659 call(412435 call . this[340986] c"idx") insertPt[338500]) row[338547])
    } unknown start[338679](338676 IfExpr (338671 call . this[340986] c"compressRows") then
    { scopeless row[338547]
    } else
    { scopeless col[338549]
    } )(338682 'end of statement')
    { unknown _indexOfInterest[338703] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338704] "expr temp" "temp"(338713 'move' _iterator[338704](338711 call _getIterator(338724 call chpl_direct_range_iter(338717 call + start[338679] 1)(338721 call .(366280 call . this[340986] c"startIdxDom") c"high") 1)))
      Defer
      {
        {(338740 call _freeIterator _iterator[338704])
        }
      }
      { scopeless type(338729 'move' _indexOfInterest[338703](338726 call iteratorIndex _iterator[338704]))
      }
      ForLoop[338705]
      { unknown rc[338733] "index var" "insert auto destroy"(338735 'move' rc[338733] _indexOfInterest[338703])
        {(338699 call +=(338697 call(412444 call . this[340986] c"startIdx") rc[338733]) 1)
        } label _continueLabel[338708] _indexOfInterest[338703] _iterator[338704]
      } label _breakLabel[338709]
    }
    { unknown _indexOfInterest[338774] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338775] "expr temp" "temp"(338784 'move' _iterator[338775](338782 call _getIterator(412451 call . this[340986] c"_arrs")))
      Defer
      {
        {(338800 call _freeIterator _iterator[338775])
        }
      }
      { scopeless type(338789 'move' _indexOfInterest[338774](338786 call iteratorIndex _iterator[338775]))
      }
      ForLoop[338776]
      { unknown a[338793] "index var" "insert auto destroy"(338795 'move' a[338793] _indexOfInterest[338774])
        {(338771 call(338750 call . a[338793] c"sparseShiftArray")(338758 call chpl_build_bounded_range insertPt[338500](338756 call -(412457 call . this[340986] c"_nnz") 1))(338769 call chpl_build_bounded_range(338763 call + oldNNZDomSize[338538] 1)(338766 call .(366286 call . this[340986] c"nnzDom") c"size")))
        } label _continueLabel[338779] _indexOfInterest[338774] _iterator[338775]
      } label _breakLabel[338780]
    }(338808 return 1)
  } function CSDom[340916](?).bulkAdd_help[338826](arg _mt[340992]:_MT[238], arg this[340990]:CSDom[340916](?), arg inds[338823] :(338821 call chpl__buildArrayRuntimeType unknown indsDom[338814](338819 call *(412463 call . this[340990] c"rank")(412468 call . this[340990] c"idxType"))), arg dataSorted[338829] = 0, arg isUnique[338833] = 0, arg addOn[338837] = nilLocale[89939]) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(338882 call _cond_test(338846 call != addOn[338837] nilLocale[89939]))
    {
      if(338877 call _cond_test(338853 call != addOn[338837](338851 call chpl_localeID_to_locale(338850 '_wide_get_locale' this[340990]))))
      {(338874 call halt "Bulk index addition is only possible on the locale where the\n            sparse domain is created")
      }
    }
    if(338912 call _cond_test(338887 call . this[340990] c"compressRows"))
    {(338900 call(412477 call . this[340990] c"bulkAdd_prepareInds") inds[338823] dataSorted[338829] isUnique[338833](cmp = defaultComparator[267977]))(366291 'referenced modules list' Sort[267968])
    }
    {(338909 call(412484 call . this[340990] c"bulkAdd_prepareInds") inds[338823] dataSorted[338829] isUnique[338833](cmp = _columnComparator[336096]))
    }
    if(339345 call _cond_test(338919 call ==(412493 call . this[340990] c"_nnz") 0))
    { const dupCount[338930] "const"(338927 IfExpr  isUnique[338833] then
      { scopeless 0
      } else
      { scopeless(338926 call(412498 call . this[340990] c"_countDuplicates") inds[338823])
      } )(338933 'end of statement')(338943 call +=(412504 call . this[340990] c"_nnz")(338941 call -(338937 call . inds[338823] c"size") dupCount[338930]))(338948 call(412509 call . this[340990] c"_bulkGrow")) unknown idxIdx[338951] 1(338954 'end of statement') unknown prevIdx[338966](338964 call -(338956 call .(366297 call . this[340990] c"parentDom") c"low")(338962 call _build_tuple 1 1))(338969 'end of statement') unknown current[338971](412514 call . this[340990] c"idxType")(338974 'end of statement')
      if(339007 call _cond_test(338976 call . this[340990] c"compressRows"))
      {(338990 call = current[338971](338987 call .(338986 call(338981 call .(366303 call . this[340990] c"parentDom") c"dim") 0) c"low"))
      }
      {(339004 call = current[338971](339001 call .(339000 call(338995 call .(366308 call . this[340990] c"parentDom") c"dim") 1) c"low"))
      }
      { unknown _indexOfInterest[339211] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339212] "expr temp" "temp"(339221 'move' _iterator[339212](339219 call _getIterator inds[338823]))
        Defer
        {
          {(339251 call _freeIterator _iterator[339212])
          }
        }
        { scopeless type(339226 'move' _indexOfInterest[339211](339223 call iteratorIndex _iterator[339212]))
        }
        ForLoop[339213]
        {(339231 call _check_tuple_var_decl _indexOfInterest[339211] 2) unknown i[339237] "index var" "insert auto destroy"(339239 'move' i[339237](339235 call _indexOfInterest[339211] 0)) unknown j[339244] "index var" "insert auto destroy"(339246 'move' j[339244](339242 call _indexOfInterest[339211] 1))
          {
            if(339044 call _cond_test(339030 call &&(339020 call ! isUnique[338833])(339028 call ==(339025 call _build_tuple i[339237] j[339244]) prevIdx[338966])))
            {
              continue _continueLabel[339216] _continueLabel[339216]
            }
            {(339041 call = prevIdx[338966](339039 call _build_tuple i[339237] j[339244]))
            }
            if(339207 call _cond_test(339052 call . this[340990] c"compressRows"))
            {
              { unknown tmp[339079] "temp"(339103 'move' tmp[339079](339098 call _cond_test(339100 call != i[339237] current[338971])))
                WhileDo[339084]
                {
                  {(339061 call += current[338971] 1)(339076 call =(339071 call(412530 call . this[340990] c"startIdx")(339068 call + current[338971] 1))(339075 call(412536 call . this[340990] c"startIdx") current[338971]))
                  } label _continueLabel[339082](339093 'move' tmp[339079](339088 call _cond_test(339090 call != i[339237] current[338971]))) tmp[339079]
                } label _breakLabel[339083]
              }(339115 call +=(339113 call(412546 call . this[340990] c"startIdx")(339110 call + i[339237] 1)) 1)(339123 call =(339121 call(412552 call . this[340990] c"idx") idxIdx[338951]) j[339244])(339128 call += idxIdx[338951] 1)
            }
            {
              { unknown tmp[339155] "temp"(339179 'move' tmp[339155](339174 call _cond_test(339176 call != j[339244] current[338971])))
                WhileDo[339160]
                {
                  {(339137 call += current[338971] 1)(339152 call =(339147 call(412561 call . this[340990] c"startIdx")(339144 call + current[338971] 1))(339151 call(412567 call . this[340990] c"startIdx") current[338971]))
                  } label _continueLabel[339158](339169 'move' tmp[339155](339164 call _cond_test(339166 call != j[339244] current[338971]))) tmp[339155]
                } label _breakLabel[339159]
              }(339191 call +=(339189 call(412577 call . this[340990] c"startIdx")(339186 call + j[339244] 1)) 1)(339199 call =(339197 call(412583 call . this[340990] c"idx") idxIdx[338951]) i[339237])(339204 call += idxIdx[338951] 1)
            }
          } label _continueLabel[339216] _indexOfInterest[339211] _iterator[339212]
        } label _breakLabel[339217]
      } const startIdxHigh[339265] "const"(339264 call(412591 call . this[340990] c"startIdx")(339261 call + current[338971] 1))(339268 'end of statement')
      { unknown _indexOfInterest[339292] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339293] "expr temp" "temp"(339302 'move' _iterator[339293](339300 call _getIterator(339316 call chpl_direct_range_iter(339306 call + current[338971] 2)(339310 call .(339312 call .(366314 call . this[340990] c"startIdx") c"_dom") c"high") 1)))
        Defer
        {
          {(339332 call _freeIterator _iterator[339293])
          }
        }
        { scopeless type(339321 'move' _indexOfInterest[339292](339318 call iteratorIndex _iterator[339293]))
        }
        ForLoop[339294]
        { unknown r[339325] "index var" "insert auto destroy"(339327 'move' r[339325] _indexOfInterest[339292])
          {(339288 call =(339286 call(412597 call . this[340990] c"startIdx") r[339325]) startIdxHigh[339265])
          } label _continueLabel[339297] _indexOfInterest[339292] _iterator[339293]
        } label _breakLabel[339298]
      }(339343 return(339341 call - idxIdx[338951] 1))
    } const tmp[339360] "const" "temp"(339359 call(412605 call . this[340990] c"__getActualInsertPts") this[340990] inds[338823] isUnique[338833])(339367 call _check_tuple_var_decl tmp[339360] 2) const actualInsertPts[339349] "const"(339361 call tmp[339360] 0) const actualAddCnt[339351] "const"(339364 call tmp[339360] 1)(339372 'end of statement') const oldnnz[339374] "const"(412613 call . this[340990] c"_nnz")(339377 'end of statement')(339380 call +=(412618 call . this[340990] c"_nnz") actualAddCnt[339351])(339385 call(412623 call . this[340990] c"_bulkGrow")) unknown newIndIdx[339391](339388 call . indsDom[338814] c"high")(339394 'end of statement') unknown oldIndIdx[339396] oldnnz[339374](339399 'end of statement') unknown newLoc[339404](339403 call actualInsertPts[339349] newIndIdx[339391])(339407 'end of statement')
    { unknown tmp[339446] "temp"(339474 'move' tmp[339446](339467 call _cond_test(339469 call == newLoc[339404](339472 call - 1))))
      WhileDo[339451]
      {
        {(339416 call -= newIndIdx[339391] 1)
          if(339433 call _cond_test(339428 call == newIndIdx[339391](339426 call -(339422 call . indsDom[338814] c"low") 1)))
          {
            break _breakLabel[339450] _breakLabel[339450]
          }(339443 call = newLoc[339404](339442 call actualInsertPts[339349] newIndIdx[339391]))
        } label _continueLabel[339449](339462 'move' tmp[339446](339455 call _cond_test(339457 call == newLoc[339404](339460 call - 1)))) tmp[339446]
      } label _breakLabel[339450]
    } unknown arrShiftMap[339490](339488 call chpl__buildArrayRuntimeType(339486 call chpl__ensureDomainExpr(339482 call chpl__buildDomainExpr(339479 call chpl_build_bounded_range 1 oldnnz[339374]))) int(64)[13])(339493 'end of statement')
    { unknown _indexOfInterest[339709] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339710] "expr temp" "temp"(339719 'move' _iterator[339710](339717 call _getIterator(339730 call chpl_direct_range_iter 1(412690 call . this[340990] c"_nnz")(339726 call - 1))))
      Defer
      {
        {(339746 call _freeIterator _iterator[339710])
        }
      }
      { scopeless type(339735 'move' _indexOfInterest[339709](339732 call iteratorIndex _iterator[339710]))
      }
      ForLoop[339711]
      { unknown i[339739] "index var" "insert auto destroy"(339741 'move' i[339739] _indexOfInterest[339709])
        {
          if(339703 call _cond_test(339512 call &&(339506 call >= oldIndIdx[339396] 1)(339510 call > i[339739] newLoc[339404])))
          {(339522 call =(339517 call(412642 call . this[340990] c"idx") i[339739])(339521 call(412648 call . this[340990] c"idx") oldIndIdx[339396]))(339531 call =(339529 call arrShiftMap[339490] oldIndIdx[339396]) i[339739])(339536 call -= oldIndIdx[339396] 1)
          }
          {
            if(339698 call _cond_test(339550 call &&(339544 call >= newIndIdx[339391](339541 call . indsDom[338814] c"low"))(339548 call == i[339739] newLoc[339404])))
            {
              if(339586 call _cond_test(339553 call . this[340990] c"compressRows"))
              {(339567 call =(339559 call(412661 call . this[340990] c"idx") i[339739])(339566 call(339563 call inds[338823] newIndIdx[339391]) 1))
              }
              {(339582 call =(339574 call(412669 call . this[340990] c"idx") i[339739])(339581 call(339578 call inds[338823] newIndIdx[339391]) 0))
              }(339593 call -= newIndIdx[339391] 1)
              if(339618 call _cond_test(339601 call >= newIndIdx[339391](339598 call . indsDom[338814] c"low")))
              {(339608 call = newLoc[339404](339607 call actualInsertPts[339349] newIndIdx[339391]))
              }
              {(339615 call = newLoc[339404](339613 call - 2))
              }
              { unknown tmp[339662] "temp"(339690 'move' tmp[339662](339683 call _cond_test(339685 call == newLoc[339404](339688 call - 1))))
                WhileDo[339667]
                {
                  {(339632 call -= newIndIdx[339391] 1)
                    if(339649 call _cond_test(339644 call == newIndIdx[339391](339642 call -(339638 call . indsDom[338814] c"low") 1)))
                    {
                      break _breakLabel[339666] _breakLabel[339666]
                    }(339659 call = newLoc[339404](339658 call actualInsertPts[339349] newIndIdx[339391]))
                  } label _continueLabel[339665](339678 'move' tmp[339662](339671 call _cond_test(339673 call == newLoc[339404](339676 call - 1)))) tmp[339662]
                } label _breakLabel[339666]
              }
            }
            {(339696 call halt "Something went wrong")
            }
          }
        } label _continueLabel[339714] _indexOfInterest[339709] _iterator[339710]
      } label _breakLabel[339715]
    } unknown prevCursor[339780](339777 IfExpr (339754 call . this[340990] c"compressRows") then
    { scopeless(339764 call .(339763 call(339758 call .(366326 call . this[340990] c"parentDom") c"dim") 0) c"low")
    } else
    { scopeless(339774 call .(339773 call(339768 call .(366331 call . this[340990] c"parentDom") c"dim") 1) c"low")
    } )(339783 'end of statement') unknown cursor[339785] int(64)[13](339788 'end of statement') unknown cursorCnt[339790] 0(339793 'end of statement')
    { unknown _indexOfInterest[339950] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339951] "expr temp" "temp"(339965 'move' _iterator[339951](339802 call _build_tuple(339960 call _getIterator inds[338823])(339963 call _getIterator actualInsertPts[339349])))
      Defer
      {
        {(339995 call _freeIterator _iterator[339951])
        }
      }
      { scopeless type(339970 'move' _indexOfInterest[339950](339967 call iteratorIndex _iterator[339951]))
      }
      ForLoop[339952]
      {(339975 call _check_tuple_var_decl _indexOfInterest[339950] 2) unknown ind[339981] "index var" "insert auto destroy"(339983 'move' ind[339981](339979 call _indexOfInterest[339950] 0)) unknown p[339988] "index var" "insert auto destroy"(339990 'move' p[339988](339986 call _indexOfInterest[339950] 1))
        {
          if(339812 call _cond_test(339807 call == p[339988](339805 call - 1)))
          {
            continue _continueLabel[339955] _continueLabel[339955]
          }
          if(339840 call _cond_test(339819 call . this[340990] c"compressRows"))
          {(339827 call = cursor[339785](339826 call ind[339981] 0))
          }
          {(339836 call = cursor[339785](339835 call ind[339981] 1))
          }
          if(339945 call _cond_test(339846 call == cursor[339785] prevCursor[339780]))
          {(339850 call += cursorCnt[339790] 1)
          }
          {(339861 call +=(339859 call(412703 call . this[340990] c"startIdx")(339856 call + prevCursor[339780] 1)) cursorCnt[339790])
            if(339931 call _cond_test(339870 call >(339867 call - cursor[339785] prevCursor[339780]) 1))
            {
              { unknown _indexOfInterest[339889] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339890] "expr temp" "temp"(339899 'move' _iterator[339890](339897 call _getIterator(339907 call chpl_direct_range_iter(339903 call + prevCursor[339780] 2) cursor[339785] 1)))
                Defer
                {
                  {(339923 call _freeIterator _iterator[339890])
                  }
                }
                { scopeless type(339912 'move' _indexOfInterest[339889](339909 call iteratorIndex _iterator[339890]))
                }
                ForLoop[339891]
                { unknown i[339916] "index var" "insert auto destroy"(339918 'move' i[339916] _indexOfInterest[339889])
                  {(339885 call +=(339883 call(412712 call . this[340990] c"startIdx") i[339916]) cursorCnt[339790])
                  } label _continueLabel[339894] _indexOfInterest[339889] _iterator[339890]
                } label _breakLabel[339895]
              }
            }(339937 call += cursorCnt[339790] 1)(339942 call = prevCursor[339780] cursor[339785])
          }
        } label _continueLabel[339955] _indexOfInterest[339950] _iterator[339951]
      } label _breakLabel[339956]
    }
    { unknown _indexOfInterest[340022] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340023] "expr temp" "temp"(340032 'move' _iterator[340023](340030 call _getIterator(340043 call chpl_direct_range_iter(340036 call + prevCursor[339780] 1)(340040 call .(366337 call . this[340990] c"startIdxDom") c"high") 1)))
      Defer
      {
        {(340059 call _freeIterator _iterator[340023])
        }
      }
      { scopeless type(340048 'move' _indexOfInterest[340022](340045 call iteratorIndex _iterator[340023]))
      }
      ForLoop[340024]
      { unknown i[340052] "index var" "insert auto destroy"(340054 'move' i[340052] _indexOfInterest[340022])
        {(340018 call +=(340016 call(412726 call . this[340990] c"startIdx") i[340052]) cursorCnt[339790])
        } label _continueLabel[340027] _indexOfInterest[340022] _iterator[340023]
      } label _breakLabel[340028]
    }
    { unknown _indexOfInterest[340077] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340078] "expr temp" "temp"(340087 'move' _iterator[340078](340085 call _getIterator(412734 call . this[340990] c"_arrs")))
      Defer
      {
        {(340103 call _freeIterator _iterator[340078])
        }
      }
      { scopeless type(340092 'move' _indexOfInterest[340077](340089 call iteratorIndex _iterator[340078]))
      }
      ForLoop[340079]
      { unknown a[340096] "index var" "insert auto destroy"(340098 'move' a[340096] _indexOfInterest[340077])(340075 call(340069 call . a[340096] c"sparseBulkShiftArray") arrShiftMap[339490] oldnnz[339374]) label _continueLabel[340082] _indexOfInterest[340077] _iterator[340078]
      } label _breakLabel[340083]
    }(340111 return actualAddCnt[339351])(355584 'used modules list'(338841 'import' Sort[267968]))
  } function CSDom[340916](?).dsiRemove[340124](arg _mt[340996]:_MT[238], arg this[340994]:CSDom[340916](?), arg ind[340121] :(340119 call *(412742 call . this[340994] c"rank")(412747 call . this[340994] c"idxType"))) : _unknown[51] "method" "primary method"
  { const tmp[340135] "const" "temp"(340134 call(412751 call . this[340994] c"find") ind[340121])(340142 call _check_tuple_var_decl tmp[340135] 2) const found[340126] "const"(340136 call tmp[340135] 0) const insertPt[340128] "const"(340139 call tmp[340135] 1)(340147 'end of statement')
    if(340155 call _cond_test(340150 call ! found[340126]))
    {(340153 return 0)
    }(340162 call -=(412758 call . this[340994] c"_nnz") 1)(340168 call(412764 call . this[340994] c"_shrink")(412769 call . this[340994] c"_nnz")) const tmp[340176] "const" "temp" ind[340121](340183 call _check_tuple_var_decl tmp[340176] 2) const row[340170] "const"(340177 call tmp[340176] 0) const col[340172] "const"(340180 call tmp[340176] 1)(340188 'end of statement')
    { unknown _indexOfInterest[340209] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340210] "expr temp" "temp"(340219 'move' _iterator[340210](340217 call _getIterator(340224 call chpl_direct_range_iter insertPt[340128](412788 call . this[340994] c"_nnz") 1)))
      Defer
      {
        {(340240 call _freeIterator _iterator[340210])
        }
      }
      { scopeless type(340229 'move' _indexOfInterest[340209](340226 call iteratorIndex _iterator[340210]))
      }
      ForLoop[340211]
      { unknown i[340233] "index var" "insert auto destroy"(340235 'move' i[340233] _indexOfInterest[340209])
        {(340205 call =(340197 call(412775 call . this[340994] c"idx") i[340233])(340204 call(412781 call . this[340994] c"idx")(340201 call + i[340233] 1)))
        } label _continueLabel[340214] _indexOfInterest[340209] _iterator[340210]
      } label _breakLabel[340215]
    }
    if(340381 call _cond_test(340248 call . this[340994] c"compressRows"))
    {
      { unknown _indexOfInterest[340271] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340272] "expr temp" "temp"(340281 'move' _iterator[340272](340279 call _getIterator(340292 call chpl_direct_range_iter(340285 call + row[340170] 1)(340289 call .(366344 call . this[340994] c"startIdxDom") c"high") 1)))
        Defer
        {
          {(340308 call _freeIterator _iterator[340272])
          }
        }
        { scopeless type(340297 'move' _indexOfInterest[340271](340294 call iteratorIndex _iterator[340272]))
        }
        ForLoop[340273]
        { unknown r[340301] "index var" "insert auto destroy"(340303 'move' r[340301] _indexOfInterest[340271])
          {(340267 call -=(340265 call(412793 call . this[340994] c"startIdx") r[340301]) 1)
          } label _continueLabel[340276] _indexOfInterest[340271] _iterator[340272]
        } label _breakLabel[340277]
      }
    }
    {
      { unknown _indexOfInterest[340336] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340337] "expr temp" "temp"(340346 'move' _iterator[340337](340344 call _getIterator(340357 call chpl_direct_range_iter(340350 call + col[340172] 1)(340354 call .(366349 call . this[340994] c"startIdxDom") c"high") 1)))
        Defer
        {
          {(340373 call _freeIterator _iterator[340337])
          }
        }
        { scopeless type(340362 'move' _indexOfInterest[340336](340359 call iteratorIndex _iterator[340337]))
        }
        ForLoop[340338]
        { unknown r[340366] "index var" "insert auto destroy"(340368 'move' r[340366] _indexOfInterest[340336])
          {(340332 call -=(340330 call(412800 call . this[340994] c"startIdx") r[340366]) 1)
          } label _continueLabel[340341] _indexOfInterest[340336] _iterator[340337]
        } label _breakLabel[340342]
      }
    }
    { unknown _indexOfInterest[340402] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340403] "expr temp" "temp"(340412 'move' _iterator[340403](340410 call _getIterator(412807 call . this[340994] c"_arrs")))
      Defer
      {
        {(340428 call _freeIterator _iterator[340403])
        }
      }
      { scopeless type(340417 'move' _indexOfInterest[340402](340414 call iteratorIndex _iterator[340403]))
      }
      ForLoop[340404]
      { unknown a[340421] "index var" "insert auto destroy"(340423 'move' a[340421] _indexOfInterest[340402])
        {(340399 call(340388 call . a[340421] c"sparseShiftArrayBack")(340396 call chpl_build_bounded_range insertPt[340128](340394 call -(412813 call . this[340994] c"_nnz") 1)))
        } label _continueLabel[340407] _indexOfInterest[340402] _iterator[340403]
      } label _breakLabel[340408]
    }(340436 return 1)
  } function CSDom[340916](?).dsiClear[340442](arg _mt[341000]:_MT[238], arg this[340998]:CSDom[340916](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {(340446 call =(412818 call . this[340998] c"_nnz") 0)(340452 call =(412823 call . this[340998] c"startIdx") 1)
  } function CSDom[340916](?).dimIter[340461](arg _mt[341004]:_MT[238], arg this[341002]:CSDom[340916](?), param arg d[340459]:_any[178](?), arg ind[340463]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(340535 call _cond_test(340473 call &&(340467 call != d[340459] 1)(340470 call . this[341002] c"compressRows")))
    {(340494 call compilerError "dimIter(0, ..) not supported on CS(compressRows=true) domains")
    }
    {
      if(340531 call _cond_test(340507 call &&(340499 call != d[340459] 0)(340505 call !(340502 call . this[341002] c"compressRows"))))
      {(340528 call compilerError "dimIter(1, ..) not supported on CS(compressRows=false) domains")
      }
    }
    { unknown _indexOfInterest[340558] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340559] "expr temp" "temp"(340568 'move' _iterator[340559](340566 call _getIterator(340577 call chpl_direct_range_iter(340572 call(412836 call . this[341002] c"startIdx") ind[340463])(340575 call(412841 call . this[341002] c"stopIdx") ind[340463]) 1)))
      Defer
      {
        {(340593 call _freeIterator _iterator[340559])
        }
      }
      { scopeless type(340582 'move' _indexOfInterest[340558](340579 call iteratorIndex _iterator[340559]))
      }
      ForLoop[340560]
      { unknown i[340586] "index var" "insert auto destroy"(340588 'move' i[340586] _indexOfInterest[340558])(340556 yield(340555 call(412830 call . this[341002] c"idx") i[340586])) label _continueLabel[340563] _indexOfInterest[340558] _iterator[340559]
      } label _breakLabel[340564]
    }
  } function CSDom[340916](?).dsiSerialWrite[340606](arg _mt[341008]:_MT[238], arg this[341006]:CSDom[340916](?), arg f[340604]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(340610 call <~> f[340604] "{\n")
    if(340904 call _cond_test(340615 call . this[341006] c"compressRows"))
    {
      { unknown _indexOfInterest[340727] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340728] "expr temp" "temp"(340737 'move' _iterator[340728](340735 call _getIterator(412848 call . this[341006] c"rowRange")))
        Defer
        {
          {(340753 call _freeIterator _iterator[340728])
          }
        }
        { scopeless type(340742 'move' _indexOfInterest[340727](340739 call iteratorIndex _iterator[340728]))
        }
        ForLoop[340729]
        { unknown r[340746] "index var" "insert auto destroy"(340748 'move' r[340746] _indexOfInterest[340727])
          { const lo[340624] "const"(340623 call(412853 call . this[341006] c"startIdx") r[340746]) const hi[340631] "const"(340630 call(412858 call . this[341006] c"stopIdx") r[340746])(340634 'end of statement')
            { unknown _indexOfInterest[340689] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340690] "expr temp" "temp"(340699 'move' _iterator[340690](340697 call _getIterator(340704 call chpl_direct_range_iter lo[340624] hi[340631] 1)))
              Defer
              {
                {(340720 call _freeIterator _iterator[340690])
                }
              }
              { scopeless type(340709 'move' _indexOfInterest[340689](340706 call iteratorIndex _iterator[340690]))
              }
              ForLoop[340691]
              { unknown c[340713] "index var" "insert auto destroy"(340715 'move' c[340713] _indexOfInterest[340689])
                {(340685 call <~>(340658 call <~>(340655 call <~>(340649 call <~>(340646 call <~>(340643 call <~> f[340604] " (") r[340746]) ", ")(340654 call(412866 call . this[341006] c"idx") c[340713])) ")")(340682 IfExpr (340662 call == c[340713] hi[340631]) then
                  { scopeless "\n"
                  } else
                  { scopeless ""
                  } ))
                } label _continueLabel[340694] _indexOfInterest[340689] _iterator[340690]
              } label _breakLabel[340695]
            }
          } label _continueLabel[340732] _indexOfInterest[340727] _iterator[340728]
        } label _breakLabel[340733]
      }
    }
    {
      { unknown _indexOfInterest[340870] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340871] "expr temp" "temp"(340880 'move' _iterator[340871](340878 call _getIterator(412876 call . this[341006] c"colRange")))
        Defer
        {
          {(340896 call _freeIterator _iterator[340871])
          }
        }
        { scopeless type(340885 'move' _indexOfInterest[340870](340882 call iteratorIndex _iterator[340871]))
        }
        ForLoop[340872]
        { unknown c[340889] "index var" "insert auto destroy"(340891 'move' c[340889] _indexOfInterest[340870])
          { const lo[340767] "const"(340766 call(412881 call . this[341006] c"startIdx") c[340889]) const hi[340774] "const"(340773 call(412886 call . this[341006] c"stopIdx") c[340889])(340777 'end of statement')
            { unknown _indexOfInterest[340832] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340833] "expr temp" "temp"(340842 'move' _iterator[340833](340840 call _getIterator(340847 call chpl_direct_range_iter lo[340767] hi[340774] 1)))
              Defer
              {
                {(340863 call _freeIterator _iterator[340833])
                }
              }
              { scopeless type(340852 'move' _indexOfInterest[340832](340849 call iteratorIndex _iterator[340833]))
              }
              ForLoop[340834]
              { unknown r[340856] "index var" "insert auto destroy"(340858 'move' r[340856] _indexOfInterest[340832])
                {(340828 call <~>(340801 call <~>(340798 call <~>(340795 call <~>(340792 call <~>(340786 call <~> f[340604] " (")(340791 call(412893 call . this[341006] c"idx") r[340856])) ", ") c[340889]) ")")(340825 IfExpr (340805 call == r[340856] hi[340774]) then
                  { scopeless "\n"
                  } else
                  { scopeless ""
                  } ))
                } label _continueLabel[340837] _indexOfInterest[340832] _iterator[340833]
              } label _breakLabel[340838]
            }
          } label _continueLabel[340875] _indexOfInterest[340870] _iterator[340871]
        } label _breakLabel[340876]
      }
    }(340910 call <~> f[340604] "}\n")
  } type CSDom[340916](?) val super[355796]:BaseSparseDomImpl[147961](?) "super class" unknown compressRows[336280] "param" unknown sortedIndices[336284] "param" unknown stridable[336288] "param" unknown dist[336298](336296 call unmanaged CS[415558](?) compressRows[336280] sortedIndices[336284]) unknown rowRange[336308](336307 call range[64316](?) idxType[148215](stridable = stridable[336288])) unknown colRange[336318](336317 call range[64316](?) idxType[148215](stridable = stridable[336288])) unknown startIdxDom[336328](336326 call chpl__buildDomainRuntimeType defaultDist[94050] 1 idxType[148215]) unknown _nnz[336333] 0 unknown startIdx[336344] "local field"(336342 call chpl__buildArrayRuntimeType(336340 call chpl__ensureDomainExpr startIdxDom[336328]) idxType[148215]) unknown idx[336355] "local field"(336353 call chpl__buildArrayRuntimeType(336351 call chpl__ensureDomainExpr nnzDom[146922]) idxType[148215]) type CSDom[411901](?) function CSArr[341844](?).init[341018](arg _mt[341848]:_MT[238], arg this[341846]:CSArr[341844](?), arg eltType[341016]:_any[178](?), param arg rank[341021] : int(64)[13], arg idxType[341024]:_any[178](?), arg dom[341026]:_any[178](?), param arg initElts[341029] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(341042 call(341033 call .(366358 call . this[341846] c"super") c"init") eltType[341016] rank[341021] idxType[341024] dom[341026] initElts[341029])
  } function CSArr[341844](?).dsiAccess[341056](arg _mt[341852]:_MT[238], arg this[341850]:CSArr[341844](?), arg ind[341053] :(341051 call *(412910 call . this[341850] c"rank")(412915 call . this[341850] c"idxType"))) ref : _unknown[51] "method" "primary method"
  {(341064 call(341059 call .(366363 call . this[341850] c"dom") c"boundsCheck") ind[341053]) const tmp[341079] "const" "temp"(341078 call(341073 call .(366368 call . this[341850] c"dom") c"find") ind[341053])(341086 call _check_tuple_var_decl tmp[341079] 2) const found[341067] "const"(341080 call tmp[341079] 0) const loc[341069] "const"(341083 call tmp[341079] 1)(341091 'end of statement')
    if(341105 call _cond_test found[341067])
    {(341097 return(341096 call(412923 call . this[341850] c"data") loc[341069]))
    }
    {(341103 call halt "attempting to assign a 'zero' value in a sparse array: " ind[341053])
    }
  } function CSArr[341844](?).dsiAccess[341122](arg _mt[341856]:_MT[238], arg this[341854]:CSArr[341844](?), arg ind[341119] :(341117 call *(412930 call . this[341854] c"rank")(412935 call . this[341854] c"idxType"))) : _unknown[51] "method" "primary method"
  {(341134 call(341129 call .(366373 call . this[341854] c"dom") c"boundsCheck") ind[341119]) const tmp[341149] "const" "temp"(341148 call(341143 call .(366378 call . this[341854] c"dom") c"find") ind[341119])(341156 call _check_tuple_var_decl tmp[341149] 2) const found[341137] "const"(341150 call tmp[341149] 0) const loc[341139] "const"(341153 call tmp[341149] 1)(341161 'end of statement')
    if(341172 call _cond_test found[341137])
    {(341167 return(341166 call(412948 call . this[341854] c"data") loc[341139]))
    }
    {(341170 return(412954 call . this[341854] c"irv"))
    }
  }
  {(341127 call shouldReturnRvalueByValue(412940 call . this[341854] c"eltType"))
  } function CSArr[341844](?).dsiAccess[341190](arg _mt[341860]:_MT[238], arg this[341858]:CSArr[341844](?), arg ind[341187] :(341185 call *(412959 call . this[341858] c"rank")(412964 call . this[341858] c"idxType"))) const ref : _unknown[51] "method" "primary method"
  {(341202 call(341197 call .(366383 call . this[341858] c"dom") c"boundsCheck") ind[341187]) const tmp[341217] "const" "temp"(341216 call(341211 call .(366388 call . this[341858] c"dom") c"find") ind[341187])(341224 call _check_tuple_var_decl tmp[341217] 2) const found[341205] "const"(341218 call tmp[341217] 0) const loc[341207] "const"(341221 call tmp[341217] 1)(341229 'end of statement')
    if(341240 call _cond_test found[341205])
    {(341235 return(341234 call(412977 call . this[341858] c"data") loc[341207]))
    }
    {(341238 return(412983 call . this[341858] c"irv"))
    }
  }
  {(341195 call shouldReturnRvalueByConstRef(412969 call . this[341858] c"eltType"))
  } function CSArr[341844](?).these[341251](arg _mt[341864]:_MT[238], arg this[341862]:CSArr[341844](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[341267] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341268] "expr temp" "temp"(341277 'move' _iterator[341268](341275 call _getIterator(341285 call chpl_direct_range_iter 1(341282 call .(366393 call . this[341862] c"dom") c"_nnz") 1)))
      Defer
      {
        {(341301 call _freeIterator _iterator[341268])
        }
      }
      { scopeless type(341290 'move' _indexOfInterest[341267](341287 call iteratorIndex _iterator[341268]))
      }
      ForLoop[341269]
      { unknown i[341294] "index var" "insert auto destroy"(341296 'move' i[341294] _indexOfInterest[341267])(341265 yield(341264 call(412988 call . this[341862] c"data") i[341294])) label _continueLabel[341272] _indexOfInterest[341267] _iterator[341268]
      } label _breakLabel[341273]
    }
  } function CSArr[341844](?).these[341317](arg _mt[341868]:_MT[238], arg this[341866]:CSArr[341844](?), param arg tag[341314] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[341337] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341338] "expr temp" "temp"(341347 'move' _iterator[341338](341345 call _getIterator(341333 call(341328 call .(366399 call . this[341866] c"dom") c"these") tag[341314])))
      Defer
      {
        {(341364 call _freeIterator _iterator[341338])
        }
      }
      { scopeless type(341353 'move' _indexOfInterest[341337](341350 call iteratorIndex _iterator[341338]))
      }
      ForLoop[341339]
      { unknown followThis[341357] "index var" "insert auto destroy"(341359 'move' followThis[341357] _indexOfInterest[341337])(341335 yield followThis[341357]) label _continueLabel[341342] _indexOfInterest[341337] _iterator[341338]
      } label _breakLabel[341343]
    }
  }
  {(341324 call == tag[341314] leader[447])
  } function CSArr[341844](?).these[341381](arg _mt[341872]:_MT[238], arg this[341870]:CSArr[341844](?), param arg tag[341378] : iterKind[453], arg followThis[341389] :(341387 call _build_tuple ?[260] ?[260] ?[260])) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[341407] "temp" followThis[341389](341417 call _check_tuple_var_decl tmp[341407] 3) unknown followThisDom[341399](341408 call tmp[341407] 0) unknown startIx[341401](341411 call tmp[341407] 1) unknown endIx[341403](341414 call tmp[341407] 2)(341422 'end of statement')
    if(341452 call _cond_test(341429 call != followThisDom[341399](341426 call . this[341870] c"dom")))
    {(341450 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays (CS layout)")
    }
    if(341482 call _cond_test debugCS[336053])
    {(341480 call writeln "CSArr follower: " startIx[341401] ".." endIx[341403])
    }
    { unknown _indexOfInterest[341498] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341499] "expr temp" "temp"(341508 'move' _iterator[341499](341506 call _getIterator(341513 call chpl_direct_range_iter startIx[341401] endIx[341403] 1)))
      Defer
      {
        {(341529 call _freeIterator _iterator[341499])
        }
      }
      { scopeless type(341518 'move' _indexOfInterest[341498](341515 call iteratorIndex _iterator[341499]))
      }
      ForLoop[341500]
      { unknown i[341522] "index var" "insert auto destroy"(341524 'move' i[341522] _indexOfInterest[341498])(341496 yield(341495 call(413005 call . this[341870] c"data") i[341522])) label _continueLabel[341503] _indexOfInterest[341498] _iterator[341499]
      } label _breakLabel[341504]
    }
  }
  {(341397 call == tag[341378] follower[449])
  } function CSArr[341844](?).these[341545](arg _mt[341876]:_MT[238], arg this[341874]:CSArr[341844](?), param arg tag[341542] : iterKind[453], arg followThis[341547]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {(341559 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")(341563 yield 0)
  }
  {(341554 call == tag[341542] follower[449])
  } function CSArr[341844](?).dsiSerialWrite[341572](arg _mt[341880]:_MT[238], arg this[341878]:CSArr[341844](?), arg f[341570]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(341836 call _cond_test(341575 call .(366407 call . this[341878] c"dom") c"compressRows"))
    {
      { unknown _indexOfInterest[341673] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341674] "expr temp" "temp"(341683 'move' _iterator[341674](341681 call _getIterator(341582 call .(366412 call . this[341878] c"dom") c"rowRange")))
        Defer
        {
          {(341700 call _freeIterator _iterator[341674])
          }
        }
        { scopeless type(341689 'move' _indexOfInterest[341673](341686 call iteratorIndex _iterator[341674]))
        }
        ForLoop[341675]
        { unknown r[341693] "index var" "insert auto destroy"(341695 'move' r[341693] _indexOfInterest[341673])
          { const lo[341592] "const"(341591 call(341586 call .(366417 call . this[341878] c"dom") c"startIdx") r[341693])(341595 'end of statement') const hi[341606] "const"(341605 call(341600 call .(366422 call . this[341878] c"dom") c"stopIdx") r[341693])(341609 'end of statement')
            { unknown _indexOfInterest[341635] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341636] "expr temp" "temp"(341645 'move' _iterator[341636](341643 call _getIterator(341650 call chpl_direct_range_iter lo[341592] hi[341606] 1)))
              Defer
              {
                {(341666 call _freeIterator _iterator[341636])
                }
              }
              { scopeless type(341655 'move' _indexOfInterest[341635](341652 call iteratorIndex _iterator[341636]))
              }
              ForLoop[341637]
              { unknown c[341659] "index var" "insert auto destroy"(341661 'move' c[341659] _indexOfInterest[341635])
                {(341631 call <~>(341620 call <~> f[341570](341619 call(413018 call . this[341878] c"data") c[341659]))(341628 IfExpr (341624 call == c[341659] hi[341606]) then
                  { scopeless "\n"
                  } else
                  { scopeless " "
                  } ))
                } label _continueLabel[341640] _indexOfInterest[341635] _iterator[341636]
              } label _breakLabel[341641]
            }
          } label _continueLabel[341678] _indexOfInterest[341673] _iterator[341674]
        } label _breakLabel[341679]
      }
    }
    {
      { unknown _indexOfInterest[341801] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341802] "expr temp" "temp"(341811 'move' _iterator[341802](341809 call _getIterator(341712 call .(366427 call . this[341878] c"dom") c"colRange")))
        Defer
        {
          {(341828 call _freeIterator _iterator[341802])
          }
        }
        { scopeless type(341817 'move' _indexOfInterest[341801](341814 call iteratorIndex _iterator[341802]))
        }
        ForLoop[341803]
        { unknown c[341821] "index var" "insert auto destroy"(341823 'move' c[341821] _indexOfInterest[341801])
          { const lo[341722] "const"(341721 call(341716 call .(366432 call . this[341878] c"dom") c"startIdx") c[341821])(341725 'end of statement') const hi[341734] "const"(341733 call(341728 call .(366437 call . this[341878] c"dom") c"stopIdx") c[341821])(341737 'end of statement')
            { unknown _indexOfInterest[341763] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341764] "expr temp" "temp"(341773 'move' _iterator[341764](341771 call _getIterator(341778 call chpl_direct_range_iter lo[341722] hi[341734] 1)))
              Defer
              {
                {(341794 call _freeIterator _iterator[341764])
                }
              }
              { scopeless type(341783 'move' _indexOfInterest[341763](341780 call iteratorIndex _iterator[341764]))
              }
              ForLoop[341765]
              { unknown r[341787] "index var" "insert auto destroy"(341789 'move' r[341787] _indexOfInterest[341763])
                {(341759 call <~>(341748 call <~> f[341570](341747 call(413031 call . this[341878] c"data") r[341787]))(341756 IfExpr (341752 call == r[341787] hi[341734]) then
                  { scopeless "\n"
                  } else
                  { scopeless " "
                  } ))
                } label _continueLabel[341768] _indexOfInterest[341763] _iterator[341764]
              } label _breakLabel[341769]
            }
          } label _continueLabel[341806] _indexOfInterest[341801] _iterator[341802]
        } label _breakLabel[341807]
      }
    }
  } type CSArr[341844](?) val super[355798]:BaseSparseArrImpl[150527](?) "super class" type CSArr[411985](?)(355577 'used modules list'(353078 'use' ChapelStandard[20264])(336050 'import' RangeChunk[266458]))
}