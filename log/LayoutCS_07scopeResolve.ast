AST dump for LayoutCS after pass scopeResolve.
Module use list: ChapelStandard RangeChunk DSIUtil Search Sort 

{ unknown debugCS[336052] "config" "no doc" "param" 0(336055 'end of statement') unknown LayoutCSDefaultToSorted[336057] "config" "param" 1(336060 'end of statement') function _ColumnComparator[336087].key[336068](arg _mt[336091]:_MT[238], arg this[336089]:_ColumnComparator[336087], arg idx[336065] : _tuple[56199](?)) : _unknown[51] "method" "primary method"
  {(336081 return(336079 call _build_tuple(336073 call idx[336065] 1)(336077 call idx[336065] 0)))
  } type _ColumnComparator[336087] const _columnComparator[336095] "const" "no doc" _ColumnComparator[336087](336098 'end of statement') function isCSType[336103](arg t[336101]:_any[178](?)) param : _unknown[51] "no doc"
  {(336113 return(354990 'is_subtype' CS[411953](?)(336109 call _to_borrowed t[336101])))
  } function CS[336253](?).dsiNewSparseDom[336139](arg _mt[336257]:_MT[238], arg this[336255]:CS[336253](?), param arg rank[336136] : int(64)[13], arg idxType[336141]:_any[178](?), arg dom[336144] : _domain[125914](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(336176 return(336149 'new'(_chpl_manager = unmanaged[220](?))(336175 call CSDom[411959](?) rank[336136] idxType[336141](336157 call . this[336255] c"compressRows")(336163 call . this[336255] c"sortedIndices")(336167 call . dom[336144] c"stridable")(336173 call _to_unmanaged this[336255]) dom[336144])))
  } function CS[336253](?).dsiClone[336183](arg _mt[336261]:_MT[238], arg this[336259]:CS[336253](?)) : _unknown[51] "method" "primary method"
  {(336201 return(336187 'new'(_chpl_manager = unmanaged[220](?))(336200 call CS[411953](?)(compressRows =(336190 call . this[336259] c"compressRows"))(sortedIndices =(336196 call . this[336259] c"sortedIndices")))))
  } function CS[336253](?).dsiEqualDMaps[336222](arg _mt[336265]:_MT[238], arg this[336263]:CS[336253](?), arg that[336219] :(336218 call CS[411953](?)(336210 call . this[336263] c"compressRows")(336215 call . this[336263] c"sortedIndices"))) param : _unknown[51] "method" "primary method"
  {(336225 return 1)
  } function CS[336253](?).dsiEqualDMaps[336234](arg _mt[336269]:_MT[238], arg this[336267]:CS[336253](?), arg that[336232]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {(336237 return 0)
  } function CS[336253](?).dsiIsLayout[336244](arg _mt[336273]:_MT[238], arg this[336271]:CS[336253](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {(336247 return 1)
  } type CS[336253](?) val super[355851]:BaseDist[145934] "super class" unknown compressRows[336123] "param" 1 bool[10] unknown sortedIndices[336129] "param" LayoutCSDefaultToSorted[336057] bool[10] type unmanaged CS[415616](?) type CS[411953](?) function CSDom[340915](?).init[336362](arg _mt[340919]:_MT[238], arg this[340917]:CSDom[340915](?), param arg rank[336360]:_any[178](?), arg idxType[336364]:_any[178](?), param arg compressRows[336366]:_any[178](?), param arg sortedIndices[336368]:_any[178](?), param arg stridable[336370]:_any[178](?), arg dist[336378] :(336376 call unmanaged CS[415616](?) compressRows[336366] sortedIndices[336368]), arg parentDom[336382] : _domain[125914](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(336419 call _cond_test(336396 call ||(336387 call != rank[336360] 2)(336394 call !=(336390 call . parentDom[336382] c"rank") 2)))
    {(336417 call compilerError "Only 2D sparse domains are supported by the CS distribution")
    }
    if(336471 call _cond_test(336430 call !=(336426 call . parentDom[336382] c"idxType") idxType[336364]))
    {(336469 call compilerError(336466 call +(336457 call +(336454 call + "idxType mismatch in CSDom.init(): "(336452 call _cast string[26] idxType[336364])) " != ")(336464 call _cast string[26](336460 call . parentDom[336382] c"idxType"))))
    }(336484 call(336477 call .(366192 call . this[340917] c"super") c"init") rank[336360] idxType[336364] parentDom[336382])(336491 call =(336487 call . this[340917] c"compressRows") compressRows[336366])(336499 call =(336495 call . this[340917] c"sortedIndices") sortedIndices[336368])(336507 call =(336503 call . this[340917] c"stridable") stridable[336370])(336515 call =(336511 call . this[340917] c"dist") dist[336378])(336526 call =(411999 call . this[340917] c"rowRange")(336525 call(336520 call . parentDom[336382] c"dim") 0))(336537 call =(412004 call . this[340917] c"colRange")(336536 call(336531 call . parentDom[336382] c"dim") 1))(336577 call =(412009 call . this[340917] c"startIdxDom")(336574 IfExpr  compressRows[336366] then
    { scopeless(336556 call chpl__buildDomainExpr(336553 call chpl_build_bounded_range(336543 call .(366203 call . this[340917] c"rowRange") c"low")(336551 call +(336547 call .(366208 call . this[340917] c"rowRange") c"high") 1)))
    } else
    { scopeless(336572 call chpl__buildDomainExpr(336569 call chpl_build_bounded_range(336559 call .(366213 call . this[340917] c"colRange") c"low")(336567 call +(336563 call .(366218 call . this[340917] c"colRange") c"high") 1)))
    } ))(336585 call(336581 call . this[340917] c"complete"))(336595 call =(412015 call . this[340917] c"nnzDom")(336593 call chpl__buildDomainExpr(336590 call chpl_build_bounded_range 1(412020 call . this[340917] c"_nnz"))))(336600 call(412024 call . this[340917] c"dsiClear"))
  } function CSDom[340915](?).getNNZ[336606](arg _mt[340923]:_MT[238], arg this[340921]:CSDom[340915](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(336610 return(412029 call . this[340921] c"_nnz"))
  }
  { scopeless type int(64)[13]
  } function CSDom[340915](?).dsiMyDist[336618](arg _mt[340927]:_MT[238], arg this[340925]:CSDom[340915](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(336621 return(412034 call . this[340925] c"dist"))
  } function CSDom[340915](?).dsiAssignDomain[336632](arg _mt[340931]:_MT[238], arg this[340929]:CSDom[340915](?), arg rhs[336629] : _domain[125914](?), arg lhsPrivate[336635] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(336767 call _cond_test(336657 call &&(336648 call ==(336645 call _to_borrowed(336643 'typeof'(336640 call . rhs[336629] c"_instance")))(336647 'typeof' this[340929]))(336655 call ==(336651 call . this[340929] c"dsiNumIndices") 0)))
    {(336667 call =(336660 call . this[340929] c"_nnz")(336664 call . rhs[336629] c"_nnz"))(336679 call =(336672 call . this[340929] c"nnzDom")(336676 call . rhs[336629] c"nnzDom"))(336692 call =(336685 call . this[340929] c"startIdx")(336689 call . rhs[336629] c"startIdx"))(336703 call =(336696 call . this[340929] c"idx")(336700 call . rhs[336629] c"idx"))
    }
    {
      if(336763 call _cond_test(336715 call <(336713 call _to_borrowed(336711 'typeof'(336708 call . rhs[336629] c"_instance"))) DefaultSparseDom[378091](?)))
      {(336753 call(336718 call . this[340929] c"dsiBulkAdd")(336744 call(336725 call .(336722 call . rhs[336629] c"_instance") c"_indices")(336741 call #(336735 call chpl_build_low_bounded_range(336732 call .(336729 call . rhs[336629] c"nnzDom") c"low"))(336738 call . rhs[336629] c"_nnz")))(dataSorted =(336747 call . this[340929] c"compressRows"))(isUnique = 1))
      }
      {(336760 call chpl_assignDomainWithIndsIterSafeForRemoving this[340929] rhs[336629])
      }
    }
  } function CSDom[340915](?).dsiBuildArray[336779](arg _mt[340935]:_MT[238], arg this[340933]:CSDom[340915](?), arg eltType[336777]:_any[178](?), param arg initElts[336782] : bool[10]) : _unknown[51] "method" "primary method"
  {(336804 return(336787 'new'(_chpl_manager = unmanaged[220](?))(336803 call CSArr[412043](?)(eltType = eltType[336777])(rank =(412049 call . this[340933] c"rank"))(idxType =(412054 call . this[340933] c"idxType"))(dom =(336799 call _to_unmanaged this[340933]))(initElts = initElts[336782]))))
  } function CSDom[340915](?).dsiIndsIterSafeForRemoving[336811](arg _mt[340939]:_MT[238], arg this[340937]:CSDom[340915](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown cursor[336828](336825 IfExpr (336814 call . this[340937] c"compressRows") then
    { scopeless(336818 call .(366241 call . this[340937] c"rowRange") c"high")
    } else
    { scopeless(336822 call .(366246 call . this[340937] c"colRange") c"high")
    } )(336831 'end of statement')
    { unknown _indexOfInterest[336918] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[336919] "expr temp" "temp"(336928 'move' _iterator[336919](336926 call _getIterator(336939 call chpl_direct_range_iter 1(412090 call . this[340937] c"_nnz")(336935 call - 1))))
      Defer
      {
        {(336955 call _freeIterator _iterator[336919])
        }
      }
      { scopeless type(336944 'move' _indexOfInterest[336918](336941 call iteratorIndex _iterator[336919]))
      }
      ForLoop[336920]
      { unknown i[336948] "index var" "insert auto destroy"(336950 'move' i[336948] _indexOfInterest[336918])
        {
          { unknown tmp[336856] "temp"(336884 'move' tmp[336856](336877 call _cond_test(336879 call >(336881 call(412069 call . this[340937] c"startIdx") cursor[336828]) i[336948])))
            WhileDo[336861]
            {
              {(336852 call -= cursor[336828] 1)
              } label _continueLabel[336859](336872 'move' tmp[336856](336865 call _cond_test(336867 call >(336869 call(412062 call . this[340937] c"startIdx") cursor[336828]) i[336948]))) tmp[336856]
            } label _breakLabel[336860]
          }
          if(336914 call _cond_test(336889 call . this[340937] c"compressRows"))
          {(336900 yield(336898 call _build_tuple cursor[336828](336896 call(412077 call . this[340937] c"idx") i[336948])))
          }
          {(336911 yield(336909 call _build_tuple(336906 call(412083 call . this[340937] c"idx") i[336948]) cursor[336828]))
          }
        } label _continueLabel[336923] _indexOfInterest[336918] _iterator[336919]
      } label _breakLabel[336924]
    }
  } function CSDom[340915](?).these[336966](arg _mt[340943]:_MT[238], arg this[340941]:CSDom[340915](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown cursor[336983](336980 IfExpr (336969 call . this[340941] c"compressRows") then
    { scopeless(336973 call .(366253 call . this[340941] c"rowRange") c"low")
    } else
    { scopeless(336977 call .(366258 call . this[340941] c"colRange") c"low")
    } )(336986 'end of statement')
    { unknown _indexOfInterest[337077] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337078] "expr temp" "temp"(337087 'move' _iterator[337078](337085 call _getIterator(337092 call chpl_direct_range_iter 1(412124 call . this[340941] c"_nnz") 1)))
      Defer
      {
        {(337108 call _freeIterator _iterator[337078])
        }
      }
      { scopeless type(337097 'move' _indexOfInterest[337077](337094 call iteratorIndex _iterator[337078]))
      }
      ForLoop[337079]
      { unknown i[337101] "index var" "insert auto destroy"(337103 'move' i[337101] _indexOfInterest[337077])
        {
          { unknown tmp[337009] "temp"(337043 'move' tmp[337009](337033 call _cond_test(337035 call <=(337037 call(412103 call . this[340941] c"startIdx")(337039 call + cursor[336983] 1)) i[337101])))
            WhileDo[337014]
            {
              {(337005 call += cursor[336983] 1)
              } label _continueLabel[337012](337028 'move' tmp[337009](337018 call _cond_test(337020 call <=(337022 call(412096 call . this[340941] c"startIdx")(337024 call + cursor[336983] 1)) i[337101]))) tmp[337009]
            } label _breakLabel[337013]
          }
          if(337071 call _cond_test(337048 call . this[340941] c"compressRows"))
          {(337059 yield(337057 call _build_tuple cursor[336983](337055 call(412111 call . this[340941] c"idx") i[337101])))
          }
          {(337069 yield(337067 call _build_tuple(337064 call(412117 call . this[340941] c"idx") i[337101]) cursor[336983]))
          }
        } label _continueLabel[337082] _indexOfInterest[337077] _iterator[337078]
      } label _breakLabel[337083]
    }
  } function CSDom[340915](?).these[337123](arg _mt[340947]:_MT[238], arg this[340945]:CSDom[340915](?), param arg tag[337120] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { const numElems[337137] "const"(412131 call . this[340945] c"_nnz")(337140 'end of statement') const numChunks[337145] "const"(337144 call _computeNumChunks numElems[337137])(337148 'end of statement')
    if(337175 call _cond_test debugCS[336052])
    {(337173 call writeln "CSDom leader: " numChunks[337145] " chunks, " numElems[337137] " elems")
    }
    if(337389 call _cond_test(337182 call == numChunks[337145] 1))
    {(337190 yield(337188 call _build_tuple this[340945] 1 numElems[337137]))
    }
    { unknown tmpIter[337218] "expr temp" "maybe ref" "no copy" "temp"(337221 'move' tmpIter[337218](337203 call chunks module=[255] RangeChunk[266375](337199 call chpl_build_bounded_range 1 numElems[337137]) numChunks[337145])) unknown isRngDomArr[337370] "maybe param" "temp"(337385 'move' isRngDomArr[337370](337383 call ||(337372 call isBoundedRange tmpIter[337218])(337381 call ||(337375 call isDomain tmpIter[337218])(337378 call isArray tmpIter[337218]))))
      if isRngDomArr[337370]
      { const _coforallCount[337237] "const" "end count" "temp"(337306 'move' _coforallCount[337237](337303 call _endCountAlloc 1)) unknown numTasks[337238] "temp"(337290 'move' numTasks[337238](337286 call . tmpIter[337218] c"size"))(337281 call _upEndCount _coforallCount[337237] 1 numTasks[337238])(337278 call chpl_resetTaskSpawn numTasks[337238]) unknown _indexOfInterest[337245] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337246] "expr temp" "temp"(337255 'move' _iterator[337246](337253 call _getIterator tmpIter[337218]))
        Defer
        {
          {(337271 call _freeIterator _iterator[337246])
          }
        }
        { scopeless type(337260 'move' _indexOfInterest[337245](337257 call iteratorIndex _iterator[337246]))
        }
        ForLoop[337247]
        { unknown chunk[337264] "coforall index var" "index var" "insert auto destroy"(337266 'move' chunk[337264] _indexOfInterest[337245])
          {(337224 yield(337226 call _build_tuple this[340945](337229 call . chunk[337264] c"first")(337233 call . chunk[337264] c"last")))(337240 call _downEndCount _coforallCount[337237] nil[44])(337239 'coforall loop')
          } label _continueLabel[337250] _indexOfInterest[337245] _iterator[337246]
        } label _breakLabel[337251]
        Defer
        {
          {(337293 call _endCountFree _coforallCount[337237])
          }
        }(337298 call _waitEndCount _coforallCount[337237] 1 numTasks[337238])
      }
      { const _coforallCount[337310] "const" "end count" "temp"(337367 'move' _coforallCount[337310](337364 call _endCountAlloc 1)) unknown _indexOfInterest[337318] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337319] "expr temp" "temp"(337328 'move' _iterator[337319](337326 call _getIterator tmpIter[337218]))
        Defer
        {
          {(337344 call _freeIterator _iterator[337319])
          }
        }
        { scopeless type(337333 'move' _indexOfInterest[337318](337330 call iteratorIndex _iterator[337319]))
        }
        ForLoop[337320]
        { unknown chunk[337337] "coforall index var" "index var" "insert auto destroy"(337339 'move' chunk[337337] _indexOfInterest[337318])(337351 call _upEndCount _coforallCount[337310] 1)
          {(337216 yield(337214 call _build_tuple this[340945](337206 call . chunk[337337] c"first")(337211 call . chunk[337337] c"last")))(337313 call _downEndCount _coforallCount[337310] nil[44])(337312 'coforall loop')
          } label _continueLabel[337323] _indexOfInterest[337318] _iterator[337319]
        } label _breakLabel[337324]
        Defer
        {
          {(337355 call _endCountFree _coforallCount[337310])
          }
        }(337360 call _waitEndCount _coforallCount[337310] 1)
      }(366264 'referenced modules list' RangeChunk[266375])
    }(355637 'used modules list'(337133 'use' DSIUtil[230805]))
  }
  {(337130 call == tag[337120] leader[447])
  } function CSDom[340915](?).these[337403](arg _mt[340951]:_MT[238], arg this[340949]:CSDom[340915](?), param arg tag[337400] : iterKind[453], arg followThis[337411] :(337409 call _build_tuple ?[260] ?[260] ?[260])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[337429] "temp" followThis[337411](337439 call _check_tuple_var_decl tmp[337429] 3) unknown followThisDom[337421](337430 call tmp[337429] 0) unknown startIx[337423](337433 call tmp[337429] 1) unknown endIx[337425](337436 call tmp[337429] 2)(337444 'end of statement')
    if(337472 call _cond_test 1)
    {(337470 call assert(337450 call <= startIx[337423] endIx[337425]) "CSDom follower - got nothing to iterate over")
    }
    if(337504 call _cond_test(337479 call != followThisDom[337421] this[340949]))
    {(337502 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays (CS layout)")
    } unknown cursor[337513](337512 call(412156 call . this[340949] c"_private_findStart") startIx[337423])(337516 'end of statement')
    if(337581 call _cond_test debugCS[336052])
    {(337579 call writeln "CSDom follower: " startIx[337423] ".." endIx[337425] "  startIdx(" cursor[337513] ")="(337578 call(412166 call . this[340949] c"startIdx") cursor[337513]))
    }
    { unknown _indexOfInterest[337674] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337675] "expr temp" "temp"(337684 'move' _iterator[337675](337682 call _getIterator(337689 call chpl_direct_range_iter startIx[337423] endIx[337425] 1)))
      Defer
      {
        {(337705 call _freeIterator _iterator[337675])
        }
      }
      { scopeless type(337694 'move' _indexOfInterest[337674](337691 call iteratorIndex _iterator[337675]))
      }
      ForLoop[337676]
      { unknown i[337698] "index var" "insert auto destroy"(337700 'move' i[337698] _indexOfInterest[337674])
        {
          { unknown tmp[337606] "temp"(337640 'move' tmp[337606](337630 call _cond_test(337632 call <=(337634 call(412180 call . this[340949] c"startIdx")(337636 call + cursor[337513] 1)) i[337698])))
            WhileDo[337611]
            {(337603 call += cursor[337513] 1) label _continueLabel[337609](337625 'move' tmp[337606](337615 call _cond_test(337617 call <=(337619 call(412173 call . this[340949] c"startIdx")(337621 call + cursor[337513] 1)) i[337698]))) tmp[337606]
            } label _breakLabel[337610]
          }
          if(337668 call _cond_test(337645 call . this[340949] c"compressRows"))
          {(337656 yield(337654 call _build_tuple cursor[337513](337652 call(412188 call . this[340949] c"idx") i[337698])))
          }
          {(337666 yield(337664 call _build_tuple(337661 call(412194 call . this[340949] c"idx") i[337698]) cursor[337513]))
          }
        } label _continueLabel[337679] _indexOfInterest[337674] _iterator[337675]
      } label _breakLabel[337680]
    }
  }
  {(337419 call == tag[337400] follower[449])
  } function CSDom[340915](?).these[337721](arg _mt[340955]:_MT[238], arg this[340953]:CSDom[340915](?), param arg tag[337718] : iterKind[453], arg followThis[337723]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {(337751 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")(337755 yield 0)
  }
  {(337730 call == tag[337718] follower[449])
  } function CSDom[340915](?)._private_findStart[337764](arg _mt[340959]:_MT[238], arg this[340957]:CSDom[340915](?), arg startIx[337762]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(337778 return(337777 call(412204 call . this[340957] c"_private_findStart") startIx[337762](337770 call .(366280 call . this[340957] c"startIdxDom") c"low")(337774 call .(366285 call . this[340957] c"startIdxDom") c"high")))
  } function CSDom[340915](?)._private_findStart[337787](arg _mt[340963]:_MT[238], arg this[340961]:CSDom[340915](?), arg startIx[337785]:_any[178](?), arg low[337789]:_any[178](?), arg high[337791]:_any[178](?)) : _unknown[51] "method" "primary method"
  { unknown approx[337794] 2(337797 'end of statement') unknown l[337800] low[337789] unknown h[337804] high[337791](337807 'end of statement')
    { unknown tmp[337850] "temp"(337880 'move' tmp[337850](337872 call _cond_test(337874 call > h[337804](337877 call + l[337800] approx[337794]))))
      WhileDo[337855]
      {
        { unknown m[337822](337820 call /(337817 call + h[337804] l[337800]) 2)(337825 'end of statement')
          if(337844 call _cond_test(337832 call <=(337830 call(412214 call . this[340961] c"startIdx") m[337822]) startIx[337785]))
          {(337836 call = l[337800] m[337822])
          }
          {(337841 call = h[337804] m[337822])
          }
        } label _continueLabel[337853](337867 'move' tmp[337850](337859 call _cond_test(337861 call > h[337804](337864 call + l[337800] approx[337794])))) tmp[337850]
      } label _breakLabel[337854]
    } unknown hh[337891](337890 call min(337886 call + l[337800] approx[337794]) high[337791])(337894 'end of statement')
    if(337953 call _cond_test 1)
    {(337922 call assert(337902 call <=(337900 call(412235 call . this[340961] c"startIdx") l[337800]) startIx[337785]) "CSDom.findStart-1")(337951 call assert(337931 call < startIx[337785](337930 call(412243 call . this[340961] c"startIdx") hh[337891])) "CSDom.findStart-2")
    }(337958 return l[337800])
  } function CSDom[340915](?).stopIdx[337966](arg _mt[340967]:_MT[238], arg this[340965]:CSDom[340915](?), arg i[337964]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(337978 return(337976 call -(337974 call(412250 call . this[340965] c"startIdx")(337971 call + i[337964] 1)) 1))
  } function CSDom[340915](?).find[337992](arg _mt[340971]:_MT[238], arg this[340969]:CSDom[340915](?), arg ind[337989] :(337987 call *(412256 call . this[340969] c"rank")(412261 call . this[340969] c"idxType"))) : _unknown[51] "method" "primary method"
  { const tmp[338004] "const" "temp" ind[337989](338011 call _check_tuple_var_decl tmp[338004] 2) const row[337998] "const"(338005 call tmp[338004] 0) const col[338000] "const"(338008 call tmp[338004] 1)(338016 'end of statement') unknown ret[338022](338020 call _build_tuple bool[10](412267 call . this[340969] c"idxType"))(338025 'end of statement')
    if(338128 call _cond_test(338027 call . this[340969] c"compressRows"))
    {
      if(338073 call _cond_test(338031 call . this[340969] c"sortedIndices"))
      {(338050 call = ret[338022](338049 call binarySearch(412273 call . this[340969] c"idx") col[338000](lo =(338042 call(412279 call . this[340969] c"startIdx") row[337998]))(hi =(338047 call(412284 call . this[340969] c"stopIdx") row[337998]))))
      }
      {(338069 call = ret[338022](338068 call linearSearch(412291 call . this[340969] c"idx") col[338000](lo =(338061 call(412297 call . this[340969] c"startIdx") row[337998]))(hi =(338066 call(412302 call . this[340969] c"stopIdx") row[337998]))))
      }
    }
    {
      if(338122 call _cond_test(338080 call . this[340969] c"sortedIndices"))
      {(338099 call = ret[338022](338098 call binarySearch(412309 call . this[340969] c"idx") row[337998](lo =(338091 call(412315 call . this[340969] c"startIdx") col[338000]))(hi =(338096 call(412320 call . this[340969] c"stopIdx") col[338000]))))
      }
      {(338118 call = ret[338022](338117 call linearSearch(412327 call . this[340969] c"idx") row[337998](lo =(338110 call(412333 call . this[340969] c"startIdx") col[338000]))(hi =(338115 call(412338 call . this[340969] c"stopIdx") col[338000]))))
      }
    }(338133 return ret[338022])(355639 'used modules list'(337995 'use' Search[291162]))
  } function CSDom[340915](?).dsiMember[338146](arg _mt[340975]:_MT[238], arg this[340973]:CSDom[340915](?), arg ind[338143] :(338141 call *(412345 call . this[340973] c"rank")(412350 call . this[340973] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    if(338181 call _cond_test(338154 call(338149 call .(366293 call . this[340973] c"parentDom") c"contains") ind[338143]))
    { const tmp[338164] "const" "temp"(338163 call(412355 call . this[340973] c"find") ind[338143])(338171 call _check_tuple_var_decl tmp[338164] 2) const found[338155] "const"(338165 call tmp[338164] 0) const loc[338157] "const"(338168 call tmp[338164] 1)(338176 'end of statement')(338179 return found[338155])
    }(338187 return 0)
  } function CSDom[340915](?).dsiFirst[338193](arg _mt[340979]:_MT[238], arg this[340977]:CSDom[340915](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338212 call _cond_test(338197 call ==(412362 call . this[340977] c"_nnz") 0))
    {(338210 return(338208 call -(338200 call .(366298 call . this[340977] c"parentDom") c"low")(338206 call _build_tuple 1 1)))
    } const _low[338222] "const"(338219 call .(366303 call . this[340977] c"nnzDom") c"low")(338225 'end of statement')
    { unknown _indexOfInterest[338289] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338290] "expr temp" "temp"(338299 'move' _iterator[338290](338297 call _getIterator(412367 call . this[340977] c"startIdxDom")))
      Defer
      {
        {(338315 call _freeIterator _iterator[338290])
        }
      }
      { scopeless type(338304 'move' _indexOfInterest[338289](338301 call iteratorIndex _iterator[338290]))
      }
      ForLoop[338291]
      { unknown i[338308] "index var" "insert auto destroy"(338310 'move' i[338308] _indexOfInterest[338289])
        {
          if(338284 call _cond_test(338233 call >(338231 call(412372 call . this[340977] c"startIdx") i[338308]) _low[338222]))
          {
            if(338277 call _cond_test(338236 call . this[340977] c"compressRows"))
            {(338256 return(338254 call _build_tuple(338241 call - i[338308] 1)(338252 call(412380 call . this[340977] c"idx")(338248 call .(338245 call .(366309 call . this[340977] c"idx") c"_dom") c"low"))))
            }
            {(338275 return(338273 call _build_tuple(338267 call(412385 call . this[340977] c"idx")(338263 call .(338260 call .(366314 call . this[340977] c"idx") c"_dom") c"low"))(338270 call - i[338308] 1)))
            }
          }
        } label _continueLabel[338294] _indexOfInterest[338289] _iterator[338290]
      } label _breakLabel[338295]
    }(338341 call halt "Something went wrong in dsiFirst")(338348 return(338346 call _build_tuple 0 0))
  } function CSDom[340915](?).dsiLast[338354](arg _mt[340983]:_MT[238], arg this[340981]:CSDom[340915](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338373 call _cond_test(338358 call ==(412391 call . this[340981] c"_nnz") 0))
    {(338371 return(338369 call -(338361 call .(366319 call . this[340981] c"parentDom") c"low")(338367 call _build_tuple 1 1)))
    } unknown _last[338389](338387 call -(338385 call(338380 call .(366324 call . this[340981] c"parentDom") c"low") 1) 1)(338392 'end of statement')
    { unknown _indexOfInterest[338415] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338416] "expr temp" "temp"(338425 'move' _iterator[338416](338423 call _getIterator(412396 call . this[340981] c"startIdxDom")))
      Defer
      {
        {(338441 call _freeIterator _iterator[338416])
        }
      }
      { scopeless type(338430 'move' _indexOfInterest[338415](338427 call iteratorIndex _iterator[338416]))
      }
      ForLoop[338417]
      { unknown i[338434] "index var" "insert auto destroy"(338436 'move' i[338434] _indexOfInterest[338415])
        if(338410 call _cond_test(338400 call >(338398 call(412401 call . this[340981] c"startIdx") i[338434]) _last[338389]))
        {(338407 call = _last[338389](338405 call - i[338434] 1))
        } label _continueLabel[338420] _indexOfInterest[338415] _iterator[338416]
      } label _breakLabel[338421]
    }
    if(338472 call _cond_test(338449 call . this[340981] c"compressRows"))
    {(338460 return(338458 call _build_tuple _last[338389](338456 call(412411 call . this[340981] c"idx")(412416 call . this[340981] c"_nnz"))))
    }
    {(338470 return(338468 call _build_tuple(338465 call(412421 call . this[340981] c"idx")(412426 call . this[340981] c"_nnz")) _last[338389]))
    }
  } function CSDom[340915](?).dsiAdd[338489](arg _mt[340987]:_MT[238], arg this[340985]:CSDom[340915](?), arg ind[338486] :(338484 call *(412432 call . this[340985] c"rank")(412437 call . this[340985] c"idxType"))) : _unknown[51] "method" "primary method"
  {(338494 call(412441 call . this[340985] c"boundsCheck") ind[338486]) const tmp[338506] "const" "temp"(338505 call(412446 call . this[340985] c"find") ind[338486])(338513 call _check_tuple_var_decl tmp[338506] 2) const found[338497] "const"(338507 call tmp[338506] 0) const insertPt[338499] "const"(338510 call tmp[338506] 1)(338518 'end of statement')
    if(338523 call _cond_test found[338497])
    {(338521 return 0)
    }(338530 call +=(412453 call . this[340985] c"_nnz") 1) unknown oldNNZDomSize[338537](338534 call .(366330 call . this[340985] c"nnzDom") c"size")(338540 'end of statement')(338544 call(412457 call . this[340985] c"_grow")(412462 call . this[340985] c"_nnz")) const tmp[338552] "const" "temp" ind[338486](338559 call _check_tuple_var_decl tmp[338552] 2) const row[338546] "const"(338553 call tmp[338552] 0) const col[338548] "const"(338556 call tmp[338552] 1)(338564 'end of statement')
    { unknown _indexOfInterest[338593] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338594] "expr temp" "temp"(338603 'move' _iterator[338594](338601 call _getIterator(338620 call chpl_direct_range_iter insertPt[338499](338617 call -(412481 call . this[340985] c"_nnz") 1)(338613 call - 1))))
      Defer
      {
        {(338636 call _freeIterator _iterator[338594])
        }
      }
      { scopeless type(338625 'move' _indexOfInterest[338593](338622 call iteratorIndex _iterator[338594]))
      }
      ForLoop[338595]
      { unknown i[338629] "index var" "insert auto destroy"(338631 'move' i[338629] _indexOfInterest[338593])
        {(338589 call =(338584 call(412468 call . this[340985] c"idx")(338581 call + i[338629] 1))(338588 call(412474 call . this[340985] c"idx") i[338629]))
        } label _continueLabel[338598] _indexOfInterest[338593] _iterator[338594]
      } label _breakLabel[338599]
    }
    if(338663 call _cond_test(338644 call . this[340985] c"compressRows"))
    {(338652 call =(338650 call(412486 call . this[340985] c"idx") insertPt[338499]) col[338548])
    }
    {(338660 call =(338658 call(412493 call . this[340985] c"idx") insertPt[338499]) row[338546])
    } unknown start[338678](338675 IfExpr (338670 call . this[340985] c"compressRows") then
    { scopeless row[338546]
    } else
    { scopeless col[338548]
    } )(338681 'end of statement')
    { unknown _indexOfInterest[338702] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338703] "expr temp" "temp"(338712 'move' _iterator[338703](338710 call _getIterator(338723 call chpl_direct_range_iter(338716 call + start[338678] 1)(338720 call .(366337 call . this[340985] c"startIdxDom") c"high") 1)))
      Defer
      {
        {(338739 call _freeIterator _iterator[338703])
        }
      }
      { scopeless type(338728 'move' _indexOfInterest[338702](338725 call iteratorIndex _iterator[338703]))
      }
      ForLoop[338704]
      { unknown rc[338732] "index var" "insert auto destroy"(338734 'move' rc[338732] _indexOfInterest[338702])
        {(338698 call +=(338696 call(412502 call . this[340985] c"startIdx") rc[338732]) 1)
        } label _continueLabel[338707] _indexOfInterest[338702] _iterator[338703]
      } label _breakLabel[338708]
    }
    { unknown _indexOfInterest[338773] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338774] "expr temp" "temp"(338783 'move' _iterator[338774](338781 call _getIterator(412509 call . this[340985] c"_arrs")))
      Defer
      {
        {(338799 call _freeIterator _iterator[338774])
        }
      }
      { scopeless type(338788 'move' _indexOfInterest[338773](338785 call iteratorIndex _iterator[338774]))
      }
      ForLoop[338775]
      { unknown a[338792] "index var" "insert auto destroy"(338794 'move' a[338792] _indexOfInterest[338773])
        {(338770 call(338749 call . a[338792] c"sparseShiftArray")(338757 call chpl_build_bounded_range insertPt[338499](338755 call -(412515 call . this[340985] c"_nnz") 1))(338768 call chpl_build_bounded_range(338762 call + oldNNZDomSize[338537] 1)(338765 call .(366343 call . this[340985] c"nnzDom") c"size")))
        } label _continueLabel[338778] _indexOfInterest[338773] _iterator[338774]
      } label _breakLabel[338779]
    }(338807 return 1)
  } function CSDom[340915](?).bulkAdd_help[338825](arg _mt[340991]:_MT[238], arg this[340989]:CSDom[340915](?), arg inds[338822] :(338820 call chpl__buildArrayRuntimeType unknown indsDom[338813](338818 call *(412521 call . this[340989] c"rank")(412526 call . this[340989] c"idxType"))), arg dataSorted[338828] = 0, arg isUnique[338832] = 0, arg addOn[338836] = nilLocale[89943]) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(338881 call _cond_test(338845 call != addOn[338836] nilLocale[89943]))
    {
      if(338876 call _cond_test(338852 call != addOn[338836](338850 call chpl_localeID_to_locale(338849 '_wide_get_locale' this[340989]))))
      {(338873 call halt "Bulk index addition is only possible on the locale where the\n            sparse domain is created")
      }
    }
    if(338911 call _cond_test(338886 call . this[340989] c"compressRows"))
    {(338899 call(412535 call . this[340989] c"bulkAdd_prepareInds") inds[338822] dataSorted[338828] isUnique[338832](cmp = defaultComparator[267894]))(366348 'referenced modules list' Sort[267885])
    }
    {(338908 call(412542 call . this[340989] c"bulkAdd_prepareInds") inds[338822] dataSorted[338828] isUnique[338832](cmp = _columnComparator[336095]))
    }
    if(339344 call _cond_test(338918 call ==(412551 call . this[340989] c"_nnz") 0))
    { const dupCount[338929] "const"(338926 IfExpr  isUnique[338832] then
      { scopeless 0
      } else
      { scopeless(338925 call(412556 call . this[340989] c"_countDuplicates") inds[338822])
      } )(338932 'end of statement')(338942 call +=(412562 call . this[340989] c"_nnz")(338940 call -(338936 call . inds[338822] c"size") dupCount[338929]))(338947 call(412567 call . this[340989] c"_bulkGrow")) unknown idxIdx[338950] 1(338953 'end of statement') unknown prevIdx[338965](338963 call -(338955 call .(366354 call . this[340989] c"parentDom") c"low")(338961 call _build_tuple 1 1))(338968 'end of statement') unknown current[338970](412572 call . this[340989] c"idxType")(338973 'end of statement')
      if(339006 call _cond_test(338975 call . this[340989] c"compressRows"))
      {(338989 call = current[338970](338986 call .(338985 call(338980 call .(366360 call . this[340989] c"parentDom") c"dim") 0) c"low"))
      }
      {(339003 call = current[338970](339000 call .(338999 call(338994 call .(366365 call . this[340989] c"parentDom") c"dim") 1) c"low"))
      }
      { unknown _indexOfInterest[339210] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339211] "expr temp" "temp"(339220 'move' _iterator[339211](339218 call _getIterator inds[338822]))
        Defer
        {
          {(339250 call _freeIterator _iterator[339211])
          }
        }
        { scopeless type(339225 'move' _indexOfInterest[339210](339222 call iteratorIndex _iterator[339211]))
        }
        ForLoop[339212]
        {(339230 call _check_tuple_var_decl _indexOfInterest[339210] 2) unknown i[339236] "index var" "insert auto destroy"(339238 'move' i[339236](339234 call _indexOfInterest[339210] 0)) unknown j[339243] "index var" "insert auto destroy"(339245 'move' j[339243](339241 call _indexOfInterest[339210] 1))
          {
            if(339043 call _cond_test(339029 call &&(339019 call ! isUnique[338832])(339027 call ==(339024 call _build_tuple i[339236] j[339243]) prevIdx[338965])))
            {
              continue _continueLabel[339215] _continueLabel[339215]
            }
            {(339040 call = prevIdx[338965](339038 call _build_tuple i[339236] j[339243]))
            }
            if(339206 call _cond_test(339051 call . this[340989] c"compressRows"))
            {
              { unknown tmp[339078] "temp"(339102 'move' tmp[339078](339097 call _cond_test(339099 call != i[339236] current[338970])))
                WhileDo[339083]
                {
                  {(339060 call += current[338970] 1)(339075 call =(339070 call(412588 call . this[340989] c"startIdx")(339067 call + current[338970] 1))(339074 call(412594 call . this[340989] c"startIdx") current[338970]))
                  } label _continueLabel[339081](339092 'move' tmp[339078](339087 call _cond_test(339089 call != i[339236] current[338970]))) tmp[339078]
                } label _breakLabel[339082]
              }(339114 call +=(339112 call(412604 call . this[340989] c"startIdx")(339109 call + i[339236] 1)) 1)(339122 call =(339120 call(412610 call . this[340989] c"idx") idxIdx[338950]) j[339243])(339127 call += idxIdx[338950] 1)
            }
            {
              { unknown tmp[339154] "temp"(339178 'move' tmp[339154](339173 call _cond_test(339175 call != j[339243] current[338970])))
                WhileDo[339159]
                {
                  {(339136 call += current[338970] 1)(339151 call =(339146 call(412619 call . this[340989] c"startIdx")(339143 call + current[338970] 1))(339150 call(412625 call . this[340989] c"startIdx") current[338970]))
                  } label _continueLabel[339157](339168 'move' tmp[339154](339163 call _cond_test(339165 call != j[339243] current[338970]))) tmp[339154]
                } label _breakLabel[339158]
              }(339190 call +=(339188 call(412635 call . this[340989] c"startIdx")(339185 call + j[339243] 1)) 1)(339198 call =(339196 call(412641 call . this[340989] c"idx") idxIdx[338950]) i[339236])(339203 call += idxIdx[338950] 1)
            }
          } label _continueLabel[339215] _indexOfInterest[339210] _iterator[339211]
        } label _breakLabel[339216]
      } const startIdxHigh[339264] "const"(339263 call(412649 call . this[340989] c"startIdx")(339260 call + current[338970] 1))(339267 'end of statement')
      { unknown _indexOfInterest[339291] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339292] "expr temp" "temp"(339301 'move' _iterator[339292](339299 call _getIterator(339315 call chpl_direct_range_iter(339305 call + current[338970] 2)(339309 call .(339311 call .(366371 call . this[340989] c"startIdx") c"_dom") c"high") 1)))
        Defer
        {
          {(339331 call _freeIterator _iterator[339292])
          }
        }
        { scopeless type(339320 'move' _indexOfInterest[339291](339317 call iteratorIndex _iterator[339292]))
        }
        ForLoop[339293]
        { unknown r[339324] "index var" "insert auto destroy"(339326 'move' r[339324] _indexOfInterest[339291])
          {(339287 call =(339285 call(412655 call . this[340989] c"startIdx") r[339324]) startIdxHigh[339264])
          } label _continueLabel[339296] _indexOfInterest[339291] _iterator[339292]
        } label _breakLabel[339297]
      }(339342 return(339340 call - idxIdx[338950] 1))
    } const tmp[339359] "const" "temp"(339358 call(412663 call . this[340989] c"__getActualInsertPts") this[340989] inds[338822] isUnique[338832])(339366 call _check_tuple_var_decl tmp[339359] 2) const actualInsertPts[339348] "const"(339360 call tmp[339359] 0) const actualAddCnt[339350] "const"(339363 call tmp[339359] 1)(339371 'end of statement') const oldnnz[339373] "const"(412671 call . this[340989] c"_nnz")(339376 'end of statement')(339379 call +=(412676 call . this[340989] c"_nnz") actualAddCnt[339350])(339384 call(412681 call . this[340989] c"_bulkGrow")) unknown newIndIdx[339390](339387 call . indsDom[338813] c"high")(339393 'end of statement') unknown oldIndIdx[339395] oldnnz[339373](339398 'end of statement') unknown newLoc[339403](339402 call actualInsertPts[339348] newIndIdx[339390])(339406 'end of statement')
    { unknown tmp[339445] "temp"(339473 'move' tmp[339445](339466 call _cond_test(339468 call == newLoc[339403](339471 call - 1))))
      WhileDo[339450]
      {
        {(339415 call -= newIndIdx[339390] 1)
          if(339432 call _cond_test(339427 call == newIndIdx[339390](339425 call -(339421 call . indsDom[338813] c"low") 1)))
          {
            break _breakLabel[339449] _breakLabel[339449]
          }(339442 call = newLoc[339403](339441 call actualInsertPts[339348] newIndIdx[339390]))
        } label _continueLabel[339448](339461 'move' tmp[339445](339454 call _cond_test(339456 call == newLoc[339403](339459 call - 1)))) tmp[339445]
      } label _breakLabel[339449]
    } unknown arrShiftMap[339489](339487 call chpl__buildArrayRuntimeType(339485 call chpl__ensureDomainExpr(339481 call chpl__buildDomainExpr(339478 call chpl_build_bounded_range 1 oldnnz[339373]))) int(64)[13])(339492 'end of statement')
    { unknown _indexOfInterest[339708] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339709] "expr temp" "temp"(339718 'move' _iterator[339709](339716 call _getIterator(339729 call chpl_direct_range_iter 1(412748 call . this[340989] c"_nnz")(339725 call - 1))))
      Defer
      {
        {(339745 call _freeIterator _iterator[339709])
        }
      }
      { scopeless type(339734 'move' _indexOfInterest[339708](339731 call iteratorIndex _iterator[339709]))
      }
      ForLoop[339710]
      { unknown i[339738] "index var" "insert auto destroy"(339740 'move' i[339738] _indexOfInterest[339708])
        {
          if(339702 call _cond_test(339511 call &&(339505 call >= oldIndIdx[339395] 1)(339509 call > i[339738] newLoc[339403])))
          {(339521 call =(339516 call(412700 call . this[340989] c"idx") i[339738])(339520 call(412706 call . this[340989] c"idx") oldIndIdx[339395]))(339530 call =(339528 call arrShiftMap[339489] oldIndIdx[339395]) i[339738])(339535 call -= oldIndIdx[339395] 1)
          }
          {
            if(339697 call _cond_test(339549 call &&(339543 call >= newIndIdx[339390](339540 call . indsDom[338813] c"low"))(339547 call == i[339738] newLoc[339403])))
            {
              if(339585 call _cond_test(339552 call . this[340989] c"compressRows"))
              {(339566 call =(339558 call(412719 call . this[340989] c"idx") i[339738])(339565 call(339562 call inds[338822] newIndIdx[339390]) 1))
              }
              {(339581 call =(339573 call(412727 call . this[340989] c"idx") i[339738])(339580 call(339577 call inds[338822] newIndIdx[339390]) 0))
              }(339592 call -= newIndIdx[339390] 1)
              if(339617 call _cond_test(339600 call >= newIndIdx[339390](339597 call . indsDom[338813] c"low")))
              {(339607 call = newLoc[339403](339606 call actualInsertPts[339348] newIndIdx[339390]))
              }
              {(339614 call = newLoc[339403](339612 call - 2))
              }
              { unknown tmp[339661] "temp"(339689 'move' tmp[339661](339682 call _cond_test(339684 call == newLoc[339403](339687 call - 1))))
                WhileDo[339666]
                {
                  {(339631 call -= newIndIdx[339390] 1)
                    if(339648 call _cond_test(339643 call == newIndIdx[339390](339641 call -(339637 call . indsDom[338813] c"low") 1)))
                    {
                      break _breakLabel[339665] _breakLabel[339665]
                    }(339658 call = newLoc[339403](339657 call actualInsertPts[339348] newIndIdx[339390]))
                  } label _continueLabel[339664](339677 'move' tmp[339661](339670 call _cond_test(339672 call == newLoc[339403](339675 call - 1)))) tmp[339661]
                } label _breakLabel[339665]
              }
            }
            {(339695 call halt "Something went wrong")
            }
          }
        } label _continueLabel[339713] _indexOfInterest[339708] _iterator[339709]
      } label _breakLabel[339714]
    } unknown prevCursor[339779](339776 IfExpr (339753 call . this[340989] c"compressRows") then
    { scopeless(339763 call .(339762 call(339757 call .(366383 call . this[340989] c"parentDom") c"dim") 0) c"low")
    } else
    { scopeless(339773 call .(339772 call(339767 call .(366388 call . this[340989] c"parentDom") c"dim") 1) c"low")
    } )(339782 'end of statement') unknown cursor[339784] int(64)[13](339787 'end of statement') unknown cursorCnt[339789] 0(339792 'end of statement')
    { unknown _indexOfInterest[339949] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339950] "expr temp" "temp"(339964 'move' _iterator[339950](339801 call _build_tuple(339959 call _getIterator inds[338822])(339962 call _getIterator actualInsertPts[339348])))
      Defer
      {
        {(339994 call _freeIterator _iterator[339950])
        }
      }
      { scopeless type(339969 'move' _indexOfInterest[339949](339966 call iteratorIndex _iterator[339950]))
      }
      ForLoop[339951]
      {(339974 call _check_tuple_var_decl _indexOfInterest[339949] 2) unknown ind[339980] "index var" "insert auto destroy"(339982 'move' ind[339980](339978 call _indexOfInterest[339949] 0)) unknown p[339987] "index var" "insert auto destroy"(339989 'move' p[339987](339985 call _indexOfInterest[339949] 1))
        {
          if(339811 call _cond_test(339806 call == p[339987](339804 call - 1)))
          {
            continue _continueLabel[339954] _continueLabel[339954]
          }
          if(339839 call _cond_test(339818 call . this[340989] c"compressRows"))
          {(339826 call = cursor[339784](339825 call ind[339980] 0))
          }
          {(339835 call = cursor[339784](339834 call ind[339980] 1))
          }
          if(339944 call _cond_test(339845 call == cursor[339784] prevCursor[339779]))
          {(339849 call += cursorCnt[339789] 1)
          }
          {(339860 call +=(339858 call(412761 call . this[340989] c"startIdx")(339855 call + prevCursor[339779] 1)) cursorCnt[339789])
            if(339930 call _cond_test(339869 call >(339866 call - cursor[339784] prevCursor[339779]) 1))
            {
              { unknown _indexOfInterest[339888] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339889] "expr temp" "temp"(339898 'move' _iterator[339889](339896 call _getIterator(339906 call chpl_direct_range_iter(339902 call + prevCursor[339779] 2) cursor[339784] 1)))
                Defer
                {
                  {(339922 call _freeIterator _iterator[339889])
                  }
                }
                { scopeless type(339911 'move' _indexOfInterest[339888](339908 call iteratorIndex _iterator[339889]))
                }
                ForLoop[339890]
                { unknown i[339915] "index var" "insert auto destroy"(339917 'move' i[339915] _indexOfInterest[339888])
                  {(339884 call +=(339882 call(412770 call . this[340989] c"startIdx") i[339915]) cursorCnt[339789])
                  } label _continueLabel[339893] _indexOfInterest[339888] _iterator[339889]
                } label _breakLabel[339894]
              }
            }(339936 call += cursorCnt[339789] 1)(339941 call = prevCursor[339779] cursor[339784])
          }
        } label _continueLabel[339954] _indexOfInterest[339949] _iterator[339950]
      } label _breakLabel[339955]
    }
    { unknown _indexOfInterest[340021] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340022] "expr temp" "temp"(340031 'move' _iterator[340022](340029 call _getIterator(340042 call chpl_direct_range_iter(340035 call + prevCursor[339779] 1)(340039 call .(366394 call . this[340989] c"startIdxDom") c"high") 1)))
      Defer
      {
        {(340058 call _freeIterator _iterator[340022])
        }
      }
      { scopeless type(340047 'move' _indexOfInterest[340021](340044 call iteratorIndex _iterator[340022]))
      }
      ForLoop[340023]
      { unknown i[340051] "index var" "insert auto destroy"(340053 'move' i[340051] _indexOfInterest[340021])
        {(340017 call +=(340015 call(412784 call . this[340989] c"startIdx") i[340051]) cursorCnt[339789])
        } label _continueLabel[340026] _indexOfInterest[340021] _iterator[340022]
      } label _breakLabel[340027]
    }
    { unknown _indexOfInterest[340076] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340077] "expr temp" "temp"(340086 'move' _iterator[340077](340084 call _getIterator(412792 call . this[340989] c"_arrs")))
      Defer
      {
        {(340102 call _freeIterator _iterator[340077])
        }
      }
      { scopeless type(340091 'move' _indexOfInterest[340076](340088 call iteratorIndex _iterator[340077]))
      }
      ForLoop[340078]
      { unknown a[340095] "index var" "insert auto destroy"(340097 'move' a[340095] _indexOfInterest[340076])(340074 call(340068 call . a[340095] c"sparseBulkShiftArray") arrShiftMap[339489] oldnnz[339373]) label _continueLabel[340081] _indexOfInterest[340076] _iterator[340077]
      } label _breakLabel[340082]
    }(340110 return actualAddCnt[339350])(355641 'used modules list'(338840 'import' Sort[267885]))
  } function CSDom[340915](?).dsiRemove[340123](arg _mt[340995]:_MT[238], arg this[340993]:CSDom[340915](?), arg ind[340120] :(340118 call *(412800 call . this[340993] c"rank")(412805 call . this[340993] c"idxType"))) : _unknown[51] "method" "primary method"
  { const tmp[340134] "const" "temp"(340133 call(412809 call . this[340993] c"find") ind[340120])(340141 call _check_tuple_var_decl tmp[340134] 2) const found[340125] "const"(340135 call tmp[340134] 0) const insertPt[340127] "const"(340138 call tmp[340134] 1)(340146 'end of statement')
    if(340154 call _cond_test(340149 call ! found[340125]))
    {(340152 return 0)
    }(340161 call -=(412816 call . this[340993] c"_nnz") 1)(340167 call(412822 call . this[340993] c"_shrink")(412827 call . this[340993] c"_nnz")) const tmp[340175] "const" "temp" ind[340120](340182 call _check_tuple_var_decl tmp[340175] 2) const row[340169] "const"(340176 call tmp[340175] 0) const col[340171] "const"(340179 call tmp[340175] 1)(340187 'end of statement')
    { unknown _indexOfInterest[340208] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340209] "expr temp" "temp"(340218 'move' _iterator[340209](340216 call _getIterator(340223 call chpl_direct_range_iter insertPt[340127](412846 call . this[340993] c"_nnz") 1)))
      Defer
      {
        {(340239 call _freeIterator _iterator[340209])
        }
      }
      { scopeless type(340228 'move' _indexOfInterest[340208](340225 call iteratorIndex _iterator[340209]))
      }
      ForLoop[340210]
      { unknown i[340232] "index var" "insert auto destroy"(340234 'move' i[340232] _indexOfInterest[340208])
        {(340204 call =(340196 call(412833 call . this[340993] c"idx") i[340232])(340203 call(412839 call . this[340993] c"idx")(340200 call + i[340232] 1)))
        } label _continueLabel[340213] _indexOfInterest[340208] _iterator[340209]
      } label _breakLabel[340214]
    }
    if(340380 call _cond_test(340247 call . this[340993] c"compressRows"))
    {
      { unknown _indexOfInterest[340270] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340271] "expr temp" "temp"(340280 'move' _iterator[340271](340278 call _getIterator(340291 call chpl_direct_range_iter(340284 call + row[340169] 1)(340288 call .(366401 call . this[340993] c"startIdxDom") c"high") 1)))
        Defer
        {
          {(340307 call _freeIterator _iterator[340271])
          }
        }
        { scopeless type(340296 'move' _indexOfInterest[340270](340293 call iteratorIndex _iterator[340271]))
        }
        ForLoop[340272]
        { unknown r[340300] "index var" "insert auto destroy"(340302 'move' r[340300] _indexOfInterest[340270])
          {(340266 call -=(340264 call(412851 call . this[340993] c"startIdx") r[340300]) 1)
          } label _continueLabel[340275] _indexOfInterest[340270] _iterator[340271]
        } label _breakLabel[340276]
      }
    }
    {
      { unknown _indexOfInterest[340335] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340336] "expr temp" "temp"(340345 'move' _iterator[340336](340343 call _getIterator(340356 call chpl_direct_range_iter(340349 call + col[340171] 1)(340353 call .(366406 call . this[340993] c"startIdxDom") c"high") 1)))
        Defer
        {
          {(340372 call _freeIterator _iterator[340336])
          }
        }
        { scopeless type(340361 'move' _indexOfInterest[340335](340358 call iteratorIndex _iterator[340336]))
        }
        ForLoop[340337]
        { unknown r[340365] "index var" "insert auto destroy"(340367 'move' r[340365] _indexOfInterest[340335])
          {(340331 call -=(340329 call(412858 call . this[340993] c"startIdx") r[340365]) 1)
          } label _continueLabel[340340] _indexOfInterest[340335] _iterator[340336]
        } label _breakLabel[340341]
      }
    }
    { unknown _indexOfInterest[340401] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340402] "expr temp" "temp"(340411 'move' _iterator[340402](340409 call _getIterator(412865 call . this[340993] c"_arrs")))
      Defer
      {
        {(340427 call _freeIterator _iterator[340402])
        }
      }
      { scopeless type(340416 'move' _indexOfInterest[340401](340413 call iteratorIndex _iterator[340402]))
      }
      ForLoop[340403]
      { unknown a[340420] "index var" "insert auto destroy"(340422 'move' a[340420] _indexOfInterest[340401])
        {(340398 call(340387 call . a[340420] c"sparseShiftArrayBack")(340395 call chpl_build_bounded_range insertPt[340127](340393 call -(412871 call . this[340993] c"_nnz") 1)))
        } label _continueLabel[340406] _indexOfInterest[340401] _iterator[340402]
      } label _breakLabel[340407]
    }(340435 return 1)
  } function CSDom[340915](?).dsiClear[340441](arg _mt[340999]:_MT[238], arg this[340997]:CSDom[340915](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {(340445 call =(412876 call . this[340997] c"_nnz") 0)(340451 call =(412881 call . this[340997] c"startIdx") 1)
  } function CSDom[340915](?).dimIter[340460](arg _mt[341003]:_MT[238], arg this[341001]:CSDom[340915](?), param arg d[340458]:_any[178](?), arg ind[340462]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(340534 call _cond_test(340472 call &&(340466 call != d[340458] 1)(340469 call . this[341001] c"compressRows")))
    {(340493 call compilerError "dimIter(0, ..) not supported on CS(compressRows=true) domains")
    }
    {
      if(340530 call _cond_test(340506 call &&(340498 call != d[340458] 0)(340504 call !(340501 call . this[341001] c"compressRows"))))
      {(340527 call compilerError "dimIter(1, ..) not supported on CS(compressRows=false) domains")
      }
    }
    { unknown _indexOfInterest[340557] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340558] "expr temp" "temp"(340567 'move' _iterator[340558](340565 call _getIterator(340576 call chpl_direct_range_iter(340571 call(412894 call . this[341001] c"startIdx") ind[340462])(340574 call(412899 call . this[341001] c"stopIdx") ind[340462]) 1)))
      Defer
      {
        {(340592 call _freeIterator _iterator[340558])
        }
      }
      { scopeless type(340581 'move' _indexOfInterest[340557](340578 call iteratorIndex _iterator[340558]))
      }
      ForLoop[340559]
      { unknown i[340585] "index var" "insert auto destroy"(340587 'move' i[340585] _indexOfInterest[340557])(340555 yield(340554 call(412888 call . this[341001] c"idx") i[340585])) label _continueLabel[340562] _indexOfInterest[340557] _iterator[340558]
      } label _breakLabel[340563]
    }
  } function CSDom[340915](?).dsiSerialWrite[340605](arg _mt[341007]:_MT[238], arg this[341005]:CSDom[340915](?), arg f[340603]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(340609 call <~> f[340603] "{\n")
    if(340903 call _cond_test(340614 call . this[341005] c"compressRows"))
    {
      { unknown _indexOfInterest[340726] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340727] "expr temp" "temp"(340736 'move' _iterator[340727](340734 call _getIterator(412906 call . this[341005] c"rowRange")))
        Defer
        {
          {(340752 call _freeIterator _iterator[340727])
          }
        }
        { scopeless type(340741 'move' _indexOfInterest[340726](340738 call iteratorIndex _iterator[340727]))
        }
        ForLoop[340728]
        { unknown r[340745] "index var" "insert auto destroy"(340747 'move' r[340745] _indexOfInterest[340726])
          { const lo[340623] "const"(340622 call(412911 call . this[341005] c"startIdx") r[340745]) const hi[340630] "const"(340629 call(412916 call . this[341005] c"stopIdx") r[340745])(340633 'end of statement')
            { unknown _indexOfInterest[340688] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340689] "expr temp" "temp"(340698 'move' _iterator[340689](340696 call _getIterator(340703 call chpl_direct_range_iter lo[340623] hi[340630] 1)))
              Defer
              {
                {(340719 call _freeIterator _iterator[340689])
                }
              }
              { scopeless type(340708 'move' _indexOfInterest[340688](340705 call iteratorIndex _iterator[340689]))
              }
              ForLoop[340690]
              { unknown c[340712] "index var" "insert auto destroy"(340714 'move' c[340712] _indexOfInterest[340688])
                {(340684 call <~>(340657 call <~>(340654 call <~>(340648 call <~>(340645 call <~>(340642 call <~> f[340603] " (") r[340745]) ", ")(340653 call(412924 call . this[341005] c"idx") c[340712])) ")")(340681 IfExpr (340661 call == c[340712] hi[340630]) then
                  { scopeless "\n"
                  } else
                  { scopeless ""
                  } ))
                } label _continueLabel[340693] _indexOfInterest[340688] _iterator[340689]
              } label _breakLabel[340694]
            }
          } label _continueLabel[340731] _indexOfInterest[340726] _iterator[340727]
        } label _breakLabel[340732]
      }
    }
    {
      { unknown _indexOfInterest[340869] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340870] "expr temp" "temp"(340879 'move' _iterator[340870](340877 call _getIterator(412934 call . this[341005] c"colRange")))
        Defer
        {
          {(340895 call _freeIterator _iterator[340870])
          }
        }
        { scopeless type(340884 'move' _indexOfInterest[340869](340881 call iteratorIndex _iterator[340870]))
        }
        ForLoop[340871]
        { unknown c[340888] "index var" "insert auto destroy"(340890 'move' c[340888] _indexOfInterest[340869])
          { const lo[340766] "const"(340765 call(412939 call . this[341005] c"startIdx") c[340888]) const hi[340773] "const"(340772 call(412944 call . this[341005] c"stopIdx") c[340888])(340776 'end of statement')
            { unknown _indexOfInterest[340831] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340832] "expr temp" "temp"(340841 'move' _iterator[340832](340839 call _getIterator(340846 call chpl_direct_range_iter lo[340766] hi[340773] 1)))
              Defer
              {
                {(340862 call _freeIterator _iterator[340832])
                }
              }
              { scopeless type(340851 'move' _indexOfInterest[340831](340848 call iteratorIndex _iterator[340832]))
              }
              ForLoop[340833]
              { unknown r[340855] "index var" "insert auto destroy"(340857 'move' r[340855] _indexOfInterest[340831])
                {(340827 call <~>(340800 call <~>(340797 call <~>(340794 call <~>(340791 call <~>(340785 call <~> f[340603] " (")(340790 call(412951 call . this[341005] c"idx") r[340855])) ", ") c[340888]) ")")(340824 IfExpr (340804 call == r[340855] hi[340773]) then
                  { scopeless "\n"
                  } else
                  { scopeless ""
                  } ))
                } label _continueLabel[340836] _indexOfInterest[340831] _iterator[340832]
              } label _breakLabel[340837]
            }
          } label _continueLabel[340874] _indexOfInterest[340869] _iterator[340870]
        } label _breakLabel[340875]
      }
    }(340909 call <~> f[340603] "}\n")
  } type CSDom[340915](?) val super[355853]:BaseSparseDomImpl[147965](?) "super class" unknown compressRows[336279] "param" unknown sortedIndices[336283] "param" unknown stridable[336287] "param" unknown dist[336297](336295 call unmanaged CS[415616](?) compressRows[336279] sortedIndices[336283]) unknown rowRange[336307](336306 call range[64316](?) idxType[148219](stridable = stridable[336287])) unknown colRange[336317](336316 call range[64316](?) idxType[148219](stridable = stridable[336287])) unknown startIdxDom[336327](336325 call chpl__buildDomainRuntimeType defaultDist[94058] 1 idxType[148219]) unknown _nnz[336332] 0 unknown startIdx[336343] "local field"(336341 call chpl__buildArrayRuntimeType(336339 call chpl__ensureDomainExpr startIdxDom[336327]) idxType[148219]) unknown idx[336354] "local field"(336352 call chpl__buildArrayRuntimeType(336350 call chpl__ensureDomainExpr nnzDom[146926]) idxType[148219]) type CSDom[411959](?) function CSArr[341843](?).init[341017](arg _mt[341847]:_MT[238], arg this[341845]:CSArr[341843](?), arg eltType[341015]:_any[178](?), param arg rank[341020] : int(64)[13], arg idxType[341023]:_any[178](?), arg dom[341025]:_any[178](?), param arg initElts[341028] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(341041 call(341032 call .(366415 call . this[341845] c"super") c"init") eltType[341015] rank[341020] idxType[341023] dom[341025] initElts[341028])
  } function CSArr[341843](?).dsiAccess[341055](arg _mt[341851]:_MT[238], arg this[341849]:CSArr[341843](?), arg ind[341052] :(341050 call *(412968 call . this[341849] c"rank")(412973 call . this[341849] c"idxType"))) ref : _unknown[51] "method" "primary method"
  {(341063 call(341058 call .(366420 call . this[341849] c"dom") c"boundsCheck") ind[341052]) const tmp[341078] "const" "temp"(341077 call(341072 call .(366425 call . this[341849] c"dom") c"find") ind[341052])(341085 call _check_tuple_var_decl tmp[341078] 2) const found[341066] "const"(341079 call tmp[341078] 0) const loc[341068] "const"(341082 call tmp[341078] 1)(341090 'end of statement')
    if(341104 call _cond_test found[341066])
    {(341096 return(341095 call(412981 call . this[341849] c"data") loc[341068]))
    }
    {(341102 call halt "attempting to assign a 'zero' value in a sparse array: " ind[341052])
    }
  } function CSArr[341843](?).dsiAccess[341121](arg _mt[341855]:_MT[238], arg this[341853]:CSArr[341843](?), arg ind[341118] :(341116 call *(412988 call . this[341853] c"rank")(412993 call . this[341853] c"idxType"))) : _unknown[51] "method" "primary method"
  {(341133 call(341128 call .(366430 call . this[341853] c"dom") c"boundsCheck") ind[341118]) const tmp[341148] "const" "temp"(341147 call(341142 call .(366435 call . this[341853] c"dom") c"find") ind[341118])(341155 call _check_tuple_var_decl tmp[341148] 2) const found[341136] "const"(341149 call tmp[341148] 0) const loc[341138] "const"(341152 call tmp[341148] 1)(341160 'end of statement')
    if(341171 call _cond_test found[341136])
    {(341166 return(341165 call(413006 call . this[341853] c"data") loc[341138]))
    }
    {(341169 return(413012 call . this[341853] c"irv"))
    }
  }
  {(341126 call shouldReturnRvalueByValue(412998 call . this[341853] c"eltType"))
  } function CSArr[341843](?).dsiAccess[341189](arg _mt[341859]:_MT[238], arg this[341857]:CSArr[341843](?), arg ind[341186] :(341184 call *(413017 call . this[341857] c"rank")(413022 call . this[341857] c"idxType"))) const ref : _unknown[51] "method" "primary method"
  {(341201 call(341196 call .(366440 call . this[341857] c"dom") c"boundsCheck") ind[341186]) const tmp[341216] "const" "temp"(341215 call(341210 call .(366445 call . this[341857] c"dom") c"find") ind[341186])(341223 call _check_tuple_var_decl tmp[341216] 2) const found[341204] "const"(341217 call tmp[341216] 0) const loc[341206] "const"(341220 call tmp[341216] 1)(341228 'end of statement')
    if(341239 call _cond_test found[341204])
    {(341234 return(341233 call(413035 call . this[341857] c"data") loc[341206]))
    }
    {(341237 return(413041 call . this[341857] c"irv"))
    }
  }
  {(341194 call shouldReturnRvalueByConstRef(413027 call . this[341857] c"eltType"))
  } function CSArr[341843](?).these[341250](arg _mt[341863]:_MT[238], arg this[341861]:CSArr[341843](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[341266] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341267] "expr temp" "temp"(341276 'move' _iterator[341267](341274 call _getIterator(341284 call chpl_direct_range_iter 1(341281 call .(366450 call . this[341861] c"dom") c"_nnz") 1)))
      Defer
      {
        {(341300 call _freeIterator _iterator[341267])
        }
      }
      { scopeless type(341289 'move' _indexOfInterest[341266](341286 call iteratorIndex _iterator[341267]))
      }
      ForLoop[341268]
      { unknown i[341293] "index var" "insert auto destroy"(341295 'move' i[341293] _indexOfInterest[341266])(341264 yield(341263 call(413046 call . this[341861] c"data") i[341293])) label _continueLabel[341271] _indexOfInterest[341266] _iterator[341267]
      } label _breakLabel[341272]
    }
  } function CSArr[341843](?).these[341316](arg _mt[341867]:_MT[238], arg this[341865]:CSArr[341843](?), param arg tag[341313] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[341336] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341337] "expr temp" "temp"(341346 'move' _iterator[341337](341344 call _getIterator(341332 call(341327 call .(366456 call . this[341865] c"dom") c"these") tag[341313])))
      Defer
      {
        {(341363 call _freeIterator _iterator[341337])
        }
      }
      { scopeless type(341352 'move' _indexOfInterest[341336](341349 call iteratorIndex _iterator[341337]))
      }
      ForLoop[341338]
      { unknown followThis[341356] "index var" "insert auto destroy"(341358 'move' followThis[341356] _indexOfInterest[341336])(341334 yield followThis[341356]) label _continueLabel[341341] _indexOfInterest[341336] _iterator[341337]
      } label _breakLabel[341342]
    }
  }
  {(341323 call == tag[341313] leader[447])
  } function CSArr[341843](?).these[341380](arg _mt[341871]:_MT[238], arg this[341869]:CSArr[341843](?), param arg tag[341377] : iterKind[453], arg followThis[341388] :(341386 call _build_tuple ?[260] ?[260] ?[260])) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[341406] "temp" followThis[341388](341416 call _check_tuple_var_decl tmp[341406] 3) unknown followThisDom[341398](341407 call tmp[341406] 0) unknown startIx[341400](341410 call tmp[341406] 1) unknown endIx[341402](341413 call tmp[341406] 2)(341421 'end of statement')
    if(341451 call _cond_test(341428 call != followThisDom[341398](341425 call . this[341869] c"dom")))
    {(341449 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays (CS layout)")
    }
    if(341481 call _cond_test debugCS[336052])
    {(341479 call writeln "CSArr follower: " startIx[341400] ".." endIx[341402])
    }
    { unknown _indexOfInterest[341497] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341498] "expr temp" "temp"(341507 'move' _iterator[341498](341505 call _getIterator(341512 call chpl_direct_range_iter startIx[341400] endIx[341402] 1)))
      Defer
      {
        {(341528 call _freeIterator _iterator[341498])
        }
      }
      { scopeless type(341517 'move' _indexOfInterest[341497](341514 call iteratorIndex _iterator[341498]))
      }
      ForLoop[341499]
      { unknown i[341521] "index var" "insert auto destroy"(341523 'move' i[341521] _indexOfInterest[341497])(341495 yield(341494 call(413063 call . this[341869] c"data") i[341521])) label _continueLabel[341502] _indexOfInterest[341497] _iterator[341498]
      } label _breakLabel[341503]
    }
  }
  {(341396 call == tag[341377] follower[449])
  } function CSArr[341843](?).these[341544](arg _mt[341875]:_MT[238], arg this[341873]:CSArr[341843](?), param arg tag[341541] : iterKind[453], arg followThis[341546]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {(341558 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")(341562 yield 0)
  }
  {(341553 call == tag[341541] follower[449])
  } function CSArr[341843](?).dsiSerialWrite[341571](arg _mt[341879]:_MT[238], arg this[341877]:CSArr[341843](?), arg f[341569]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(341835 call _cond_test(341574 call .(366464 call . this[341877] c"dom") c"compressRows"))
    {
      { unknown _indexOfInterest[341672] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341673] "expr temp" "temp"(341682 'move' _iterator[341673](341680 call _getIterator(341581 call .(366469 call . this[341877] c"dom") c"rowRange")))
        Defer
        {
          {(341699 call _freeIterator _iterator[341673])
          }
        }
        { scopeless type(341688 'move' _indexOfInterest[341672](341685 call iteratorIndex _iterator[341673]))
        }
        ForLoop[341674]
        { unknown r[341692] "index var" "insert auto destroy"(341694 'move' r[341692] _indexOfInterest[341672])
          { const lo[341591] "const"(341590 call(341585 call .(366474 call . this[341877] c"dom") c"startIdx") r[341692])(341594 'end of statement') const hi[341605] "const"(341604 call(341599 call .(366479 call . this[341877] c"dom") c"stopIdx") r[341692])(341608 'end of statement')
            { unknown _indexOfInterest[341634] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341635] "expr temp" "temp"(341644 'move' _iterator[341635](341642 call _getIterator(341649 call chpl_direct_range_iter lo[341591] hi[341605] 1)))
              Defer
              {
                {(341665 call _freeIterator _iterator[341635])
                }
              }
              { scopeless type(341654 'move' _indexOfInterest[341634](341651 call iteratorIndex _iterator[341635]))
              }
              ForLoop[341636]
              { unknown c[341658] "index var" "insert auto destroy"(341660 'move' c[341658] _indexOfInterest[341634])
                {(341630 call <~>(341619 call <~> f[341569](341618 call(413076 call . this[341877] c"data") c[341658]))(341627 IfExpr (341623 call == c[341658] hi[341605]) then
                  { scopeless "\n"
                  } else
                  { scopeless " "
                  } ))
                } label _continueLabel[341639] _indexOfInterest[341634] _iterator[341635]
              } label _breakLabel[341640]
            }
          } label _continueLabel[341677] _indexOfInterest[341672] _iterator[341673]
        } label _breakLabel[341678]
      }
    }
    {
      { unknown _indexOfInterest[341800] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341801] "expr temp" "temp"(341810 'move' _iterator[341801](341808 call _getIterator(341711 call .(366484 call . this[341877] c"dom") c"colRange")))
        Defer
        {
          {(341827 call _freeIterator _iterator[341801])
          }
        }
        { scopeless type(341816 'move' _indexOfInterest[341800](341813 call iteratorIndex _iterator[341801]))
        }
        ForLoop[341802]
        { unknown c[341820] "index var" "insert auto destroy"(341822 'move' c[341820] _indexOfInterest[341800])
          { const lo[341721] "const"(341720 call(341715 call .(366489 call . this[341877] c"dom") c"startIdx") c[341820])(341724 'end of statement') const hi[341733] "const"(341732 call(341727 call .(366494 call . this[341877] c"dom") c"stopIdx") c[341820])(341736 'end of statement')
            { unknown _indexOfInterest[341762] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341763] "expr temp" "temp"(341772 'move' _iterator[341763](341770 call _getIterator(341777 call chpl_direct_range_iter lo[341721] hi[341733] 1)))
              Defer
              {
                {(341793 call _freeIterator _iterator[341763])
                }
              }
              { scopeless type(341782 'move' _indexOfInterest[341762](341779 call iteratorIndex _iterator[341763]))
              }
              ForLoop[341764]
              { unknown r[341786] "index var" "insert auto destroy"(341788 'move' r[341786] _indexOfInterest[341762])
                {(341758 call <~>(341747 call <~> f[341569](341746 call(413089 call . this[341877] c"data") r[341786]))(341755 IfExpr (341751 call == r[341786] hi[341733]) then
                  { scopeless "\n"
                  } else
                  { scopeless " "
                  } ))
                } label _continueLabel[341767] _indexOfInterest[341762] _iterator[341763]
              } label _breakLabel[341768]
            }
          } label _continueLabel[341805] _indexOfInterest[341800] _iterator[341801]
        } label _breakLabel[341806]
      }
    }
  } type CSArr[341843](?) val super[355855]:BaseSparseArrImpl[150531](?) "super class" type CSArr[412043](?)(355634 'used modules list'(353135 'use' ChapelStandard[20264])(336049 'import' RangeChunk[266375]))
}