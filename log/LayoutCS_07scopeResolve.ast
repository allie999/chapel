AST dump for LayoutCS after pass scopeResolve.
Module use list: ChapelStandard RangeChunk DSIUtil Search Sort 

{ unknown debugCS[336160] "config" "no doc" "param" 0(336163 'end of statement') unknown LayoutCSDefaultToSorted[336165] "config" "param" 1(336168 'end of statement') function _ColumnComparator[336195].key[336176](arg _mt[336199]:_MT[238], arg this[336197]:_ColumnComparator[336195], arg idx[336173] : _tuple[56202](?)) : _unknown[51] "method" "primary method"
  {(336189 return(336187 call _build_tuple(336181 call idx[336173] 1)(336185 call idx[336173] 0)))
  } type _ColumnComparator[336195] const _columnComparator[336203] "const" "no doc" _ColumnComparator[336195](336206 'end of statement') function isCSType[336211](arg t[336209]:_any[178](?)) param : _unknown[51] "no doc"
  {(336221 return(355044 'is_subtype' CS[412011](?)(336217 call _to_borrowed t[336209])))
  } function CS[336361](?).dsiNewSparseDom[336247](arg _mt[336365]:_MT[238], arg this[336363]:CS[336361](?), param arg rank[336244] : int(64)[13], arg idxType[336249]:_any[178](?), arg dom[336252] : _domain[125908](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(336284 return(336257 'new'(_chpl_manager = unmanaged[220](?))(336283 call CSDom[412017](?) rank[336244] idxType[336249](336265 call . this[336363] c"compressRows")(336271 call . this[336363] c"sortedIndices")(336275 call . dom[336252] c"stridable")(336281 call _to_unmanaged this[336363]) dom[336252])))
  } function CS[336361](?).dsiClone[336291](arg _mt[336369]:_MT[238], arg this[336367]:CS[336361](?)) : _unknown[51] "method" "primary method"
  {(336309 return(336295 'new'(_chpl_manager = unmanaged[220](?))(336308 call CS[412011](?)(compressRows =(336298 call . this[336367] c"compressRows"))(sortedIndices =(336304 call . this[336367] c"sortedIndices")))))
  } function CS[336361](?).dsiEqualDMaps[336330](arg _mt[336373]:_MT[238], arg this[336371]:CS[336361](?), arg that[336327] :(336326 call CS[412011](?)(336318 call . this[336371] c"compressRows")(336323 call . this[336371] c"sortedIndices"))) param : _unknown[51] "method" "primary method"
  {(336333 return 1)
  } function CS[336361](?).dsiEqualDMaps[336342](arg _mt[336377]:_MT[238], arg this[336375]:CS[336361](?), arg that[336340]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {(336345 return 0)
  } function CS[336361](?).dsiIsLayout[336352](arg _mt[336381]:_MT[238], arg this[336379]:CS[336361](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {(336355 return 1)
  } type CS[336361](?) val super[355905]:BaseDist[145968] "super class" unknown compressRows[336231] "param" 1 bool[10] unknown sortedIndices[336237] "param" LayoutCSDefaultToSorted[336165] bool[10] type unmanaged CS[415674](?) type CS[412011](?) function CSDom[341023](?).init[336470](arg _mt[341027]:_MT[238], arg this[341025]:CSDom[341023](?), param arg rank[336468]:_any[178](?), arg idxType[336472]:_any[178](?), param arg compressRows[336474]:_any[178](?), param arg sortedIndices[336476]:_any[178](?), param arg stridable[336478]:_any[178](?), arg dist[336486] :(336484 call unmanaged CS[415674](?) compressRows[336474] sortedIndices[336476]), arg parentDom[336490] : _domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(336527 call _cond_test(336504 call ||(336495 call != rank[336468] 2)(336502 call !=(336498 call . parentDom[336490] c"rank") 2)))
    {(336525 call compilerError "Only 2D sparse domains are supported by the CS distribution")
    }
    if(336579 call _cond_test(336538 call !=(336534 call . parentDom[336490] c"idxType") idxType[336472]))
    {(336577 call compilerError(336574 call +(336565 call +(336562 call + "idxType mismatch in CSDom.init(): "(336560 call _cast string[26] idxType[336472])) " != ")(336572 call _cast string[26](336568 call . parentDom[336490] c"idxType"))))
    }(336592 call(336585 call .(366246 call . this[341025] c"super") c"init") rank[336468] idxType[336472] parentDom[336490])(336599 call =(336595 call . this[341025] c"compressRows") compressRows[336474])(336607 call =(336603 call . this[341025] c"sortedIndices") sortedIndices[336476])(336615 call =(336611 call . this[341025] c"stridable") stridable[336478])(336623 call =(336619 call . this[341025] c"dist") dist[336486])(336634 call =(412057 call . this[341025] c"rowRange")(336633 call(336628 call . parentDom[336490] c"dim") 0))(336645 call =(412062 call . this[341025] c"colRange")(336644 call(336639 call . parentDom[336490] c"dim") 1))(336685 call =(412067 call . this[341025] c"startIdxDom")(336682 IfExpr  compressRows[336474] then
    { scopeless(336664 call chpl__buildDomainExpr(336661 call chpl_build_bounded_range(336651 call .(366257 call . this[341025] c"rowRange") c"low")(336659 call +(336655 call .(366262 call . this[341025] c"rowRange") c"high") 1)))
    } else
    { scopeless(336680 call chpl__buildDomainExpr(336677 call chpl_build_bounded_range(336667 call .(366267 call . this[341025] c"colRange") c"low")(336675 call +(336671 call .(366272 call . this[341025] c"colRange") c"high") 1)))
    } ))(336693 call(336689 call . this[341025] c"complete"))(336703 call =(412073 call . this[341025] c"nnzDom")(336701 call chpl__buildDomainExpr(336698 call chpl_build_bounded_range 1(412078 call . this[341025] c"_nnz"))))(336708 call(412082 call . this[341025] c"dsiClear"))
  } function CSDom[341023](?).getNNZ[336714](arg _mt[341031]:_MT[238], arg this[341029]:CSDom[341023](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(336718 return(412087 call . this[341029] c"_nnz"))
  }
  { scopeless type int(64)[13]
  } function CSDom[341023](?).dsiMyDist[336726](arg _mt[341035]:_MT[238], arg this[341033]:CSDom[341023](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(336729 return(412092 call . this[341033] c"dist"))
  } function CSDom[341023](?).dsiAssignDomain[336740](arg _mt[341039]:_MT[238], arg this[341037]:CSDom[341023](?), arg rhs[336737] : _domain[125908](?), arg lhsPrivate[336743] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(336875 call _cond_test(336765 call &&(336756 call ==(336753 call _to_borrowed(336751 'typeof'(336748 call . rhs[336737] c"_instance")))(336755 'typeof' this[341037]))(336763 call ==(336759 call . this[341037] c"dsiNumIndices") 0)))
    {(336775 call =(336768 call . this[341037] c"_nnz")(336772 call . rhs[336737] c"_nnz"))(336787 call =(336780 call . this[341037] c"nnzDom")(336784 call . rhs[336737] c"nnzDom"))(336800 call =(336793 call . this[341037] c"startIdx")(336797 call . rhs[336737] c"startIdx"))(336811 call =(336804 call . this[341037] c"idx")(336808 call . rhs[336737] c"idx"))
    }
    {
      if(336871 call _cond_test(336823 call <(336821 call _to_borrowed(336819 'typeof'(336816 call . rhs[336737] c"_instance"))) DefaultSparseDom[378145](?)))
      {(336861 call(336826 call . this[341037] c"dsiBulkAdd")(336852 call(336833 call .(336830 call . rhs[336737] c"_instance") c"_indices")(336849 call #(336843 call chpl_build_low_bounded_range(336840 call .(336837 call . rhs[336737] c"nnzDom") c"low"))(336846 call . rhs[336737] c"_nnz")))(dataSorted =(336855 call . this[341037] c"compressRows"))(isUnique = 1))
      }
      {(336868 call chpl_assignDomainWithIndsIterSafeForRemoving this[341037] rhs[336737])
      }
    }
  } function CSDom[341023](?).dsiBuildArray[336887](arg _mt[341043]:_MT[238], arg this[341041]:CSDom[341023](?), arg eltType[336885]:_any[178](?), param arg initElts[336890] : bool[10]) : _unknown[51] "method" "primary method"
  {(336912 return(336895 'new'(_chpl_manager = unmanaged[220](?))(336911 call CSArr[412101](?)(eltType = eltType[336885])(rank =(412107 call . this[341041] c"rank"))(idxType =(412112 call . this[341041] c"idxType"))(dom =(336907 call _to_unmanaged this[341041]))(initElts = initElts[336890]))))
  } function CSDom[341023](?).dsiIndsIterSafeForRemoving[336919](arg _mt[341047]:_MT[238], arg this[341045]:CSDom[341023](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown cursor[336936](336933 IfExpr (336922 call . this[341045] c"compressRows") then
    { scopeless(336926 call .(366295 call . this[341045] c"rowRange") c"high")
    } else
    { scopeless(336930 call .(366300 call . this[341045] c"colRange") c"high")
    } )(336939 'end of statement')
    { unknown _indexOfInterest[337026] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337027] "expr temp" "temp"(337036 'move' _iterator[337027](337034 call _getIterator(337047 call chpl_direct_range_iter 1(412148 call . this[341045] c"_nnz")(337043 call - 1))))
      Defer
      {
        {(337063 call _freeIterator _iterator[337027])
        }
      }
      { scopeless type(337052 'move' _indexOfInterest[337026](337049 call iteratorIndex _iterator[337027]))
      }
      ForLoop[337028]
      { unknown i[337056] "index var" "insert auto destroy"(337058 'move' i[337056] _indexOfInterest[337026])
        {
          { unknown tmp[336964] "temp"(336992 'move' tmp[336964](336985 call _cond_test(336987 call >(336989 call(412127 call . this[341045] c"startIdx") cursor[336936]) i[337056])))
            WhileDo[336969]
            {
              {(336960 call -= cursor[336936] 1)
              } label _continueLabel[336967](336980 'move' tmp[336964](336973 call _cond_test(336975 call >(336977 call(412120 call . this[341045] c"startIdx") cursor[336936]) i[337056]))) tmp[336964]
            } label _breakLabel[336968]
          }
          if(337022 call _cond_test(336997 call . this[341045] c"compressRows"))
          {(337008 yield(337006 call _build_tuple cursor[336936](337004 call(412135 call . this[341045] c"idx") i[337056])))
          }
          {(337019 yield(337017 call _build_tuple(337014 call(412141 call . this[341045] c"idx") i[337056]) cursor[336936]))
          }
        } label _continueLabel[337031] _indexOfInterest[337026] _iterator[337027]
      } label _breakLabel[337032]
    }
  } function CSDom[341023](?).these[337074](arg _mt[341051]:_MT[238], arg this[341049]:CSDom[341023](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown cursor[337091](337088 IfExpr (337077 call . this[341049] c"compressRows") then
    { scopeless(337081 call .(366307 call . this[341049] c"rowRange") c"low")
    } else
    { scopeless(337085 call .(366312 call . this[341049] c"colRange") c"low")
    } )(337094 'end of statement')
    { unknown _indexOfInterest[337185] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337186] "expr temp" "temp"(337195 'move' _iterator[337186](337193 call _getIterator(337200 call chpl_direct_range_iter 1(412182 call . this[341049] c"_nnz") 1)))
      Defer
      {
        {(337216 call _freeIterator _iterator[337186])
        }
      }
      { scopeless type(337205 'move' _indexOfInterest[337185](337202 call iteratorIndex _iterator[337186]))
      }
      ForLoop[337187]
      { unknown i[337209] "index var" "insert auto destroy"(337211 'move' i[337209] _indexOfInterest[337185])
        {
          { unknown tmp[337117] "temp"(337151 'move' tmp[337117](337141 call _cond_test(337143 call <=(337145 call(412161 call . this[341049] c"startIdx")(337147 call + cursor[337091] 1)) i[337209])))
            WhileDo[337122]
            {
              {(337113 call += cursor[337091] 1)
              } label _continueLabel[337120](337136 'move' tmp[337117](337126 call _cond_test(337128 call <=(337130 call(412154 call . this[341049] c"startIdx")(337132 call + cursor[337091] 1)) i[337209]))) tmp[337117]
            } label _breakLabel[337121]
          }
          if(337179 call _cond_test(337156 call . this[341049] c"compressRows"))
          {(337167 yield(337165 call _build_tuple cursor[337091](337163 call(412169 call . this[341049] c"idx") i[337209])))
          }
          {(337177 yield(337175 call _build_tuple(337172 call(412175 call . this[341049] c"idx") i[337209]) cursor[337091]))
          }
        } label _continueLabel[337190] _indexOfInterest[337185] _iterator[337186]
      } label _breakLabel[337191]
    }
  } function CSDom[341023](?).these[337231](arg _mt[341055]:_MT[238], arg this[341053]:CSDom[341023](?), param arg tag[337228] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { const numElems[337245] "const"(412189 call . this[341053] c"_nnz")(337248 'end of statement') const numChunks[337253] "const"(337252 call _computeNumChunks numElems[337245])(337256 'end of statement')
    if(337283 call _cond_test debugCS[336160])
    {(337281 call writeln "CSDom leader: " numChunks[337253] " chunks, " numElems[337245] " elems")
    }
    if(337497 call _cond_test(337290 call == numChunks[337253] 1))
    {(337298 yield(337296 call _build_tuple this[341053] 1 numElems[337245]))
    }
    { unknown tmpIter[337326] "expr temp" "maybe ref" "no copy" "temp"(337329 'move' tmpIter[337326](337311 call chunks module=[255] RangeChunk[266546](337307 call chpl_build_bounded_range 1 numElems[337245]) numChunks[337253])) unknown isRngDomArr[337478] "maybe param" "temp"(337493 'move' isRngDomArr[337478](337491 call ||(337480 call isBoundedRange tmpIter[337326])(337489 call ||(337483 call isDomain tmpIter[337326])(337486 call isArray tmpIter[337326]))))
      if isRngDomArr[337478]
      { const _coforallCount[337345] "const" "end count" "temp"(337414 'move' _coforallCount[337345](337411 call _endCountAlloc 1)) unknown numTasks[337346] "temp"(337398 'move' numTasks[337346](337394 call . tmpIter[337326] c"size"))(337389 call _upEndCount _coforallCount[337345] 1 numTasks[337346])(337386 call chpl_resetTaskSpawn numTasks[337346]) unknown _indexOfInterest[337353] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337354] "expr temp" "temp"(337363 'move' _iterator[337354](337361 call _getIterator tmpIter[337326]))
        Defer
        {
          {(337379 call _freeIterator _iterator[337354])
          }
        }
        { scopeless type(337368 'move' _indexOfInterest[337353](337365 call iteratorIndex _iterator[337354]))
        }
        ForLoop[337355]
        { unknown chunk[337372] "coforall index var" "index var" "insert auto destroy"(337374 'move' chunk[337372] _indexOfInterest[337353])
          {(337332 yield(337334 call _build_tuple this[341053](337337 call . chunk[337372] c"first")(337341 call . chunk[337372] c"last")))(337348 call _downEndCount _coforallCount[337345] nil[44])(337347 'coforall loop')
          } label _continueLabel[337358] _indexOfInterest[337353] _iterator[337354]
        } label _breakLabel[337359]
        Defer
        {
          {(337401 call _endCountFree _coforallCount[337345])
          }
        }(337406 call _waitEndCount _coforallCount[337345] 1 numTasks[337346])
      }
      { const _coforallCount[337418] "const" "end count" "temp"(337475 'move' _coforallCount[337418](337472 call _endCountAlloc 1)) unknown _indexOfInterest[337426] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337427] "expr temp" "temp"(337436 'move' _iterator[337427](337434 call _getIterator tmpIter[337326]))
        Defer
        {
          {(337452 call _freeIterator _iterator[337427])
          }
        }
        { scopeless type(337441 'move' _indexOfInterest[337426](337438 call iteratorIndex _iterator[337427]))
        }
        ForLoop[337428]
        { unknown chunk[337445] "coforall index var" "index var" "insert auto destroy"(337447 'move' chunk[337445] _indexOfInterest[337426])(337459 call _upEndCount _coforallCount[337418] 1)
          {(337324 yield(337322 call _build_tuple this[341053](337314 call . chunk[337445] c"first")(337319 call . chunk[337445] c"last")))(337421 call _downEndCount _coforallCount[337418] nil[44])(337420 'coforall loop')
          } label _continueLabel[337431] _indexOfInterest[337426] _iterator[337427]
        } label _breakLabel[337432]
        Defer
        {
          {(337463 call _endCountFree _coforallCount[337418])
          }
        }(337468 call _waitEndCount _coforallCount[337418] 1)
      }(366318 'referenced modules list' RangeChunk[266546])
    }(355691 'used modules list'(337241 'use' DSIUtil[230976]))
  }
  {(337238 call == tag[337228] leader[447])
  } function CSDom[341023](?).these[337511](arg _mt[341059]:_MT[238], arg this[341057]:CSDom[341023](?), param arg tag[337508] : iterKind[453], arg followThis[337519] :(337517 call _build_tuple ?[260] ?[260] ?[260])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[337537] "temp" followThis[337519](337547 call _check_tuple_var_decl tmp[337537] 3) unknown followThisDom[337529](337538 call tmp[337537] 0) unknown startIx[337531](337541 call tmp[337537] 1) unknown endIx[337533](337544 call tmp[337537] 2)(337552 'end of statement')
    if(337580 call _cond_test 1)
    {(337578 call assert(337558 call <= startIx[337531] endIx[337533]) "CSDom follower - got nothing to iterate over")
    }
    if(337612 call _cond_test(337587 call != followThisDom[337529] this[341057]))
    {(337610 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays (CS layout)")
    } unknown cursor[337621](337620 call(412214 call . this[341057] c"_private_findStart") startIx[337531])(337624 'end of statement')
    if(337689 call _cond_test debugCS[336160])
    {(337687 call writeln "CSDom follower: " startIx[337531] ".." endIx[337533] "  startIdx(" cursor[337621] ")="(337686 call(412224 call . this[341057] c"startIdx") cursor[337621]))
    }
    { unknown _indexOfInterest[337782] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[337783] "expr temp" "temp"(337792 'move' _iterator[337783](337790 call _getIterator(337797 call chpl_direct_range_iter startIx[337531] endIx[337533] 1)))
      Defer
      {
        {(337813 call _freeIterator _iterator[337783])
        }
      }
      { scopeless type(337802 'move' _indexOfInterest[337782](337799 call iteratorIndex _iterator[337783]))
      }
      ForLoop[337784]
      { unknown i[337806] "index var" "insert auto destroy"(337808 'move' i[337806] _indexOfInterest[337782])
        {
          { unknown tmp[337714] "temp"(337748 'move' tmp[337714](337738 call _cond_test(337740 call <=(337742 call(412238 call . this[341057] c"startIdx")(337744 call + cursor[337621] 1)) i[337806])))
            WhileDo[337719]
            {(337711 call += cursor[337621] 1) label _continueLabel[337717](337733 'move' tmp[337714](337723 call _cond_test(337725 call <=(337727 call(412231 call . this[341057] c"startIdx")(337729 call + cursor[337621] 1)) i[337806]))) tmp[337714]
            } label _breakLabel[337718]
          }
          if(337776 call _cond_test(337753 call . this[341057] c"compressRows"))
          {(337764 yield(337762 call _build_tuple cursor[337621](337760 call(412246 call . this[341057] c"idx") i[337806])))
          }
          {(337774 yield(337772 call _build_tuple(337769 call(412252 call . this[341057] c"idx") i[337806]) cursor[337621]))
          }
        } label _continueLabel[337787] _indexOfInterest[337782] _iterator[337783]
      } label _breakLabel[337788]
    }
  }
  {(337527 call == tag[337508] follower[449])
  } function CSDom[341023](?).these[337829](arg _mt[341063]:_MT[238], arg this[341061]:CSDom[341023](?), param arg tag[337826] : iterKind[453], arg followThis[337831]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {(337859 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")(337863 yield 0)
  }
  {(337838 call == tag[337826] follower[449])
  } function CSDom[341023](?)._private_findStart[337872](arg _mt[341067]:_MT[238], arg this[341065]:CSDom[341023](?), arg startIx[337870]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(337886 return(337885 call(412262 call . this[341065] c"_private_findStart") startIx[337870](337878 call .(366334 call . this[341065] c"startIdxDom") c"low")(337882 call .(366339 call . this[341065] c"startIdxDom") c"high")))
  } function CSDom[341023](?)._private_findStart[337895](arg _mt[341071]:_MT[238], arg this[341069]:CSDom[341023](?), arg startIx[337893]:_any[178](?), arg low[337897]:_any[178](?), arg high[337899]:_any[178](?)) : _unknown[51] "method" "primary method"
  { unknown approx[337902] 2(337905 'end of statement') unknown l[337908] low[337897] unknown h[337912] high[337899](337915 'end of statement')
    { unknown tmp[337958] "temp"(337988 'move' tmp[337958](337980 call _cond_test(337982 call > h[337912](337985 call + l[337908] approx[337902]))))
      WhileDo[337963]
      {
        { unknown m[337930](337928 call /(337925 call + h[337912] l[337908]) 2)(337933 'end of statement')
          if(337952 call _cond_test(337940 call <=(337938 call(412272 call . this[341069] c"startIdx") m[337930]) startIx[337893]))
          {(337944 call = l[337908] m[337930])
          }
          {(337949 call = h[337912] m[337930])
          }
        } label _continueLabel[337961](337975 'move' tmp[337958](337967 call _cond_test(337969 call > h[337912](337972 call + l[337908] approx[337902])))) tmp[337958]
      } label _breakLabel[337962]
    } unknown hh[337999](337998 call min(337994 call + l[337908] approx[337902]) high[337899])(338002 'end of statement')
    if(338061 call _cond_test 1)
    {(338030 call assert(338010 call <=(338008 call(412293 call . this[341069] c"startIdx") l[337908]) startIx[337893]) "CSDom.findStart-1")(338059 call assert(338039 call < startIx[337893](338038 call(412301 call . this[341069] c"startIdx") hh[337999])) "CSDom.findStart-2")
    }(338066 return l[337908])
  } function CSDom[341023](?).stopIdx[338074](arg _mt[341075]:_MT[238], arg this[341073]:CSDom[341023](?), arg i[338072]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(338086 return(338084 call -(338082 call(412308 call . this[341073] c"startIdx")(338079 call + i[338072] 1)) 1))
  } function CSDom[341023](?).find[338100](arg _mt[341079]:_MT[238], arg this[341077]:CSDom[341023](?), arg ind[338097] :(338095 call *(412314 call . this[341077] c"rank")(412319 call . this[341077] c"idxType"))) : _unknown[51] "method" "primary method"
  { const tmp[338112] "const" "temp" ind[338097](338119 call _check_tuple_var_decl tmp[338112] 2) const row[338106] "const"(338113 call tmp[338112] 0) const col[338108] "const"(338116 call tmp[338112] 1)(338124 'end of statement') unknown ret[338130](338128 call _build_tuple bool[10](412325 call . this[341077] c"idxType"))(338133 'end of statement')
    if(338236 call _cond_test(338135 call . this[341077] c"compressRows"))
    {
      if(338181 call _cond_test(338139 call . this[341077] c"sortedIndices"))
      {(338158 call = ret[338130](338157 call binarySearch(412331 call . this[341077] c"idx") col[338108](lo =(338150 call(412337 call . this[341077] c"startIdx") row[338106]))(hi =(338155 call(412342 call . this[341077] c"stopIdx") row[338106]))))
      }
      {(338177 call = ret[338130](338176 call linearSearch(412349 call . this[341077] c"idx") col[338108](lo =(338169 call(412355 call . this[341077] c"startIdx") row[338106]))(hi =(338174 call(412360 call . this[341077] c"stopIdx") row[338106]))))
      }
    }
    {
      if(338230 call _cond_test(338188 call . this[341077] c"sortedIndices"))
      {(338207 call = ret[338130](338206 call binarySearch(412367 call . this[341077] c"idx") row[338106](lo =(338199 call(412373 call . this[341077] c"startIdx") col[338108]))(hi =(338204 call(412378 call . this[341077] c"stopIdx") col[338108]))))
      }
      {(338226 call = ret[338130](338225 call linearSearch(412385 call . this[341077] c"idx") row[338106](lo =(338218 call(412391 call . this[341077] c"startIdx") col[338108]))(hi =(338223 call(412396 call . this[341077] c"stopIdx") col[338108]))))
      }
    }(338241 return ret[338130])(355693 'used modules list'(338103 'use' Search[291329]))
  } function CSDom[341023](?).dsiMember[338254](arg _mt[341083]:_MT[238], arg this[341081]:CSDom[341023](?), arg ind[338251] :(338249 call *(412403 call . this[341081] c"rank")(412408 call . this[341081] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    if(338289 call _cond_test(338262 call(338257 call .(366347 call . this[341081] c"parentDom") c"contains") ind[338251]))
    { const tmp[338272] "const" "temp"(338271 call(412413 call . this[341081] c"find") ind[338251])(338279 call _check_tuple_var_decl tmp[338272] 2) const found[338263] "const"(338273 call tmp[338272] 0) const loc[338265] "const"(338276 call tmp[338272] 1)(338284 'end of statement')(338287 return found[338263])
    }(338295 return 0)
  } function CSDom[341023](?).dsiFirst[338301](arg _mt[341087]:_MT[238], arg this[341085]:CSDom[341023](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338320 call _cond_test(338305 call ==(412420 call . this[341085] c"_nnz") 0))
    {(338318 return(338316 call -(338308 call .(366352 call . this[341085] c"parentDom") c"low")(338314 call _build_tuple 1 1)))
    } const _low[338330] "const"(338327 call .(366357 call . this[341085] c"nnzDom") c"low")(338333 'end of statement')
    { unknown _indexOfInterest[338397] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338398] "expr temp" "temp"(338407 'move' _iterator[338398](338405 call _getIterator(412425 call . this[341085] c"startIdxDom")))
      Defer
      {
        {(338423 call _freeIterator _iterator[338398])
        }
      }
      { scopeless type(338412 'move' _indexOfInterest[338397](338409 call iteratorIndex _iterator[338398]))
      }
      ForLoop[338399]
      { unknown i[338416] "index var" "insert auto destroy"(338418 'move' i[338416] _indexOfInterest[338397])
        {
          if(338392 call _cond_test(338341 call >(338339 call(412430 call . this[341085] c"startIdx") i[338416]) _low[338330]))
          {
            if(338385 call _cond_test(338344 call . this[341085] c"compressRows"))
            {(338364 return(338362 call _build_tuple(338349 call - i[338416] 1)(338360 call(412438 call . this[341085] c"idx")(338356 call .(338353 call .(366363 call . this[341085] c"idx") c"_dom") c"low"))))
            }
            {(338383 return(338381 call _build_tuple(338375 call(412443 call . this[341085] c"idx")(338371 call .(338368 call .(366368 call . this[341085] c"idx") c"_dom") c"low"))(338378 call - i[338416] 1)))
            }
          }
        } label _continueLabel[338402] _indexOfInterest[338397] _iterator[338398]
      } label _breakLabel[338403]
    }(338449 call halt "Something went wrong in dsiFirst")(338456 return(338454 call _build_tuple 0 0))
  } function CSDom[341023](?).dsiLast[338462](arg _mt[341091]:_MT[238], arg this[341089]:CSDom[341023](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338481 call _cond_test(338466 call ==(412449 call . this[341089] c"_nnz") 0))
    {(338479 return(338477 call -(338469 call .(366373 call . this[341089] c"parentDom") c"low")(338475 call _build_tuple 1 1)))
    } unknown _last[338497](338495 call -(338493 call(338488 call .(366378 call . this[341089] c"parentDom") c"low") 1) 1)(338500 'end of statement')
    { unknown _indexOfInterest[338523] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338524] "expr temp" "temp"(338533 'move' _iterator[338524](338531 call _getIterator(412454 call . this[341089] c"startIdxDom")))
      Defer
      {
        {(338549 call _freeIterator _iterator[338524])
        }
      }
      { scopeless type(338538 'move' _indexOfInterest[338523](338535 call iteratorIndex _iterator[338524]))
      }
      ForLoop[338525]
      { unknown i[338542] "index var" "insert auto destroy"(338544 'move' i[338542] _indexOfInterest[338523])
        if(338518 call _cond_test(338508 call >(338506 call(412459 call . this[341089] c"startIdx") i[338542]) _last[338497]))
        {(338515 call = _last[338497](338513 call - i[338542] 1))
        } label _continueLabel[338528] _indexOfInterest[338523] _iterator[338524]
      } label _breakLabel[338529]
    }
    if(338580 call _cond_test(338557 call . this[341089] c"compressRows"))
    {(338568 return(338566 call _build_tuple _last[338497](338564 call(412469 call . this[341089] c"idx")(412474 call . this[341089] c"_nnz"))))
    }
    {(338578 return(338576 call _build_tuple(338573 call(412479 call . this[341089] c"idx")(412484 call . this[341089] c"_nnz")) _last[338497]))
    }
  } function CSDom[341023](?).dsiAdd[338597](arg _mt[341095]:_MT[238], arg this[341093]:CSDom[341023](?), arg ind[338594] :(338592 call *(412490 call . this[341093] c"rank")(412495 call . this[341093] c"idxType"))) : _unknown[51] "method" "primary method"
  {(338602 call(412499 call . this[341093] c"boundsCheck") ind[338594]) const tmp[338614] "const" "temp"(338613 call(412504 call . this[341093] c"find") ind[338594])(338621 call _check_tuple_var_decl tmp[338614] 2) const found[338605] "const"(338615 call tmp[338614] 0) const insertPt[338607] "const"(338618 call tmp[338614] 1)(338626 'end of statement')
    if(338631 call _cond_test found[338605])
    {(338629 return 0)
    }(338638 call +=(412511 call . this[341093] c"_nnz") 1) unknown oldNNZDomSize[338645](338642 call .(366384 call . this[341093] c"nnzDom") c"size")(338648 'end of statement')(338652 call(412515 call . this[341093] c"_grow")(412520 call . this[341093] c"_nnz")) const tmp[338660] "const" "temp" ind[338594](338667 call _check_tuple_var_decl tmp[338660] 2) const row[338654] "const"(338661 call tmp[338660] 0) const col[338656] "const"(338664 call tmp[338660] 1)(338672 'end of statement')
    { unknown _indexOfInterest[338701] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338702] "expr temp" "temp"(338711 'move' _iterator[338702](338709 call _getIterator(338728 call chpl_direct_range_iter insertPt[338607](338725 call -(412539 call . this[341093] c"_nnz") 1)(338721 call - 1))))
      Defer
      {
        {(338744 call _freeIterator _iterator[338702])
        }
      }
      { scopeless type(338733 'move' _indexOfInterest[338701](338730 call iteratorIndex _iterator[338702]))
      }
      ForLoop[338703]
      { unknown i[338737] "index var" "insert auto destroy"(338739 'move' i[338737] _indexOfInterest[338701])
        {(338697 call =(338692 call(412526 call . this[341093] c"idx")(338689 call + i[338737] 1))(338696 call(412532 call . this[341093] c"idx") i[338737]))
        } label _continueLabel[338706] _indexOfInterest[338701] _iterator[338702]
      } label _breakLabel[338707]
    }
    if(338771 call _cond_test(338752 call . this[341093] c"compressRows"))
    {(338760 call =(338758 call(412544 call . this[341093] c"idx") insertPt[338607]) col[338656])
    }
    {(338768 call =(338766 call(412551 call . this[341093] c"idx") insertPt[338607]) row[338654])
    } unknown start[338786](338783 IfExpr (338778 call . this[341093] c"compressRows") then
    { scopeless row[338654]
    } else
    { scopeless col[338656]
    } )(338789 'end of statement')
    { unknown _indexOfInterest[338810] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338811] "expr temp" "temp"(338820 'move' _iterator[338811](338818 call _getIterator(338831 call chpl_direct_range_iter(338824 call + start[338786] 1)(338828 call .(366391 call . this[341093] c"startIdxDom") c"high") 1)))
      Defer
      {
        {(338847 call _freeIterator _iterator[338811])
        }
      }
      { scopeless type(338836 'move' _indexOfInterest[338810](338833 call iteratorIndex _iterator[338811]))
      }
      ForLoop[338812]
      { unknown rc[338840] "index var" "insert auto destroy"(338842 'move' rc[338840] _indexOfInterest[338810])
        {(338806 call +=(338804 call(412560 call . this[341093] c"startIdx") rc[338840]) 1)
        } label _continueLabel[338815] _indexOfInterest[338810] _iterator[338811]
      } label _breakLabel[338816]
    }
    { unknown _indexOfInterest[338881] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[338882] "expr temp" "temp"(338891 'move' _iterator[338882](338889 call _getIterator(412567 call . this[341093] c"_arrs")))
      Defer
      {
        {(338907 call _freeIterator _iterator[338882])
        }
      }
      { scopeless type(338896 'move' _indexOfInterest[338881](338893 call iteratorIndex _iterator[338882]))
      }
      ForLoop[338883]
      { unknown a[338900] "index var" "insert auto destroy"(338902 'move' a[338900] _indexOfInterest[338881])
        {(338878 call(338857 call . a[338900] c"sparseShiftArray")(338865 call chpl_build_bounded_range insertPt[338607](338863 call -(412573 call . this[341093] c"_nnz") 1))(338876 call chpl_build_bounded_range(338870 call + oldNNZDomSize[338645] 1)(338873 call .(366397 call . this[341093] c"nnzDom") c"size")))
        } label _continueLabel[338886] _indexOfInterest[338881] _iterator[338882]
      } label _breakLabel[338887]
    }(338915 return 1)
  } function CSDom[341023](?).bulkAdd_help[338933](arg _mt[341099]:_MT[238], arg this[341097]:CSDom[341023](?), arg inds[338930] :(338928 call chpl__buildArrayRuntimeType unknown indsDom[338921](338926 call *(412579 call . this[341097] c"rank")(412584 call . this[341097] c"idxType"))), arg dataSorted[338936] = 0, arg isUnique[338940] = 0, arg addOn[338944] = nilLocale[89942]) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(338989 call _cond_test(338953 call != addOn[338944] nilLocale[89942]))
    {
      if(338984 call _cond_test(338960 call != addOn[338944](338958 call chpl_localeID_to_locale(338957 '_wide_get_locale' this[341097]))))
      {(338981 call halt "Bulk index addition is only possible on the locale where the\n            sparse domain is created")
      }
    }
    if(339019 call _cond_test(338994 call . this[341097] c"compressRows"))
    {(339007 call(412593 call . this[341097] c"bulkAdd_prepareInds") inds[338930] dataSorted[338936] isUnique[338940](cmp = defaultComparator[268065]))(366402 'referenced modules list' Sort[268056])
    }
    {(339016 call(412600 call . this[341097] c"bulkAdd_prepareInds") inds[338930] dataSorted[338936] isUnique[338940](cmp = _columnComparator[336203]))
    }
    if(339452 call _cond_test(339026 call ==(412609 call . this[341097] c"_nnz") 0))
    { const dupCount[339037] "const"(339034 IfExpr  isUnique[338940] then
      { scopeless 0
      } else
      { scopeless(339033 call(412614 call . this[341097] c"_countDuplicates") inds[338930])
      } )(339040 'end of statement')(339050 call +=(412620 call . this[341097] c"_nnz")(339048 call -(339044 call . inds[338930] c"size") dupCount[339037]))(339055 call(412625 call . this[341097] c"_bulkGrow")) unknown idxIdx[339058] 1(339061 'end of statement') unknown prevIdx[339073](339071 call -(339063 call .(366408 call . this[341097] c"parentDom") c"low")(339069 call _build_tuple 1 1))(339076 'end of statement') unknown current[339078](412630 call . this[341097] c"idxType")(339081 'end of statement')
      if(339114 call _cond_test(339083 call . this[341097] c"compressRows"))
      {(339097 call = current[339078](339094 call .(339093 call(339088 call .(366414 call . this[341097] c"parentDom") c"dim") 0) c"low"))
      }
      {(339111 call = current[339078](339108 call .(339107 call(339102 call .(366419 call . this[341097] c"parentDom") c"dim") 1) c"low"))
      }
      { unknown _indexOfInterest[339318] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339319] "expr temp" "temp"(339328 'move' _iterator[339319](339326 call _getIterator inds[338930]))
        Defer
        {
          {(339358 call _freeIterator _iterator[339319])
          }
        }
        { scopeless type(339333 'move' _indexOfInterest[339318](339330 call iteratorIndex _iterator[339319]))
        }
        ForLoop[339320]
        {(339338 call _check_tuple_var_decl _indexOfInterest[339318] 2) unknown i[339344] "index var" "insert auto destroy"(339346 'move' i[339344](339342 call _indexOfInterest[339318] 0)) unknown j[339351] "index var" "insert auto destroy"(339353 'move' j[339351](339349 call _indexOfInterest[339318] 1))
          {
            if(339151 call _cond_test(339137 call &&(339127 call ! isUnique[338940])(339135 call ==(339132 call _build_tuple i[339344] j[339351]) prevIdx[339073])))
            {
              continue _continueLabel[339323] _continueLabel[339323]
            }
            {(339148 call = prevIdx[339073](339146 call _build_tuple i[339344] j[339351]))
            }
            if(339314 call _cond_test(339159 call . this[341097] c"compressRows"))
            {
              { unknown tmp[339186] "temp"(339210 'move' tmp[339186](339205 call _cond_test(339207 call != i[339344] current[339078])))
                WhileDo[339191]
                {
                  {(339168 call += current[339078] 1)(339183 call =(339178 call(412646 call . this[341097] c"startIdx")(339175 call + current[339078] 1))(339182 call(412652 call . this[341097] c"startIdx") current[339078]))
                  } label _continueLabel[339189](339200 'move' tmp[339186](339195 call _cond_test(339197 call != i[339344] current[339078]))) tmp[339186]
                } label _breakLabel[339190]
              }(339222 call +=(339220 call(412662 call . this[341097] c"startIdx")(339217 call + i[339344] 1)) 1)(339230 call =(339228 call(412668 call . this[341097] c"idx") idxIdx[339058]) j[339351])(339235 call += idxIdx[339058] 1)
            }
            {
              { unknown tmp[339262] "temp"(339286 'move' tmp[339262](339281 call _cond_test(339283 call != j[339351] current[339078])))
                WhileDo[339267]
                {
                  {(339244 call += current[339078] 1)(339259 call =(339254 call(412677 call . this[341097] c"startIdx")(339251 call + current[339078] 1))(339258 call(412683 call . this[341097] c"startIdx") current[339078]))
                  } label _continueLabel[339265](339276 'move' tmp[339262](339271 call _cond_test(339273 call != j[339351] current[339078]))) tmp[339262]
                } label _breakLabel[339266]
              }(339298 call +=(339296 call(412693 call . this[341097] c"startIdx")(339293 call + j[339351] 1)) 1)(339306 call =(339304 call(412699 call . this[341097] c"idx") idxIdx[339058]) i[339344])(339311 call += idxIdx[339058] 1)
            }
          } label _continueLabel[339323] _indexOfInterest[339318] _iterator[339319]
        } label _breakLabel[339324]
      } const startIdxHigh[339372] "const"(339371 call(412707 call . this[341097] c"startIdx")(339368 call + current[339078] 1))(339375 'end of statement')
      { unknown _indexOfInterest[339399] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339400] "expr temp" "temp"(339409 'move' _iterator[339400](339407 call _getIterator(339423 call chpl_direct_range_iter(339413 call + current[339078] 2)(339417 call .(339419 call .(366425 call . this[341097] c"startIdx") c"_dom") c"high") 1)))
        Defer
        {
          {(339439 call _freeIterator _iterator[339400])
          }
        }
        { scopeless type(339428 'move' _indexOfInterest[339399](339425 call iteratorIndex _iterator[339400]))
        }
        ForLoop[339401]
        { unknown r[339432] "index var" "insert auto destroy"(339434 'move' r[339432] _indexOfInterest[339399])
          {(339395 call =(339393 call(412713 call . this[341097] c"startIdx") r[339432]) startIdxHigh[339372])
          } label _continueLabel[339404] _indexOfInterest[339399] _iterator[339400]
        } label _breakLabel[339405]
      }(339450 return(339448 call - idxIdx[339058] 1))
    } const tmp[339467] "const" "temp"(339466 call(412721 call . this[341097] c"__getActualInsertPts") this[341097] inds[338930] isUnique[338940])(339474 call _check_tuple_var_decl tmp[339467] 2) const actualInsertPts[339456] "const"(339468 call tmp[339467] 0) const actualAddCnt[339458] "const"(339471 call tmp[339467] 1)(339479 'end of statement') const oldnnz[339481] "const"(412729 call . this[341097] c"_nnz")(339484 'end of statement')(339487 call +=(412734 call . this[341097] c"_nnz") actualAddCnt[339458])(339492 call(412739 call . this[341097] c"_bulkGrow")) unknown newIndIdx[339498](339495 call . indsDom[338921] c"high")(339501 'end of statement') unknown oldIndIdx[339503] oldnnz[339481](339506 'end of statement') unknown newLoc[339511](339510 call actualInsertPts[339456] newIndIdx[339498])(339514 'end of statement')
    { unknown tmp[339553] "temp"(339581 'move' tmp[339553](339574 call _cond_test(339576 call == newLoc[339511](339579 call - 1))))
      WhileDo[339558]
      {
        {(339523 call -= newIndIdx[339498] 1)
          if(339540 call _cond_test(339535 call == newIndIdx[339498](339533 call -(339529 call . indsDom[338921] c"low") 1)))
          {
            break _breakLabel[339557] _breakLabel[339557]
          }(339550 call = newLoc[339511](339549 call actualInsertPts[339456] newIndIdx[339498]))
        } label _continueLabel[339556](339569 'move' tmp[339553](339562 call _cond_test(339564 call == newLoc[339511](339567 call - 1)))) tmp[339553]
      } label _breakLabel[339557]
    } unknown arrShiftMap[339597](339595 call chpl__buildArrayRuntimeType(339593 call chpl__ensureDomainExpr(339589 call chpl__buildDomainExpr(339586 call chpl_build_bounded_range 1 oldnnz[339481]))) int(64)[13])(339600 'end of statement')
    { unknown _indexOfInterest[339816] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339817] "expr temp" "temp"(339826 'move' _iterator[339817](339824 call _getIterator(339837 call chpl_direct_range_iter 1(412806 call . this[341097] c"_nnz")(339833 call - 1))))
      Defer
      {
        {(339853 call _freeIterator _iterator[339817])
        }
      }
      { scopeless type(339842 'move' _indexOfInterest[339816](339839 call iteratorIndex _iterator[339817]))
      }
      ForLoop[339818]
      { unknown i[339846] "index var" "insert auto destroy"(339848 'move' i[339846] _indexOfInterest[339816])
        {
          if(339810 call _cond_test(339619 call &&(339613 call >= oldIndIdx[339503] 1)(339617 call > i[339846] newLoc[339511])))
          {(339629 call =(339624 call(412758 call . this[341097] c"idx") i[339846])(339628 call(412764 call . this[341097] c"idx") oldIndIdx[339503]))(339638 call =(339636 call arrShiftMap[339597] oldIndIdx[339503]) i[339846])(339643 call -= oldIndIdx[339503] 1)
          }
          {
            if(339805 call _cond_test(339657 call &&(339651 call >= newIndIdx[339498](339648 call . indsDom[338921] c"low"))(339655 call == i[339846] newLoc[339511])))
            {
              if(339693 call _cond_test(339660 call . this[341097] c"compressRows"))
              {(339674 call =(339666 call(412777 call . this[341097] c"idx") i[339846])(339673 call(339670 call inds[338930] newIndIdx[339498]) 1))
              }
              {(339689 call =(339681 call(412785 call . this[341097] c"idx") i[339846])(339688 call(339685 call inds[338930] newIndIdx[339498]) 0))
              }(339700 call -= newIndIdx[339498] 1)
              if(339725 call _cond_test(339708 call >= newIndIdx[339498](339705 call . indsDom[338921] c"low")))
              {(339715 call = newLoc[339511](339714 call actualInsertPts[339456] newIndIdx[339498]))
              }
              {(339722 call = newLoc[339511](339720 call - 2))
              }
              { unknown tmp[339769] "temp"(339797 'move' tmp[339769](339790 call _cond_test(339792 call == newLoc[339511](339795 call - 1))))
                WhileDo[339774]
                {
                  {(339739 call -= newIndIdx[339498] 1)
                    if(339756 call _cond_test(339751 call == newIndIdx[339498](339749 call -(339745 call . indsDom[338921] c"low") 1)))
                    {
                      break _breakLabel[339773] _breakLabel[339773]
                    }(339766 call = newLoc[339511](339765 call actualInsertPts[339456] newIndIdx[339498]))
                  } label _continueLabel[339772](339785 'move' tmp[339769](339778 call _cond_test(339780 call == newLoc[339511](339783 call - 1)))) tmp[339769]
                } label _breakLabel[339773]
              }
            }
            {(339803 call halt "Something went wrong")
            }
          }
        } label _continueLabel[339821] _indexOfInterest[339816] _iterator[339817]
      } label _breakLabel[339822]
    } unknown prevCursor[339887](339884 IfExpr (339861 call . this[341097] c"compressRows") then
    { scopeless(339871 call .(339870 call(339865 call .(366437 call . this[341097] c"parentDom") c"dim") 0) c"low")
    } else
    { scopeless(339881 call .(339880 call(339875 call .(366442 call . this[341097] c"parentDom") c"dim") 1) c"low")
    } )(339890 'end of statement') unknown cursor[339892] int(64)[13](339895 'end of statement') unknown cursorCnt[339897] 0(339900 'end of statement')
    { unknown _indexOfInterest[340057] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340058] "expr temp" "temp"(340072 'move' _iterator[340058](339909 call _build_tuple(340067 call _getIterator inds[338930])(340070 call _getIterator actualInsertPts[339456])))
      Defer
      {
        {(340102 call _freeIterator _iterator[340058])
        }
      }
      { scopeless type(340077 'move' _indexOfInterest[340057](340074 call iteratorIndex _iterator[340058]))
      }
      ForLoop[340059]
      {(340082 call _check_tuple_var_decl _indexOfInterest[340057] 2) unknown ind[340088] "index var" "insert auto destroy"(340090 'move' ind[340088](340086 call _indexOfInterest[340057] 0)) unknown p[340095] "index var" "insert auto destroy"(340097 'move' p[340095](340093 call _indexOfInterest[340057] 1))
        {
          if(339919 call _cond_test(339914 call == p[340095](339912 call - 1)))
          {
            continue _continueLabel[340062] _continueLabel[340062]
          }
          if(339947 call _cond_test(339926 call . this[341097] c"compressRows"))
          {(339934 call = cursor[339892](339933 call ind[340088] 0))
          }
          {(339943 call = cursor[339892](339942 call ind[340088] 1))
          }
          if(340052 call _cond_test(339953 call == cursor[339892] prevCursor[339887]))
          {(339957 call += cursorCnt[339897] 1)
          }
          {(339968 call +=(339966 call(412819 call . this[341097] c"startIdx")(339963 call + prevCursor[339887] 1)) cursorCnt[339897])
            if(340038 call _cond_test(339977 call >(339974 call - cursor[339892] prevCursor[339887]) 1))
            {
              { unknown _indexOfInterest[339996] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[339997] "expr temp" "temp"(340006 'move' _iterator[339997](340004 call _getIterator(340014 call chpl_direct_range_iter(340010 call + prevCursor[339887] 2) cursor[339892] 1)))
                Defer
                {
                  {(340030 call _freeIterator _iterator[339997])
                  }
                }
                { scopeless type(340019 'move' _indexOfInterest[339996](340016 call iteratorIndex _iterator[339997]))
                }
                ForLoop[339998]
                { unknown i[340023] "index var" "insert auto destroy"(340025 'move' i[340023] _indexOfInterest[339996])
                  {(339992 call +=(339990 call(412828 call . this[341097] c"startIdx") i[340023]) cursorCnt[339897])
                  } label _continueLabel[340001] _indexOfInterest[339996] _iterator[339997]
                } label _breakLabel[340002]
              }
            }(340044 call += cursorCnt[339897] 1)(340049 call = prevCursor[339887] cursor[339892])
          }
        } label _continueLabel[340062] _indexOfInterest[340057] _iterator[340058]
      } label _breakLabel[340063]
    }
    { unknown _indexOfInterest[340129] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340130] "expr temp" "temp"(340139 'move' _iterator[340130](340137 call _getIterator(340150 call chpl_direct_range_iter(340143 call + prevCursor[339887] 1)(340147 call .(366448 call . this[341097] c"startIdxDom") c"high") 1)))
      Defer
      {
        {(340166 call _freeIterator _iterator[340130])
        }
      }
      { scopeless type(340155 'move' _indexOfInterest[340129](340152 call iteratorIndex _iterator[340130]))
      }
      ForLoop[340131]
      { unknown i[340159] "index var" "insert auto destroy"(340161 'move' i[340159] _indexOfInterest[340129])
        {(340125 call +=(340123 call(412842 call . this[341097] c"startIdx") i[340159]) cursorCnt[339897])
        } label _continueLabel[340134] _indexOfInterest[340129] _iterator[340130]
      } label _breakLabel[340135]
    }
    { unknown _indexOfInterest[340184] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340185] "expr temp" "temp"(340194 'move' _iterator[340185](340192 call _getIterator(412850 call . this[341097] c"_arrs")))
      Defer
      {
        {(340210 call _freeIterator _iterator[340185])
        }
      }
      { scopeless type(340199 'move' _indexOfInterest[340184](340196 call iteratorIndex _iterator[340185]))
      }
      ForLoop[340186]
      { unknown a[340203] "index var" "insert auto destroy"(340205 'move' a[340203] _indexOfInterest[340184])(340182 call(340176 call . a[340203] c"sparseBulkShiftArray") arrShiftMap[339597] oldnnz[339481]) label _continueLabel[340189] _indexOfInterest[340184] _iterator[340185]
      } label _breakLabel[340190]
    }(340218 return actualAddCnt[339458])(355695 'used modules list'(338948 'import' Sort[268056]))
  } function CSDom[341023](?).dsiRemove[340231](arg _mt[341103]:_MT[238], arg this[341101]:CSDom[341023](?), arg ind[340228] :(340226 call *(412858 call . this[341101] c"rank")(412863 call . this[341101] c"idxType"))) : _unknown[51] "method" "primary method"
  { const tmp[340242] "const" "temp"(340241 call(412867 call . this[341101] c"find") ind[340228])(340249 call _check_tuple_var_decl tmp[340242] 2) const found[340233] "const"(340243 call tmp[340242] 0) const insertPt[340235] "const"(340246 call tmp[340242] 1)(340254 'end of statement')
    if(340262 call _cond_test(340257 call ! found[340233]))
    {(340260 return 0)
    }(340269 call -=(412874 call . this[341101] c"_nnz") 1)(340275 call(412880 call . this[341101] c"_shrink")(412885 call . this[341101] c"_nnz")) const tmp[340283] "const" "temp" ind[340228](340290 call _check_tuple_var_decl tmp[340283] 2) const row[340277] "const"(340284 call tmp[340283] 0) const col[340279] "const"(340287 call tmp[340283] 1)(340295 'end of statement')
    { unknown _indexOfInterest[340316] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340317] "expr temp" "temp"(340326 'move' _iterator[340317](340324 call _getIterator(340331 call chpl_direct_range_iter insertPt[340235](412904 call . this[341101] c"_nnz") 1)))
      Defer
      {
        {(340347 call _freeIterator _iterator[340317])
        }
      }
      { scopeless type(340336 'move' _indexOfInterest[340316](340333 call iteratorIndex _iterator[340317]))
      }
      ForLoop[340318]
      { unknown i[340340] "index var" "insert auto destroy"(340342 'move' i[340340] _indexOfInterest[340316])
        {(340312 call =(340304 call(412891 call . this[341101] c"idx") i[340340])(340311 call(412897 call . this[341101] c"idx")(340308 call + i[340340] 1)))
        } label _continueLabel[340321] _indexOfInterest[340316] _iterator[340317]
      } label _breakLabel[340322]
    }
    if(340488 call _cond_test(340355 call . this[341101] c"compressRows"))
    {
      { unknown _indexOfInterest[340378] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340379] "expr temp" "temp"(340388 'move' _iterator[340379](340386 call _getIterator(340399 call chpl_direct_range_iter(340392 call + row[340277] 1)(340396 call .(366455 call . this[341101] c"startIdxDom") c"high") 1)))
        Defer
        {
          {(340415 call _freeIterator _iterator[340379])
          }
        }
        { scopeless type(340404 'move' _indexOfInterest[340378](340401 call iteratorIndex _iterator[340379]))
        }
        ForLoop[340380]
        { unknown r[340408] "index var" "insert auto destroy"(340410 'move' r[340408] _indexOfInterest[340378])
          {(340374 call -=(340372 call(412909 call . this[341101] c"startIdx") r[340408]) 1)
          } label _continueLabel[340383] _indexOfInterest[340378] _iterator[340379]
        } label _breakLabel[340384]
      }
    }
    {
      { unknown _indexOfInterest[340443] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340444] "expr temp" "temp"(340453 'move' _iterator[340444](340451 call _getIterator(340464 call chpl_direct_range_iter(340457 call + col[340279] 1)(340461 call .(366460 call . this[341101] c"startIdxDom") c"high") 1)))
        Defer
        {
          {(340480 call _freeIterator _iterator[340444])
          }
        }
        { scopeless type(340469 'move' _indexOfInterest[340443](340466 call iteratorIndex _iterator[340444]))
        }
        ForLoop[340445]
        { unknown r[340473] "index var" "insert auto destroy"(340475 'move' r[340473] _indexOfInterest[340443])
          {(340439 call -=(340437 call(412916 call . this[341101] c"startIdx") r[340473]) 1)
          } label _continueLabel[340448] _indexOfInterest[340443] _iterator[340444]
        } label _breakLabel[340449]
      }
    }
    { unknown _indexOfInterest[340509] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340510] "expr temp" "temp"(340519 'move' _iterator[340510](340517 call _getIterator(412923 call . this[341101] c"_arrs")))
      Defer
      {
        {(340535 call _freeIterator _iterator[340510])
        }
      }
      { scopeless type(340524 'move' _indexOfInterest[340509](340521 call iteratorIndex _iterator[340510]))
      }
      ForLoop[340511]
      { unknown a[340528] "index var" "insert auto destroy"(340530 'move' a[340528] _indexOfInterest[340509])
        {(340506 call(340495 call . a[340528] c"sparseShiftArrayBack")(340503 call chpl_build_bounded_range insertPt[340235](340501 call -(412929 call . this[341101] c"_nnz") 1)))
        } label _continueLabel[340514] _indexOfInterest[340509] _iterator[340510]
      } label _breakLabel[340515]
    }(340543 return 1)
  } function CSDom[341023](?).dsiClear[340549](arg _mt[341107]:_MT[238], arg this[341105]:CSDom[341023](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {(340553 call =(412934 call . this[341105] c"_nnz") 0)(340559 call =(412939 call . this[341105] c"startIdx") 1)
  } function CSDom[341023](?).dimIter[340568](arg _mt[341111]:_MT[238], arg this[341109]:CSDom[341023](?), param arg d[340566]:_any[178](?), arg ind[340570]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(340642 call _cond_test(340580 call &&(340574 call != d[340566] 1)(340577 call . this[341109] c"compressRows")))
    {(340601 call compilerError "dimIter(0, ..) not supported on CS(compressRows=true) domains")
    }
    {
      if(340638 call _cond_test(340614 call &&(340606 call != d[340566] 0)(340612 call !(340609 call . this[341109] c"compressRows"))))
      {(340635 call compilerError "dimIter(1, ..) not supported on CS(compressRows=false) domains")
      }
    }
    { unknown _indexOfInterest[340665] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340666] "expr temp" "temp"(340675 'move' _iterator[340666](340673 call _getIterator(340684 call chpl_direct_range_iter(340679 call(412952 call . this[341109] c"startIdx") ind[340570])(340682 call(412957 call . this[341109] c"stopIdx") ind[340570]) 1)))
      Defer
      {
        {(340700 call _freeIterator _iterator[340666])
        }
      }
      { scopeless type(340689 'move' _indexOfInterest[340665](340686 call iteratorIndex _iterator[340666]))
      }
      ForLoop[340667]
      { unknown i[340693] "index var" "insert auto destroy"(340695 'move' i[340693] _indexOfInterest[340665])(340663 yield(340662 call(412946 call . this[341109] c"idx") i[340693])) label _continueLabel[340670] _indexOfInterest[340665] _iterator[340666]
      } label _breakLabel[340671]
    }
  } function CSDom[341023](?).dsiSerialWrite[340713](arg _mt[341115]:_MT[238], arg this[341113]:CSDom[341023](?), arg f[340711]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(340717 call <~> f[340711] "{\n")
    if(341011 call _cond_test(340722 call . this[341113] c"compressRows"))
    {
      { unknown _indexOfInterest[340834] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340835] "expr temp" "temp"(340844 'move' _iterator[340835](340842 call _getIterator(412964 call . this[341113] c"rowRange")))
        Defer
        {
          {(340860 call _freeIterator _iterator[340835])
          }
        }
        { scopeless type(340849 'move' _indexOfInterest[340834](340846 call iteratorIndex _iterator[340835]))
        }
        ForLoop[340836]
        { unknown r[340853] "index var" "insert auto destroy"(340855 'move' r[340853] _indexOfInterest[340834])
          { const lo[340731] "const"(340730 call(412969 call . this[341113] c"startIdx") r[340853]) const hi[340738] "const"(340737 call(412974 call . this[341113] c"stopIdx") r[340853])(340741 'end of statement')
            { unknown _indexOfInterest[340796] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340797] "expr temp" "temp"(340806 'move' _iterator[340797](340804 call _getIterator(340811 call chpl_direct_range_iter lo[340731] hi[340738] 1)))
              Defer
              {
                {(340827 call _freeIterator _iterator[340797])
                }
              }
              { scopeless type(340816 'move' _indexOfInterest[340796](340813 call iteratorIndex _iterator[340797]))
              }
              ForLoop[340798]
              { unknown c[340820] "index var" "insert auto destroy"(340822 'move' c[340820] _indexOfInterest[340796])
                {(340792 call <~>(340765 call <~>(340762 call <~>(340756 call <~>(340753 call <~>(340750 call <~> f[340711] " (") r[340853]) ", ")(340761 call(412982 call . this[341113] c"idx") c[340820])) ")")(340789 IfExpr (340769 call == c[340820] hi[340738]) then
                  { scopeless "\n"
                  } else
                  { scopeless ""
                  } ))
                } label _continueLabel[340801] _indexOfInterest[340796] _iterator[340797]
              } label _breakLabel[340802]
            }
          } label _continueLabel[340839] _indexOfInterest[340834] _iterator[340835]
        } label _breakLabel[340840]
      }
    }
    {
      { unknown _indexOfInterest[340977] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340978] "expr temp" "temp"(340987 'move' _iterator[340978](340985 call _getIterator(412992 call . this[341113] c"colRange")))
        Defer
        {
          {(341003 call _freeIterator _iterator[340978])
          }
        }
        { scopeless type(340992 'move' _indexOfInterest[340977](340989 call iteratorIndex _iterator[340978]))
        }
        ForLoop[340979]
        { unknown c[340996] "index var" "insert auto destroy"(340998 'move' c[340996] _indexOfInterest[340977])
          { const lo[340874] "const"(340873 call(412997 call . this[341113] c"startIdx") c[340996]) const hi[340881] "const"(340880 call(413002 call . this[341113] c"stopIdx") c[340996])(340884 'end of statement')
            { unknown _indexOfInterest[340939] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[340940] "expr temp" "temp"(340949 'move' _iterator[340940](340947 call _getIterator(340954 call chpl_direct_range_iter lo[340874] hi[340881] 1)))
              Defer
              {
                {(340970 call _freeIterator _iterator[340940])
                }
              }
              { scopeless type(340959 'move' _indexOfInterest[340939](340956 call iteratorIndex _iterator[340940]))
              }
              ForLoop[340941]
              { unknown r[340963] "index var" "insert auto destroy"(340965 'move' r[340963] _indexOfInterest[340939])
                {(340935 call <~>(340908 call <~>(340905 call <~>(340902 call <~>(340899 call <~>(340893 call <~> f[340711] " (")(340898 call(413009 call . this[341113] c"idx") r[340963])) ", ") c[340996]) ")")(340932 IfExpr (340912 call == r[340963] hi[340881]) then
                  { scopeless "\n"
                  } else
                  { scopeless ""
                  } ))
                } label _continueLabel[340944] _indexOfInterest[340939] _iterator[340940]
              } label _breakLabel[340945]
            }
          } label _continueLabel[340982] _indexOfInterest[340977] _iterator[340978]
        } label _breakLabel[340983]
      }
    }(341017 call <~> f[340711] "}\n")
  } type CSDom[341023](?) val super[355907]:BaseSparseDomImpl[148004](?) "super class" unknown compressRows[336387] "param" unknown sortedIndices[336391] "param" unknown stridable[336395] "param" unknown dist[336405](336403 call unmanaged CS[415674](?) compressRows[336387] sortedIndices[336391]) unknown rowRange[336415](336414 call range[64319](?) idxType[148258](stridable = stridable[336395])) unknown colRange[336425](336424 call range[64319](?) idxType[148258](stridable = stridable[336395])) unknown startIdxDom[336435](336433 call chpl__buildDomainRuntimeType defaultDist[94053] 1 idxType[148258]) unknown _nnz[336440] 0 unknown startIdx[336451] "local field"(336449 call chpl__buildArrayRuntimeType(336447 call chpl__ensureDomainExpr startIdxDom[336435]) idxType[148258]) unknown idx[336462] "local field"(336460 call chpl__buildArrayRuntimeType(336458 call chpl__ensureDomainExpr nnzDom[146964]) idxType[148258]) type CSDom[412017](?) function CSArr[341951](?).init[341125](arg _mt[341955]:_MT[238], arg this[341953]:CSArr[341951](?), arg eltType[341123]:_any[178](?), param arg rank[341128] : int(64)[13], arg idxType[341131]:_any[178](?), arg dom[341133]:_any[178](?), param arg initElts[341136] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(341149 call(341140 call .(366469 call . this[341953] c"super") c"init") eltType[341123] rank[341128] idxType[341131] dom[341133] initElts[341136])
  } function CSArr[341951](?).dsiAccess[341163](arg _mt[341959]:_MT[238], arg this[341957]:CSArr[341951](?), arg ind[341160] :(341158 call *(413026 call . this[341957] c"rank")(413031 call . this[341957] c"idxType"))) ref : _unknown[51] "method" "primary method"
  {(341171 call(341166 call .(366474 call . this[341957] c"dom") c"boundsCheck") ind[341160]) const tmp[341186] "const" "temp"(341185 call(341180 call .(366479 call . this[341957] c"dom") c"find") ind[341160])(341193 call _check_tuple_var_decl tmp[341186] 2) const found[341174] "const"(341187 call tmp[341186] 0) const loc[341176] "const"(341190 call tmp[341186] 1)(341198 'end of statement')
    if(341212 call _cond_test found[341174])
    {(341204 return(341203 call(413039 call . this[341957] c"data") loc[341176]))
    }
    {(341210 call halt "attempting to assign a 'zero' value in a sparse array: " ind[341160])
    }
  } function CSArr[341951](?).dsiAccess[341229](arg _mt[341963]:_MT[238], arg this[341961]:CSArr[341951](?), arg ind[341226] :(341224 call *(413046 call . this[341961] c"rank")(413051 call . this[341961] c"idxType"))) : _unknown[51] "method" "primary method"
  {(341241 call(341236 call .(366484 call . this[341961] c"dom") c"boundsCheck") ind[341226]) const tmp[341256] "const" "temp"(341255 call(341250 call .(366489 call . this[341961] c"dom") c"find") ind[341226])(341263 call _check_tuple_var_decl tmp[341256] 2) const found[341244] "const"(341257 call tmp[341256] 0) const loc[341246] "const"(341260 call tmp[341256] 1)(341268 'end of statement')
    if(341279 call _cond_test found[341244])
    {(341274 return(341273 call(413064 call . this[341961] c"data") loc[341246]))
    }
    {(341277 return(413070 call . this[341961] c"irv"))
    }
  }
  {(341234 call shouldReturnRvalueByValue(413056 call . this[341961] c"eltType"))
  } function CSArr[341951](?).dsiAccess[341297](arg _mt[341967]:_MT[238], arg this[341965]:CSArr[341951](?), arg ind[341294] :(341292 call *(413075 call . this[341965] c"rank")(413080 call . this[341965] c"idxType"))) const ref : _unknown[51] "method" "primary method"
  {(341309 call(341304 call .(366494 call . this[341965] c"dom") c"boundsCheck") ind[341294]) const tmp[341324] "const" "temp"(341323 call(341318 call .(366499 call . this[341965] c"dom") c"find") ind[341294])(341331 call _check_tuple_var_decl tmp[341324] 2) const found[341312] "const"(341325 call tmp[341324] 0) const loc[341314] "const"(341328 call tmp[341324] 1)(341336 'end of statement')
    if(341347 call _cond_test found[341312])
    {(341342 return(341341 call(413093 call . this[341965] c"data") loc[341314]))
    }
    {(341345 return(413099 call . this[341965] c"irv"))
    }
  }
  {(341302 call shouldReturnRvalueByConstRef(413085 call . this[341965] c"eltType"))
  } function CSArr[341951](?).these[341358](arg _mt[341971]:_MT[238], arg this[341969]:CSArr[341951](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[341374] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341375] "expr temp" "temp"(341384 'move' _iterator[341375](341382 call _getIterator(341392 call chpl_direct_range_iter 1(341389 call .(366504 call . this[341969] c"dom") c"_nnz") 1)))
      Defer
      {
        {(341408 call _freeIterator _iterator[341375])
        }
      }
      { scopeless type(341397 'move' _indexOfInterest[341374](341394 call iteratorIndex _iterator[341375]))
      }
      ForLoop[341376]
      { unknown i[341401] "index var" "insert auto destroy"(341403 'move' i[341401] _indexOfInterest[341374])(341372 yield(341371 call(413104 call . this[341969] c"data") i[341401])) label _continueLabel[341379] _indexOfInterest[341374] _iterator[341375]
      } label _breakLabel[341380]
    }
  } function CSArr[341951](?).these[341424](arg _mt[341975]:_MT[238], arg this[341973]:CSArr[341951](?), param arg tag[341421] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[341444] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341445] "expr temp" "temp"(341454 'move' _iterator[341445](341452 call _getIterator(341440 call(341435 call .(366510 call . this[341973] c"dom") c"these") tag[341421])))
      Defer
      {
        {(341471 call _freeIterator _iterator[341445])
        }
      }
      { scopeless type(341460 'move' _indexOfInterest[341444](341457 call iteratorIndex _iterator[341445]))
      }
      ForLoop[341446]
      { unknown followThis[341464] "index var" "insert auto destroy"(341466 'move' followThis[341464] _indexOfInterest[341444])(341442 yield followThis[341464]) label _continueLabel[341449] _indexOfInterest[341444] _iterator[341445]
      } label _breakLabel[341450]
    }
  }
  {(341431 call == tag[341421] leader[447])
  } function CSArr[341951](?).these[341488](arg _mt[341979]:_MT[238], arg this[341977]:CSArr[341951](?), param arg tag[341485] : iterKind[453], arg followThis[341496] :(341494 call _build_tuple ?[260] ?[260] ?[260])) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[341514] "temp" followThis[341496](341524 call _check_tuple_var_decl tmp[341514] 3) unknown followThisDom[341506](341515 call tmp[341514] 0) unknown startIx[341508](341518 call tmp[341514] 1) unknown endIx[341510](341521 call tmp[341514] 2)(341529 'end of statement')
    if(341559 call _cond_test(341536 call != followThisDom[341506](341533 call . this[341977] c"dom")))
    {(341557 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays (CS layout)")
    }
    if(341589 call _cond_test debugCS[336160])
    {(341587 call writeln "CSArr follower: " startIx[341508] ".." endIx[341510])
    }
    { unknown _indexOfInterest[341605] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341606] "expr temp" "temp"(341615 'move' _iterator[341606](341613 call _getIterator(341620 call chpl_direct_range_iter startIx[341508] endIx[341510] 1)))
      Defer
      {
        {(341636 call _freeIterator _iterator[341606])
        }
      }
      { scopeless type(341625 'move' _indexOfInterest[341605](341622 call iteratorIndex _iterator[341606]))
      }
      ForLoop[341607]
      { unknown i[341629] "index var" "insert auto destroy"(341631 'move' i[341629] _indexOfInterest[341605])(341603 yield(341602 call(413121 call . this[341977] c"data") i[341629])) label _continueLabel[341610] _indexOfInterest[341605] _iterator[341606]
      } label _breakLabel[341611]
    }
  }
  {(341504 call == tag[341485] follower[449])
  } function CSArr[341951](?).these[341652](arg _mt[341983]:_MT[238], arg this[341981]:CSArr[341951](?), param arg tag[341649] : iterKind[453], arg followThis[341654]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {(341666 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")(341670 yield 0)
  }
  {(341661 call == tag[341649] follower[449])
  } function CSArr[341951](?).dsiSerialWrite[341679](arg _mt[341987]:_MT[238], arg this[341985]:CSArr[341951](?), arg f[341677]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(341943 call _cond_test(341682 call .(366518 call . this[341985] c"dom") c"compressRows"))
    {
      { unknown _indexOfInterest[341780] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341781] "expr temp" "temp"(341790 'move' _iterator[341781](341788 call _getIterator(341689 call .(366523 call . this[341985] c"dom") c"rowRange")))
        Defer
        {
          {(341807 call _freeIterator _iterator[341781])
          }
        }
        { scopeless type(341796 'move' _indexOfInterest[341780](341793 call iteratorIndex _iterator[341781]))
        }
        ForLoop[341782]
        { unknown r[341800] "index var" "insert auto destroy"(341802 'move' r[341800] _indexOfInterest[341780])
          { const lo[341699] "const"(341698 call(341693 call .(366528 call . this[341985] c"dom") c"startIdx") r[341800])(341702 'end of statement') const hi[341713] "const"(341712 call(341707 call .(366533 call . this[341985] c"dom") c"stopIdx") r[341800])(341716 'end of statement')
            { unknown _indexOfInterest[341742] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341743] "expr temp" "temp"(341752 'move' _iterator[341743](341750 call _getIterator(341757 call chpl_direct_range_iter lo[341699] hi[341713] 1)))
              Defer
              {
                {(341773 call _freeIterator _iterator[341743])
                }
              }
              { scopeless type(341762 'move' _indexOfInterest[341742](341759 call iteratorIndex _iterator[341743]))
              }
              ForLoop[341744]
              { unknown c[341766] "index var" "insert auto destroy"(341768 'move' c[341766] _indexOfInterest[341742])
                {(341738 call <~>(341727 call <~> f[341677](341726 call(413134 call . this[341985] c"data") c[341766]))(341735 IfExpr (341731 call == c[341766] hi[341713]) then
                  { scopeless "\n"
                  } else
                  { scopeless " "
                  } ))
                } label _continueLabel[341747] _indexOfInterest[341742] _iterator[341743]
              } label _breakLabel[341748]
            }
          } label _continueLabel[341785] _indexOfInterest[341780] _iterator[341781]
        } label _breakLabel[341786]
      }
    }
    {
      { unknown _indexOfInterest[341908] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341909] "expr temp" "temp"(341918 'move' _iterator[341909](341916 call _getIterator(341819 call .(366538 call . this[341985] c"dom") c"colRange")))
        Defer
        {
          {(341935 call _freeIterator _iterator[341909])
          }
        }
        { scopeless type(341924 'move' _indexOfInterest[341908](341921 call iteratorIndex _iterator[341909]))
        }
        ForLoop[341910]
        { unknown c[341928] "index var" "insert auto destroy"(341930 'move' c[341928] _indexOfInterest[341908])
          { const lo[341829] "const"(341828 call(341823 call .(366543 call . this[341985] c"dom") c"startIdx") c[341928])(341832 'end of statement') const hi[341841] "const"(341840 call(341835 call .(366548 call . this[341985] c"dom") c"stopIdx") c[341928])(341844 'end of statement')
            { unknown _indexOfInterest[341870] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[341871] "expr temp" "temp"(341880 'move' _iterator[341871](341878 call _getIterator(341885 call chpl_direct_range_iter lo[341829] hi[341841] 1)))
              Defer
              {
                {(341901 call _freeIterator _iterator[341871])
                }
              }
              { scopeless type(341890 'move' _indexOfInterest[341870](341887 call iteratorIndex _iterator[341871]))
              }
              ForLoop[341872]
              { unknown r[341894] "index var" "insert auto destroy"(341896 'move' r[341894] _indexOfInterest[341870])
                {(341866 call <~>(341855 call <~> f[341677](341854 call(413147 call . this[341985] c"data") r[341894]))(341863 IfExpr (341859 call == r[341894] hi[341841]) then
                  { scopeless "\n"
                  } else
                  { scopeless " "
                  } ))
                } label _continueLabel[341875] _indexOfInterest[341870] _iterator[341871]
              } label _breakLabel[341876]
            }
          } label _continueLabel[341913] _indexOfInterest[341908] _iterator[341909]
        } label _breakLabel[341914]
      }
    }
  } type CSArr[341951](?) val super[355909]:BaseSparseArrImpl[150571](?) "super class" type CSArr[412101](?)(355688 'used modules list'(353187 'use' ChapelStandard[20267])(336157 'import' RangeChunk[266546]))
}