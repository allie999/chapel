AST dump for ChapelSerializedBroadcast after pass createTaskFunctions.
Module use list: ChapelLocale CPtr 

{
  function chpl__init_ChapelSerializedBroadcast[416139]() : void[4] "insert line file info" "module init"
  {
    (544892 'init var' chpl__enableSerializedGlobals[171469] 1)
    (171472 'end of statement')
    (522543 return _void[55])
  }
  unknown chpl__enableSerializedGlobals[171469] "config" "param"
  function chpl_get_global_serialize_table[171479](arg idx[171476]:int(64)[13]) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
  {
    unknown ret[522535] "RVV" "temp"
    (522537 return ret[522535])
  }
  { scopeless type
    c_void_ptr[149]
  }
  function chpl__broadcastGlobal[171492](ref arg localeZeroGlobal[171489]:_any[178](?), arg id[171495]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown tmp[428612] "maybe param" "temp"
    (428623 'move' tmp[428612](171502 call isArray localeZeroGlobal[171489]))
    unknown call_tmp[681185] "expr temp" "maybe param" "maybe type" "temp"
    (681188 'move' call_tmp[681185](428625 call _cond_invalid tmp[428612]))
    if call_tmp[681185]
    {
      (428628 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570703] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570704] "maybe param" "temp"
    unknown call_tmp[681190] "expr temp" "maybe param" "maybe type" "temp"
    (681193 'move' call_tmp[681190](428613 call isTrue tmp[428612]))
    (570709 'move' tmp[570704](570707 call _cond_test call_tmp[681190]))
    if tmp[570704]
    {
      unknown tmp[570711] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[681195] "expr temp" "maybe param" "maybe type" "temp"
      (681198 'move' call_tmp[681195](171506 call chpl__isArrayView localeZeroGlobal[171489]))
      (570713 'move' tmp[570711](428616 call isTrue call_tmp[681195]))
      (570718 'move' tmp[570703](570715 '_paramFoldLogical' tmp[570704] tmp[570711]))
    }
    {
      (570723 'move' tmp[570703](570720 '_paramFoldLogical' tmp[570704] 0))
    }
    unknown call_tmp[681200] "expr temp" "maybe param" "maybe type" "temp"
    (681203 'move' call_tmp[681200](171833 call _cond_test tmp[570703]))
    if call_tmp[681200]
    {
      (171528 call halt "internal error: can't broadcast module-scope arrays yet")
    }
    {
      unknown call_tmp[681207] "maybe param" "maybe type" "temp"
      (681210 'move' call_tmp[681207](171536 call(171532 call (partial) chpl__serialize _mt[243] localeZeroGlobal[171489])))
      const data[171537] "dead at end of block" "const" "insert auto destroy"
      (544894 'init var' data[171537] call_tmp[681207])
      (171540 'end of statement')
      unknown call_tmp[681212] "expr temp" "maybe param" "maybe type" "temp"
      (681215 'move' call_tmp[681212](361544 call here[90438]))
      unknown call_tmp[681219] "maybe param" "maybe type" "temp"
      (681222 'move' call_tmp[681219](171543 call id _mt[243] call_tmp[681212]))
      const root[171546] "dead at end of block" "const" "insert auto destroy"
      (544896 'init var' root[171546] call_tmp[681219])
      (171549 'end of statement')
      {
        unknown tmpIter[171620] "expr temp" "maybe ref" "no copy" "temp"
        (171623 'move' tmpIter[171620] Locales[113662])
        unknown isRngDomArr[171814] "maybe param" "temp"
        unknown tmp[428570] "maybe param" "temp"
        (428581 'move' tmp[428570](171816 call isBoundedRange tmpIter[171620]))
        unknown call_tmp[681224] "expr temp" "maybe param" "maybe type" "temp"
        (681227 'move' call_tmp[681224](428583 call _cond_invalid tmp[428570]))
        if call_tmp[681224]
        {
          (428586 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570757] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570758] "maybe param" "temp"
        unknown call_tmp[681229] "expr temp" "maybe param" "maybe type" "temp"
        (681232 'move' call_tmp[681229](428571 call isTrue tmp[428570]))
        (570763 'move' tmp[570758](570761 call _cond_test call_tmp[681229]))
        if tmp[570758]
        {
          (570768 'move' tmp[570757](570765 '_paramFoldLogical' tmp[570758] 1))
        }
        {
          unknown tmp[428591] "maybe param" "temp"
          (428602 'move' tmp[428591](171819 call isDomain tmpIter[171620]))
          unknown call_tmp[681234] "expr temp" "maybe param" "maybe type" "temp"
          (681237 'move' call_tmp[681234](428604 call _cond_invalid tmp[428591]))
          if call_tmp[681234]
          {
            (428607 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[570730] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570731] "maybe param" "temp"
          unknown call_tmp[681239] "expr temp" "maybe param" "maybe type" "temp"
          (681242 'move' call_tmp[681239](428592 call isTrue tmp[428591]))
          (570736 'move' tmp[570731](570734 call _cond_test call_tmp[681239]))
          if tmp[570731]
          {
            (570741 'move' tmp[570730](570738 '_paramFoldLogical' tmp[570731] 1))
          }
          {
            unknown tmp[570743] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[681244] "expr temp" "maybe param" "maybe type" "temp"
            (681247 'move' call_tmp[681244](171822 call isArray tmpIter[171620]))
            (570745 'move' tmp[570743](428596 call isTrue call_tmp[681244]))
            (570750 'move' tmp[570730](570747 '_paramFoldLogical' tmp[570731] tmp[570743]))
          }
          unknown tmp[570770] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (570772 'move' tmp[570770](428575 call isTrue tmp[570730]))
          (570777 'move' tmp[570757](570774 '_paramFoldLogical' tmp[570758] tmp[570770]))
        }
        (171829 'move' isRngDomArr[171814] tmp[570757])
        if isRngDomArr[171814]
        {
          const _coforallCount[171686] "const" "end count" "temp"
          (171751 'move' _coforallCount[171686](171748 call _endCountAlloc 0))
          unknown numTasks[171687] "temp"
          (171735 'move' numTasks[171687](171731 call size _mt[243] tmpIter[171620]))
          (171726 call _upEndCount _coforallCount[171686] 0 numTasks[171687])
          (483375 'end of statement')
          unknown _indexOfInterest[171693] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[171694] "expr temp" "temp"
          (171703 'move' _iterator[171694](171701 call _getIterator tmpIter[171620]))
          Defer
          {
            {
              (171719 call _freeIterator _iterator[171694])
            }
          }
          { scopeless type
            (171708 'move' _indexOfInterest[171693](171705 call iteratorIndex _iterator[171694]))
          }
          ForLoop[171695]
          {
            unknown loc[171712] "coforall index var" "index var" "insert auto destroy"
            (483377 'end of statement')
            (171714 'move' loc[171712] _indexOfInterest[171693])
            (483378 'end of statement' loc[171712])
            const tmp[171626] "const" "temp"
            unknown call_tmp[681251] "expr temp" "maybe param" "maybe type" "temp"
            (681254 'move' call_tmp[681251](171631 '_wide_get_locale' loc[171712]))
            (171628 'move' tmp[171626](171630 'deref' call_tmp[681251]))
            (935561 call on_fn[935557] tmp[171626] root[171546] localeZeroGlobal[171489] data[171537] id[171495])
            function on_fn[935557](const in arg dummy_locale_arg[935559]:chpl_localeID_t[209352], arg root[935566], arg localeZeroGlobal[935569]:_any[178](?), arg data[935572], arg id[935575]:int(64)[13]) : void[4] "cobegin or coforall" "non blocking" "on"
            {
              {
                unknown call_tmp[681256] "expr temp" "maybe param" "maybe type" "temp"
                (681259 'move' call_tmp[681256](361549 call here[90438]))
                unknown call_tmp[681263] "expr temp" "maybe param" "maybe type" "temp"
                (681266 'move' call_tmp[681263](171643 call id _mt[243] call_tmp[681256]))
                unknown call_tmp[681268] "expr temp" "maybe param" "maybe type" "temp"
                (681271 'move' call_tmp[681268](171641 call != call_tmp[681263] root[935566]))
                unknown call_tmp[681273] "expr temp" "maybe param" "maybe type" "temp"
                (681276 'move' call_tmp[681273](171639 call _cond_test call_tmp[681268]))
                if call_tmp[681273]
                {
                  unknown call_tmp[681278] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                  (681281 'move' call_tmp[681278](171652 'typeof' localeZeroGlobal[935569]))
                  unknown call_tmp[681285] "maybe param" "maybe type" "temp"
                  (681288 'move' call_tmp[681285](171655 call(171651 call (partial) chpl__deserialize _mt[243] call_tmp[681278]) data[935572]))
                  unknown temp[171649] "dead at end of block" "no auto destroy" "no copy"
                  (544898 'init var' temp[171649] call_tmp[681285])
                  (171658 'end of statement')
                  unknown call_tmp[681290] "maybe param" "maybe type" "temp"
                  (681293 'move' call_tmp[681290](171662 call chpl_get_global_serialize_table id[935575]))
                  const destVoidPtr[171660] "dead at end of block" "const" "insert auto destroy"
                  (544900 'init var' destVoidPtr[171660] call_tmp[681290])
                  (171665 'end of statement')
                  unknown call_tmp[681295] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                  (681298 'move' call_tmp[681295](171672 'typeof' localeZeroGlobal[935569]))
                  unknown call_tmp[681300] "expr temp" "maybe param" "maybe type" "temp"
                  (681303 'move' call_tmp[681300](171671 call c_ptr[205100](?) call_tmp[681295]))
                  unknown call_tmp[681305] "maybe param" "maybe type" "temp"
                  (681308 'move' call_tmp[681305](171669 call _cast call_tmp[681300] destVoidPtr[171660]))
                  const dest[171667] "dead at end of block" "const" "insert auto destroy"
                  (544902 'init var' dest[171667] call_tmp[681305])
                  (171676 'end of statement' data[935572] destVoidPtr[171660])
                  unknown call_tmp[681312] "expr temp" "maybe param" "maybe type" "temp"
                  (681315 'move' call_tmp[681312](171682 call(171679 call (partial) deref _mt[243] dest[171667])))
                  (171677 '=' call_tmp[681312] temp[171649])
                  (483382 'end of statement' dest[171667] temp[171649])
                }
              }
              (171688 call _downEndCount _coforallCount[171686] nil[44])
              (935564 return _void[55])
            }
            {
            }
            label _continueLabel[171698]
            _indexOfInterest[171693]
            _iterator[171694]
          }
          label _breakLabel[171699]
          Defer
          {
            {
              (171738 call _endCountFree _coforallCount[171686])
            }
          }
          (171743 call _waitEndCount _coforallCount[171686] 0 numTasks[171687])
        }
        {
          const _coforallCount[171755] "const" "end count" "temp"
          (171811 'move' _coforallCount[171755](171808 call _endCountAlloc 0))
          unknown _indexOfInterest[171762] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[171763] "expr temp" "temp"
          (171772 'move' _iterator[171763](171770 call _getIterator tmpIter[171620]))
          Defer
          {
            {
              (171788 call _freeIterator _iterator[171763])
            }
          }
          { scopeless type
            (171777 'move' _indexOfInterest[171762](171774 call iteratorIndex _iterator[171763]))
          }
          ForLoop[171764]
          {
            unknown loc[171781] "coforall index var" "index var" "insert auto destroy"
            (483389 'end of statement')
            (171783 'move' loc[171781] _indexOfInterest[171762])
            (483390 'end of statement' loc[171781])
            (171795 call _upEndCount _coforallCount[171755] 0)
            (483392 'end of statement')
            const tmp[171612] "const" "temp"
            unknown call_tmp[681317] "expr temp" "maybe param" "maybe type" "temp"
            (681320 'move' call_tmp[681317](171609 '_wide_get_locale' loc[171781]))
            (171614 'move' tmp[171612](171610 'deref' call_tmp[681317]))
            (935540 call on_fn[935536] tmp[171612] root[171546] localeZeroGlobal[171489] data[171537] id[171495])
            function on_fn[935536](const in arg dummy_locale_arg[935538]:chpl_localeID_t[209352], arg root[935545], arg localeZeroGlobal[935548]:_any[178](?), arg data[935551], arg id[935554]:int(64)[13]) : void[4] "cobegin or coforall" "non blocking" "on"
            {
              {
                unknown call_tmp[681322] "expr temp" "maybe param" "maybe type" "temp"
                (681325 'move' call_tmp[681322](361546 call here[90438]))
                unknown call_tmp[681329] "expr temp" "maybe param" "maybe type" "temp"
                (681332 'move' call_tmp[681329](171554 call id _mt[243] call_tmp[681322]))
                unknown call_tmp[681334] "expr temp" "maybe param" "maybe type" "temp"
                (681337 'move' call_tmp[681334](171558 call != call_tmp[681329] root[935545]))
                unknown call_tmp[681339] "expr temp" "maybe param" "maybe type" "temp"
                (681342 'move' call_tmp[681339](171604 call _cond_test call_tmp[681334]))
                if call_tmp[681339]
                {
                  unknown call_tmp[681344] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                  (681347 'move' call_tmp[681344](171561 'typeof' localeZeroGlobal[935548]))
                  unknown call_tmp[681351] "maybe param" "maybe type" "temp"
                  (681354 'move' call_tmp[681351](171567 call(171562 call (partial) chpl__deserialize _mt[243] call_tmp[681344]) data[935551]))
                  unknown temp[171568] "dead at end of block" "no auto destroy" "no copy"
                  (544904 'init var' temp[171568] call_tmp[681351])
                  (171571 'end of statement')
                  unknown call_tmp[681356] "maybe param" "maybe type" "temp"
                  (681359 'move' call_tmp[681356](171576 call chpl_get_global_serialize_table id[935554]))
                  const destVoidPtr[171577] "dead at end of block" "const" "insert auto destroy"
                  (544906 'init var' destVoidPtr[171577] call_tmp[681356])
                  (171580 'end of statement')
                  unknown call_tmp[681361] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                  (681364 'move' call_tmp[681361](171584 'typeof' localeZeroGlobal[935548]))
                  unknown call_tmp[681366] "expr temp" "maybe param" "maybe type" "temp"
                  (681369 'move' call_tmp[681366](171586 call c_ptr[205100](?) call_tmp[681361]))
                  unknown call_tmp[681371] "maybe param" "maybe type" "temp"
                  (681374 'move' call_tmp[681371](171587 call _cast call_tmp[681366] destVoidPtr[171577]))
                  const dest[171589] "dead at end of block" "const" "insert auto destroy"
                  (544908 'init var' dest[171589] call_tmp[681371])
                  (171592 'end of statement' data[935551] destVoidPtr[171577])
                  unknown call_tmp[681378] "expr temp" "maybe param" "maybe type" "temp"
                  (681381 'move' call_tmp[681378](171600 call(171596 call (partial) deref _mt[243] dest[171589])))
                  (171602 '=' call_tmp[681378] temp[171568])
                  (483395 'end of statement' dest[171589] temp[171568])
                }
              }
              (171757 call _downEndCount _coforallCount[171755] nil[44])
              (935543 return _void[55])
            }
            {
            }
            label _continueLabel[171767]
            _indexOfInterest[171762]
            _iterator[171763]
          }
          label _breakLabel[171768]
          Defer
          {
            {
              (171799 call _endCountFree _coforallCount[171755])
            }
          }
          (171804 call _waitEndCount _coforallCount[171755] 0)
        }
      }
    }
    (522539 return _void[55])
  }
  where {
    (748339 call chpl_statementLevelSymbol chpl__enableSerializedGlobals[171469])
  }
  function chpl__destroyBroadcastedGlobal[171845](ref arg localeZeroGlobal[171843]:_any[178](?), arg id[171848]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown globalType[171854] "dead at end of block" "insert auto destroy" "type variable"(171853 'typeof' localeZeroGlobal[171843])
    (544912 'move' globalType[171854](544910 'typeof' localeZeroGlobal[171843]))
    unknown call_tmp[681383] "expr temp" "maybe param" "maybe type" "temp"
    (681386 'move' call_tmp[681383](361552 call here[90438]))
    unknown call_tmp[681390] "maybe param" "maybe type" "temp"
    (681393 'move' call_tmp[681390](171859 call id _mt[243] call_tmp[681383]))
    const root[171862] "dead at end of block" "const" "insert auto destroy"
    (544914 'init var' root[171862] call_tmp[681390])
    (171865 'end of statement')
    {
      unknown tmpIter[171927] "expr temp" "maybe ref" "no copy" "temp"
      (171930 'move' tmpIter[171927] Locales[113662])
      unknown isRngDomArr[172114] "maybe param" "temp"
      unknown tmp[428633] "maybe param" "temp"
      (428644 'move' tmp[428633](172116 call isBoundedRange tmpIter[171927]))
      unknown call_tmp[681395] "expr temp" "maybe param" "maybe type" "temp"
      (681398 'move' call_tmp[681395](428646 call _cond_invalid tmp[428633]))
      if call_tmp[681395]
      {
        (428649 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[570811] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[570812] "maybe param" "temp"
      unknown call_tmp[681400] "expr temp" "maybe param" "maybe type" "temp"
      (681403 'move' call_tmp[681400](428634 call isTrue tmp[428633]))
      (570817 'move' tmp[570812](570815 call _cond_test call_tmp[681400]))
      if tmp[570812]
      {
        (570822 'move' tmp[570811](570819 '_paramFoldLogical' tmp[570812] 1))
      }
      {
        unknown tmp[428654] "maybe param" "temp"
        (428665 'move' tmp[428654](172119 call isDomain tmpIter[171927]))
        unknown call_tmp[681405] "expr temp" "maybe param" "maybe type" "temp"
        (681408 'move' call_tmp[681405](428667 call _cond_invalid tmp[428654]))
        if call_tmp[681405]
        {
          (428670 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[570784] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[570785] "maybe param" "temp"
        unknown call_tmp[681410] "expr temp" "maybe param" "maybe type" "temp"
        (681413 'move' call_tmp[681410](428655 call isTrue tmp[428654]))
        (570790 'move' tmp[570785](570788 call _cond_test call_tmp[681410]))
        if tmp[570785]
        {
          (570795 'move' tmp[570784](570792 '_paramFoldLogical' tmp[570785] 1))
        }
        {
          unknown tmp[570797] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[681415] "expr temp" "maybe param" "maybe type" "temp"
          (681418 'move' call_tmp[681415](172122 call isArray tmpIter[171927]))
          (570799 'move' tmp[570797](428659 call isTrue call_tmp[681415]))
          (570804 'move' tmp[570784](570801 '_paramFoldLogical' tmp[570785] tmp[570797]))
        }
        unknown tmp[570824] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (570826 'move' tmp[570824](428638 call isTrue tmp[570784]))
        (570831 'move' tmp[570811](570828 '_paramFoldLogical' tmp[570812] tmp[570824]))
      }
      (172129 'move' isRngDomArr[172114] tmp[570811])
      if isRngDomArr[172114]
      {
        const _coforallCount[171986] "const" "end count" "temp"
        (172051 'move' _coforallCount[171986](172048 call _endCountAlloc 0))
        unknown numTasks[171987] "temp"
        (172035 'move' numTasks[171987](172031 call size _mt[243] tmpIter[171927]))
        (172026 call _upEndCount _coforallCount[171986] 0 numTasks[171987])
        (483402 'end of statement')
        unknown _indexOfInterest[171993] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[171994] "expr temp" "temp"
        (172003 'move' _iterator[171994](172001 call _getIterator tmpIter[171927]))
        Defer
        {
          {
            (172019 call _freeIterator _iterator[171994])
          }
        }
        { scopeless type
          (172008 'move' _indexOfInterest[171993](172005 call iteratorIndex _iterator[171994]))
        }
        ForLoop[171995]
        {
          unknown loc[172012] "coforall index var" "index var" "insert auto destroy"
          (483404 'end of statement')
          (172014 'move' loc[172012] _indexOfInterest[171993])
          (483405 'end of statement' loc[172012])
          const tmp[171933] "const" "temp"
          unknown call_tmp[681422] "expr temp" "maybe param" "maybe type" "temp"
          (681425 'move' call_tmp[681422](171938 '_wide_get_locale' loc[172012]))
          (171935 'move' tmp[171933](171937 'deref' call_tmp[681422]))
          (935597 call on_fn[935593] tmp[171933] root[171862] id[171848])
          function on_fn[935593](const in arg dummy_locale_arg[935595]:chpl_localeID_t[209352], arg root[935602], arg id[935605]:int(64)[13]) : void[4] "cobegin or coforall" "non blocking" "on"
          {
            {
              unknown call_tmp[681427] "expr temp" "maybe param" "maybe type" "temp"
              (681430 'move' call_tmp[681427](361557 call here[90438]))
              unknown call_tmp[681434] "expr temp" "maybe param" "maybe type" "temp"
              (681437 'move' call_tmp[681434](171950 call id _mt[243] call_tmp[681427]))
              unknown call_tmp[681439] "expr temp" "maybe param" "maybe type" "temp"
              (681442 'move' call_tmp[681439](171948 call != call_tmp[681434] root[935602]))
              unknown call_tmp[681444] "expr temp" "maybe param" "maybe type" "temp"
              (681447 'move' call_tmp[681444](171946 call _cond_test call_tmp[681439]))
              if call_tmp[681444]
              {
                unknown call_tmp[681449] "maybe param" "maybe type" "temp"
                (681452 'move' call_tmp[681449](171958 call chpl_get_global_serialize_table id[935605]))
                const voidPtr[171956] "dead at end of block" "const" "insert auto destroy"
                (544916 'init var' voidPtr[171956] call_tmp[681449])
                (171961 'end of statement')
                unknown call_tmp[681454] "expr temp" "maybe param" "maybe type" "temp"
                (681457 'move' call_tmp[681454](171967 call c_ptr[205100](?) globalType[171854]))
                unknown call_tmp[681459] "maybe param" "maybe type" "temp"
                (681462 'move' call_tmp[681459](171965 call _cast call_tmp[681454] voidPtr[171956]))
                unknown ptr[171963] "dead at end of block" "insert auto destroy"
                (544918 'init var' ptr[171963] call_tmp[681459])
                (171971 'end of statement')
                unknown call_tmp[681466] "maybe param" "maybe type" "temp"
                (681469 'move' call_tmp[681466](171978 call(171975 call (partial) deref _mt[243] ptr[171963])))
                unknown temp[171973] "dead at end of block" "no auto destroy" "no copy"
                (544920 'init var' temp[171973] call_tmp[681466])
                (171980 'end of statement' globalType[171854] voidPtr[171956] ptr[171963])
                (171982 call chpl__autoDestroy temp[171973])
                (483410 'end of statement' temp[171973])
              }
            }
            (171988 call _downEndCount _coforallCount[171986] nil[44])
            (935600 return _void[55])
          }
          {
          }
          label _continueLabel[171998]
          _indexOfInterest[171993]
          _iterator[171994]
        }
        label _breakLabel[171999]
        Defer
        {
          {
            (172038 call _endCountFree _coforallCount[171986])
          }
        }
        (172043 call _waitEndCount _coforallCount[171986] 0 numTasks[171987])
      }
      {
        const _coforallCount[172055] "const" "end count" "temp"
        (172111 'move' _coforallCount[172055](172108 call _endCountAlloc 0))
        unknown _indexOfInterest[172062] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[172063] "expr temp" "temp"
        (172072 'move' _iterator[172063](172070 call _getIterator tmpIter[171927]))
        Defer
        {
          {
            (172088 call _freeIterator _iterator[172063])
          }
        }
        { scopeless type
          (172077 'move' _indexOfInterest[172062](172074 call iteratorIndex _iterator[172063]))
        }
        ForLoop[172064]
        {
          unknown loc[172081] "coforall index var" "index var" "insert auto destroy"
          (483416 'end of statement')
          (172083 'move' loc[172081] _indexOfInterest[172062])
          (483417 'end of statement' loc[172081])
          (172095 call _upEndCount _coforallCount[172055] 0)
          (483419 'end of statement')
          const tmp[171919] "const" "temp"
          unknown call_tmp[681471] "expr temp" "maybe param" "maybe type" "temp"
          (681474 'move' call_tmp[681471](171916 '_wide_get_locale' loc[172081]))
          (171921 'move' tmp[171919](171917 'deref' call_tmp[681471]))
          (935582 call on_fn[935578] tmp[171919] root[171862] id[171848])
          function on_fn[935578](const in arg dummy_locale_arg[935580]:chpl_localeID_t[209352], arg root[935587], arg id[935590]:int(64)[13]) : void[4] "cobegin or coforall" "non blocking" "on"
          {
            {
              unknown call_tmp[681476] "expr temp" "maybe param" "maybe type" "temp"
              (681479 'move' call_tmp[681476](361554 call here[90438]))
              unknown call_tmp[681483] "expr temp" "maybe param" "maybe type" "temp"
              (681486 'move' call_tmp[681483](171870 call id _mt[243] call_tmp[681476]))
              unknown call_tmp[681488] "expr temp" "maybe param" "maybe type" "temp"
              (681491 'move' call_tmp[681488](171874 call != call_tmp[681483] root[935587]))
              unknown call_tmp[681493] "expr temp" "maybe param" "maybe type" "temp"
              (681496 'move' call_tmp[681493](171911 call _cond_test call_tmp[681488]))
              if call_tmp[681493]
              {
                unknown call_tmp[681498] "maybe param" "maybe type" "temp"
                (681501 'move' call_tmp[681498](171879 call chpl_get_global_serialize_table id[935590]))
                const voidPtr[171880] "dead at end of block" "const" "insert auto destroy"
                (544922 'init var' voidPtr[171880] call_tmp[681498])
                (171883 'end of statement')
                unknown call_tmp[681503] "expr temp" "maybe param" "maybe type" "temp"
                (681506 'move' call_tmp[681503](171889 call c_ptr[205100](?) globalType[171854]))
                unknown call_tmp[681508] "maybe param" "maybe type" "temp"
                (681511 'move' call_tmp[681508](171890 call _cast call_tmp[681503] voidPtr[171880]))
                unknown ptr[171892] "dead at end of block" "insert auto destroy"
                (544924 'init var' ptr[171892] call_tmp[681508])
                (171895 'end of statement')
                unknown call_tmp[681515] "maybe param" "maybe type" "temp"
                (681518 'move' call_tmp[681515](171901 call(171897 call (partial) deref _mt[243] ptr[171892])))
                unknown temp[171902] "dead at end of block" "no auto destroy" "no copy"
                (544926 'init var' temp[171902] call_tmp[681515])
                (171905 'end of statement' globalType[171854] voidPtr[171880] ptr[171892])
                (171909 call chpl__autoDestroy temp[171902])
                (483423 'end of statement' temp[171902])
              }
            }
            (172057 call _downEndCount _coforallCount[172055] nil[44])
            (935585 return _void[55])
          }
          {
          }
          label _continueLabel[172067]
          _indexOfInterest[172062]
          _iterator[172063]
        }
        label _breakLabel[172068]
        Defer
        {
          {
            (172099 call _endCountFree _coforallCount[172055])
          }
        }
        (172104 call _waitEndCount _coforallCount[172055] 0)
      }
    }
    (522541 return _void[55])
  }
  where {
    (748341 call chpl_statementLevelSymbol chpl__enableSerializedGlobals[171469])
  }
  (355293 'used modules list'(171462 'use' ChapelLocale[89847])(171466 'use' CPtr[204989]))
}